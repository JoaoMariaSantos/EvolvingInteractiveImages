{
  "id": "zh276ogp-spbt-ydvm-w5ce-es5gp5ked1hi",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.4000000059604645,
    "populationSize": 20
  },
  "populations": [{
    "generation": 0,
    "id": "tp064p16-iu3u-9b9o-dpfd-k8year2bkza6",
    "individuals": [
      {
        "fitness": 0,
        "expressions": {
          "r": "noise(externalVal,y)",
          "b": "mod(externalVal,(y+mod(x,x)))",
          "g": "(max(x,(sin(mod((externalVal*max(max(tan(max(cos(x),x)),(sin(y)-externalVal)),(y*y))),y))/((audio(pow((x*x),x),noise(externalVal,x))+externalVal)+max((x/cos(y)),(x-x)))))/y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "audio(min(mod(externalVal,sin(externalVal)),y),cos(max((x-mod((pow(y,y)/(externalVal-externalVal)),(audio(((sin(y)-x)/(x*max(externalVal,(mod(noise(pow(noise(externalVal,cos(mod(min(mod(cos(tan(y)),x),y),y))),x),min(max(y,(mod((noise(x,y)-(noise(x,y)-externalVal)),externalVal)/(y/externalVal))),(externalVal-externalVal))),max(x,cos(x)))*sin((max(cos(y),y)-y)))))),tan(pow(mod(pow(y,sin(mod(noise(externalVal,min(y,cos(max(x,externalVal)))),y))),min(cos(y),externalVal)),x)))/x))),externalVal)))",
          "b": "min(mod(y,tan(externalVal)),x)",
          "g": "(externalVal*x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan(pow(externalVal,externalVal))",
          "b": "tan(externalVal)",
          "g": "noise(x,min(pow(pow(((externalVal*externalVal)/(tan(externalVal)/noise(tan(x),(sin(x)-y)))),cos(y)),audio(pow(externalVal,pow(audio(x,(externalVal+x)),y)),y)),max(y,min(externalVal,y))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "noise(x,max(tan(y),x))",
          "b": "cos((x/y))",
          "g": "tan(x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan(((mod(max(y,externalVal),max(y,max((tan(externalVal)*externalVal),x)))-audio(externalVal,x))+(noise(externalVal,y)/externalVal)))",
          "b": "(cos((sin(x)/cos(min(externalVal,externalVal))))*x)",
          "g": "(y+y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(y,(y*(externalVal/sin(max(externalVal,max(x,mod(((y+x)*sin(x)),(cos(y)-audio((min(noise(y,y),tan(x))*tan((externalVal+y))),externalVal)))))))))",
          "b": "mod(min(noise(min(audio(max((pow(y,audio(sin((externalVal/(pow(externalVal,min(externalVal,externalVal))*y))),tan(cos(x))))/externalVal),tan((x*mod(y,y)))),min(max((y+mod((noise(x,(x+(tan(y)+(audio(externalVal,x)+x))))+min(x,max(min(x,y),x))),y)),(y+externalVal)),externalVal)),externalVal),max(x,max(mod(y,x),x))),((x-x)-pow(max(y,(cos(y)/y)),noise(y,externalVal)))),y)",
          "g": "cos(pow(externalVal,x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(y,(externalVal*x))",
          "b": "max(pow(x,y),externalVal)",
          "g": "(x+x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(externalVal)",
          "b": "tan(audio(externalVal,y))",
          "g": "(externalVal*externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(externalVal-max(externalVal,y))",
          "b": "(externalVal+cos(tan(externalVal)))",
          "g": "noise(y,(max(y,y)-noise(externalVal,y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x*y)",
          "b": "((externalVal-min(externalVal,y))-y)",
          "g": "pow(externalVal,(x*((externalVal/((y*tan(max(x,externalVal)))*externalVal))-x)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(noise(min(x,y),audio(x,pow(externalVal,pow(y,(min((max(mod((mod((y*externalVal),pow(max(externalVal,y),(externalVal+externalVal)))/(pow((x-y),tan(y))-x)),externalVal),noise(((y/mod((noise(x,(max(externalVal,audio(externalVal,max(mod(x,audio(externalVal,y)),(tan((x+y))*externalVal))))/x))/min(y,externalVal)),(y*(x*cos(x)))))*y),(externalVal+cos(sin(x)))))*externalVal),(x+y))-tan(mod(y,tan(noise(min(externalVal,pow(externalVal,((mod(y,x)/sin(externalVal))+x))),externalVal)))))))))+x)",
          "b": "((cos(min(noise((min((externalVal+sin(pow(sin(y),externalVal))),sin(mod((max((x*externalVal),externalVal)-cos(((externalVal+externalVal)*min(y,tan(audio((tan(x)*y),y)))))),externalVal)))+y),sin(noise(sin(x),y))),x))/audio(min(externalVal,externalVal),y))+((min(audio(sin(externalVal),externalVal),((y+x)-(min(externalVal,pow(x,x))*x)))-y)-mod((y*x),noise(x,externalVal))))",
          "g": "((y-pow(sin(x),y))-tan(x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(x)",
          "b": "(x+externalVal)",
          "g": "max(tan((externalVal/(x*externalVal))),y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "((externalVal-(externalVal+max(x,tan(externalVal))))-min(sin((externalVal*tan(noise(externalVal,pow((y/externalVal),(y-externalVal)))))),externalVal))",
          "b": "(max(externalVal,max(y,externalVal))+x)",
          "g": "mod(y,sin((externalVal+x)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(noise(min(y,(x/sin(y))),x)*((externalVal/y)+sin(cos(cos(sin(noise((mod(y,x)+tan(mod(externalVal,x))),mod(externalVal,x))))))))",
          "b": "audio(((max(y,externalVal)+x)-noise(externalVal,((externalVal*externalVal)-y))),x)",
          "g": "mod(mod(pow(noise(y,tan(x)),pow(audio(externalVal,x),x)),externalVal),min((sin(y)/min((x*(x/(externalVal-max(cos(sin(externalVal)),max(x,sin(y)))))),cos(sin(max(tan(mod(y,y)),x))))),mod(externalVal,y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(min(max(y,sin(tan(x))),x)/sin(y))",
          "b": "((sin(x)/externalVal)/mod(cos(externalVal),y))",
          "g": "(y+x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(x,(y/x))",
          "b": "max(x,x)",
          "g": "max(audio(min(externalVal,pow(((audio(x,x)-x)*externalVal),(min(externalVal,tan(y))/pow(audio(externalVal,min(y,y)),x)))),(tan(y)/externalVal)),((cos(x)/y)/max(y,(y-y))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "noise(externalVal,noise(y,y))",
          "b": "tan((tan(externalVal)/x))",
          "g": "mod(externalVal,y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos((y+pow(y,externalVal)))",
          "b": "(x+externalVal)",
          "g": "mod(x,(sin(max(y,cos(x)))/(x-(externalVal-mod(y,cos((x+cos(externalVal))))))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan(externalVal)",
          "b": "cos(pow(y,y))",
          "g": "pow(cos(externalVal),max(max(externalVal,tan(audio(x,y))),externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x*x)",
          "b": "(tan(pow((tan(mod(x,noise(noise(min(tan(externalVal),(min(x,x)-sin((x*tan(sin(y)))))),externalVal),externalVal)))/y),min(y,pow((externalVal+((externalVal/externalVal)*cos(pow(tan(noise(externalVal,x)),x)))),tan(audio(x,min(min(y,sin(externalVal)),(externalVal-x))))))))+externalVal)",
          "g": "audio(externalVal,y)"
        }
      }
    ],
    "timestamp": "21h:55m:17s"
  }],
  "timestamp": "2023-11-16-21-55-16"
}