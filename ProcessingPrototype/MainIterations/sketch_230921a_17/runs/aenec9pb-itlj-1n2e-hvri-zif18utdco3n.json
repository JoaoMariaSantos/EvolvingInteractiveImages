{
  "id": "aenec9pb-itlj-1n2e-hvri-zif18utdco3n",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.4000000059604645,
    "populationSize": 20
  },
  "populations": [{
    "generation": 0,
    "id": "6xi93naz-l8k5-lsdu-xqic-603m10q9noxy",
    "individuals": [
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(externalVal)",
          "b": "(x-x)",
          "g": "(y/y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "((externalVal+y)+mod(x,(externalVal*y)))",
          "b": "mod(y,(cos(externalVal)-noise(x,x)))",
          "g": "(min(noise(y,externalVal),externalVal)/y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(x,y)",
          "b": "sin((max(noise(y,externalVal),x)-max(externalVal,x)))",
          "g": "noise(x,y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(min(y,(y+tan(cos(externalVal)))),x)",
          "b": "mod((((noise(x,pow((min(((noise((externalVal+x),max(y,(mod(tan(externalVal),y)*tan(y))))-sin((y-x)))*x),x)*x),sin(externalVal)))*(y/y))/y)+y),x)",
          "g": "cos(y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(externalVal,y)",
          "b": "(y*tan(max(externalVal,x)))",
          "g": "pow(externalVal,externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x/externalVal)",
          "b": "sin(externalVal)",
          "g": "max(y,sin(externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(y*externalVal)",
          "b": "((min(x,x)+externalVal)/x)",
          "g": "tan(externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(externalVal-y)",
          "b": "min(pow(y,x),(externalVal*(externalVal+externalVal)))",
          "g": "(externalVal+noise(externalVal,y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max((x*tan(x)),externalVal)",
          "b": "pow(sin(x),y)",
          "g": "tan(sin(y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(externalVal,x)",
          "b": "cos(mod(y,externalVal))",
          "g": "(tan(y)/(externalVal-externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(x)",
          "b": "max(sin((sin((x/mod(((y+externalVal)*cos(min(max(externalVal,x),y))),max((y*(y-externalVal)),y))))+x)),externalVal)",
          "g": "tan(min(x,y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(((externalVal-y)-max(y,sin(externalVal)))-mod(max((cos(min(externalVal,(pow(y,y)/y)))+pow(y,pow((max(externalVal,(x/externalVal))+(y*noise((y-sin(externalVal)),externalVal))),x))),pow(pow(externalVal,y),min((y-x),y))),x))",
          "b": "tan(x)",
          "g": "sin(externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(tan(noise((((y*sin(externalVal))/y)+(min(y,max(y,pow(y,y)))-y)),(noise(max(sin(externalVal),(externalVal*externalVal)),noise(x,noise(y,cos(x))))*x))),(noise(((tan(sin(mod(sin(externalVal),mod(noise(externalVal,x),x))))-min(x,max(pow(x,tan(sin((x-x)))),y)))*tan((cos((tan(mod(x,(pow((externalVal/(externalVal+min((externalVal*externalVal),max(externalVal,(y+pow(((y+y)-y),(noise((min(sin((externalVal*min(x,(mod(sin(externalVal),cos(y))*(sin(x)*externalVal))))),tan(externalVal))+min((x-pow(cos((min(externalVal,noise(min(x,noise(x,y)),pow(y,externalVal)))*y)),externalVal)),x)),tan(x))/externalVal))))))),tan(y))+max((cos(pow((y/min(x,max(tan(sin((y/pow(externalVal,externalVal)))),(min(pow(mod(noise(externalVal,mod(tan(externalVal),x)),(externalVal+(x-(y/sin((y-sin(y))))))),(y*x)),x)+externalVal)))),externalVal))*tan(((min(y,x)-max((y/(x*cos(pow(y,cos((y*y)))))),(x-sin(externalVal))))*y))),min(max(y,cos(y)),y)))))+externalVal))*x))),x)-y))",
          "b": "cos(cos(x))",
          "g": "cos(x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(min(externalVal,(externalVal-x))-y)",
          "b": "(mod(y,x)-y)",
          "g": "(externalVal-y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(externalVal,externalVal)",
          "b": "(max(y,(externalVal/(mod(min((externalVal-min(externalVal,(externalVal/y))),externalVal),(min(pow(y,y),sin(pow(y,externalVal)))+cos(externalVal)))-externalVal)))*tan(x))",
          "g": "((x+x)/externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(sin(x),(y-y))",
          "b": "(mod(x,externalVal)*(tan(pow((externalVal/((sin(sin(tan(externalVal)))/externalVal)*externalVal)),y))*noise(y,externalVal)))",
          "g": "(((x-(x/x))+y)/y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(externalVal,y)",
          "b": "tan(pow(y,cos(cos((y/externalVal)))))",
          "g": "(y-mod(y,tan(min(externalVal,externalVal))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x*noise(x,externalVal))",
          "b": "cos(x)",
          "g": "min(x,externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(x,externalVal)",
          "b": "(pow(x,max(externalVal,externalVal))+min(max(y,(externalVal*(externalVal*x))),x))",
          "g": "(max(y,x)+pow(noise(sin(mod((x/externalVal),sin(externalVal))),tan(externalVal)),x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan((pow(sin(y),y)/x))",
          "b": "min(x,max(mod(x,y),y))",
          "g": "mod(cos(x),cos(externalVal))"
        }
      }
    ],
    "timestamp": "22h:21m:30s"
  }],
  "timestamp": "2023-11-16-22-21-29"
}