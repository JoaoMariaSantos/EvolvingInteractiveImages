{
  "id": "ytl8xm7k-f5nc-shkx-ms1b-iex9pzf44bzv",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.4000000059604645,
    "populationSize": 20
  },
  "populations": [{
    "generation": 0,
    "id": "1k8kxpxf-mrdj-tjd1-sygu-p0um0bad7nxa",
    "individuals": [
      {
        "fitness": 0,
        "expressions": {
          "r": "max(y,cos(sin(externalVal)))",
          "b": "(audio(max(x,y),externalVal)/max(sin(cos(cos((((noise(y,min((mod(x,min((y+y),externalVal))+externalVal),(x-externalVal)))-externalVal)/externalVal)*x)))),x))",
          "g": "min(externalVal,max(cos((tan(mod(pow(sin(max(audio(min(x,mod(externalVal,externalVal)),y),x)),(noise(max(mod(mod(min(externalVal,tan(audio(externalVal,x))),y),max(((y/externalVal)*y),mod(externalVal,(y-y)))),y),x)/(x-(x-y)))),x))-y)),(sin(x)-y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(cos(mod(((mod(y,x)/((y/externalVal)*y))*cos(externalVal)),tan(externalVal))))",
          "b": "noise(max(externalVal,y),x)",
          "g": "min(y,min(y,(y/mod(externalVal,y))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(cos((x-tan(x))),externalVal)",
          "b": "min(x,noise(y,mod(externalVal,externalVal)))",
          "g": "mod(y,y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan(noise(cos(cos((x-(x-pow(externalVal,x))))),externalVal))",
          "b": "noise(externalVal,x)",
          "g": "(tan(x)/x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(y)",
          "b": "(x-audio(mod(pow((audio(y,x)/audio(x,((x*y)/externalVal))),pow(externalVal,externalVal)),(noise(sin((x-min(y,externalVal))),(externalVal+x))-x)),externalVal))",
          "g": "(tan(y)/(y/y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(audio(x,y),y)",
          "b": "tan((y-noise(x,externalVal)))",
          "g": "(pow(audio(y,externalVal),min(externalVal,y))*cos(audio(y,audio(x,pow(y,x)))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "noise(((externalVal-((y+externalVal)/externalVal))-max(min(tan(y),mod((externalVal/externalVal),(externalVal+externalVal))),audio(min(x,externalVal),pow(y,externalVal)))),externalVal)",
          "b": "(((x+x)-audio(((audio((y/noise((externalVal*max((y-y),externalVal)),(pow(pow(y,x),externalVal)-(min(cos(externalVal),y)/((x/audio(((mod(x,sin(x))*y)-(y/(externalVal/externalVal))),externalVal))/max(externalVal,x)))))),noise(cos((x/externalVal)),externalVal))/(tan(audio(max(y,x),x))/(externalVal+y)))-(externalVal-tan(pow(externalVal,y)))),y))*sin(((min(pow(sin((y+y)),(y*(x/tan(min(x,(y/(audio(y,x)-y))))))),(audio(externalVal,sin(x))*y))/pow(y,externalVal))*min(y,max(externalVal,x)))))",
          "g": "((mod(x,y)-x)*externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(tan((y*externalVal)),min(y,x))",
          "b": "audio(audio(pow(min(min(pow(pow((externalVal*externalVal),sin(y)),audio(externalVal,(x*x))),audio(x,y)),min((x/y),externalVal)),x),cos(externalVal)),((x*pow(tan(y),max((externalVal*max(max(y,audio(externalVal,cos(x))),y)),audio(x,x))))-externalVal))",
          "g": "(min(x,(mod(y,y)+y))+cos(externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(cos(x),min(externalVal,externalVal))",
          "b": "min(y,externalVal)",
          "g": "cos(x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(x,externalVal)",
          "b": "(min(y,externalVal)*(min(x,x)+tan(tan(x))))",
          "g": "max((y-externalVal),x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(tan((externalVal*audio(min(y,pow(cos(y),y)),mod(min(y,y),y)))),(audio((mod(x,x)+pow(externalVal,tan(min(externalVal,y)))),y)*(x/max(externalVal,max(pow(max((cos(x)-y),y),mod(noise(externalVal,y),tan(y))),(pow(externalVal,x)-(externalVal/externalVal)))))))",
          "b": "(min(y,x)-((sin(y)/(y*x))*pow(((externalVal+(externalVal-tan(noise(externalVal,pow(externalVal,max(noise(tan(audio(y,externalVal)),x),x))))))-externalVal),x)))",
          "g": "cos(y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(y*min(((y/noise(((cos((((((y+min(x,y))-y)+min((y+tan(y)),max(externalVal,min((externalVal*((min(sin(y),externalVal)-y)+y)),y))))+externalVal)-noise(x,pow(externalVal,mod(externalVal,y)))))/cos(y))*pow(externalVal,audio(y,externalVal))),y))*externalVal),externalVal))",
          "b": "cos(audio(min(mod(noise(y,externalVal),max(min(x,x),y)),externalVal),tan(externalVal)))",
          "g": "audio(cos(noise(externalVal,(sin(min(audio(((((noise((x+externalVal),max(y,noise(externalVal,externalVal)))-x)/(noise(x,x)-(max(max(externalVal,max(sin(audio(cos(sin((y-x))),(pow(x,x)-externalVal))),x)),mod((cos(x)-min((y/pow(noise((mod(cos(externalVal),noise(x,x))+(y+y)),((y*mod(noise(max((y-x),x),y),x))-mod(x,externalVal))),externalVal)),mod(audio(y,x),y))),(tan(externalVal)/y)))+(((y-sin(y))+y)/y))))/x)+x),mod(mod((externalVal+externalVal),y),audio(y,x))),externalVal))*(y+mod(externalVal,externalVal))))),tan(cos(externalVal)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(audio((noise((externalVal+cos(y)),y)+y),(externalVal-max(y,max(externalVal,x)))),max(sin(x),x))",
          "b": "min(min(y,mod(externalVal,min(y,externalVal))),mod(max(audio(min(mod(externalVal,cos(externalVal)),externalVal),y),audio(externalVal,y)),x))",
          "g": "(externalVal*externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "audio(max(externalVal,externalVal),sin(audio(tan(noise(externalVal,x)),externalVal)))",
          "b": "(y/(cos(audio((max((sin(max(tan(x),externalVal))*y),audio(sin(cos((y+((max(tan((min(noise(mod(pow(y,y),(externalVal/(sin(y)-audio(externalVal,externalVal)))),externalVal),mod(mod(x,x),x))*x)),externalVal)/x)-mod(y,noise(noise(x,y),tan((externalVal-cos((audio(mod(cos(y),externalVal),externalVal)/externalVal)))))))))),noise(y,x)))+x),y))/y))",
          "g": "(x/x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "noise(x,noise(cos((audio((externalVal/y),externalVal)-cos(cos((sin(y)-x))))),pow(sin(externalVal),y)))",
          "b": "(mod(y,externalVal)/x)",
          "g": "sin((audio(externalVal,mod(mod((x+((y+x)+noise(x,y))),externalVal),tan(mod(noise(x,x),externalVal))))/y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "noise((y+(externalVal/sin(noise(y,(externalVal+tan(x)))))),externalVal)",
          "b": "(y*noise(y,min(y,(max(y,(sin(mod(x,(y-sin(externalVal))))+min(min(externalVal,y),y)))/externalVal))))",
          "g": "audio(min(externalVal,externalVal),y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(noise(y,y))",
          "b": "(x+y)",
          "g": "sin(audio((min(sin(audio((x+(mod((audio(max((min(y,max(tan(externalVal),((tan(sin(x))+audio(max(externalVal,x),audio(max(externalVal,externalVal),noise(min(x,x),externalVal))))-y)))+x),x),mod(cos(max(x,(externalVal-pow(min(externalVal,externalVal),(noise((mod(pow(tan(noise((noise((x-y),min(noise(noise(externalVal,pow(y,min(x,x))),(cos((externalVal+y))*externalVal)),cos(x)))*((externalVal/externalVal)*externalVal)),externalVal)),y),externalVal)/x),x)*y))))),x))*(y*x)),externalVal)+x)),x)),externalVal)+min(y,externalVal)),max(x,y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "((externalVal/(x*mod(x,noise(y,y))))-mod(((y+max(y,(x+noise(y,externalVal))))-min(mod(mod(noise(externalVal,min((noise(pow(x,max(audio(mod((x+y),y),x),mod(pow(y,externalVal),x))),(x*(externalVal/tan(y))))+externalVal),externalVal)),(pow(externalVal,y)-noise(x,(audio(y,externalVal)/(y*(((externalVal/y)-x)/mod((cos((externalVal*x))*audio((x*externalVal),y)),sin(cos(externalVal))))))))),(x*x)),mod((x-min(((x+y)-y),mod((externalVal/externalVal),x))),y))),mod(x,sin(y))))",
          "b": "noise(audio(externalVal,externalVal),y)",
          "g": "((y/sin(min(x,audio(mod(externalVal,y),(tan(sin(pow(y,cos(noise(externalVal,externalVal)))))*x)))))-tan((audio(y,max(externalVal,min(mod(tan(externalVal),externalVal),cos(audio(max(y,y),pow(min(x,y),externalVal))))))*(noise(y,((y+(y+mod(cos((externalVal/min(x,x))),x)))/x))+externalVal))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(externalVal,(x+externalVal))",
          "b": "mod(x,(noise(sin((x+x)),y)+y))",
          "g": "noise(y,x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(x,audio(min(noise(max(x,sin(noise(mod(x,externalVal),externalVal))),mod((y+audio(noise(min(max(x,audio(pow((max(cos(x),(audio(externalVal,min(min(x,x),min(((y+(audio(externalVal,y)/y))+y),cos(x))))+y))*sin(mod(noise((externalVal/(externalVal-x)),pow(sin(min(x,mod(tan(tan(externalVal)),pow(mod(x,y),noise((x*externalVal),audio(externalVal,(sin(y)+y))))))),(x*cos(externalVal)))),(x+mod((x-audio(x,y)),mod(max(mod(y,max(mod((audio(x,x)+min(pow(x,noise(sin(mod(mod(x,max(x,x)),y)),((externalVal-y)-externalVal))),(tan(pow(tan(pow(cos(externalVal),min(x,externalVal))),(sin(y)*y)))-externalVal))),(max(pow(tan(cos(pow((externalVal/y),externalVal))),tan(pow(y,tan(cos(y))))),x)/externalVal)),x)),y),tan(y))))))),(y*noise(externalVal,externalVal))),y)),cos(tan(y))),min((externalVal-x),(cos(y)*pow(y,externalVal)))),y)),y)),tan(externalVal)),y))",
          "b": "min(cos(max(x,externalVal)),tan(min((y*pow(x,x)),(y-cos(y)))))",
          "g": "pow(mod(((cos(mod(min(cos(x),externalVal),(pow(x,(x+externalVal))/audio((externalVal+y),x))))*externalVal)+audio(max(y,x),x)),(x*externalVal)),externalVal)"
        }
      }
    ],
    "timestamp": "21h:46m:13s"
  }],
  "timestamp": "2023-11-16-21-46-12"
}