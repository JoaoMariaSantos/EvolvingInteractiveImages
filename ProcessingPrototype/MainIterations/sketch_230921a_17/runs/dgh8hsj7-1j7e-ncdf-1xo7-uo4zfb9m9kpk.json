{
  "id": "dgh8hsj7-1j7e-ncdf-1xo7-uo4zfb9m9kpk",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.4000000059604645,
    "populationSize": 20
  },
  "populations": [{
    "generation": 0,
    "id": "n0s44n56-419f-zlu9-59o5-yff5iwsrlmkd",
    "individuals": [
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(y)",
          "b": "(x/noise(cos(x),externalVal))",
          "g": "sin(x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(tan(y)-(y/y))",
          "b": "noise(externalVal,y)",
          "g": "mod(y,x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(y,(x*x))",
          "b": "(x/externalVal)",
          "g": "(sin(noise(((y/(y+externalVal))+pow((x*min(y,externalVal)),noise(y,externalVal))),x))+y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(tan(((y+noise(cos(noise((externalVal/y),y)),x))/externalVal)))",
          "b": "tan((externalVal/y))",
          "g": "noise(x,externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan((x*pow(y,y)))",
          "b": "tan(x)",
          "g": "sin((y/max(pow(tan(x),pow(mod((x-y),min(cos(noise(externalVal,((externalVal*y)*tan(externalVal)))),x)),(y*externalVal))),y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(y,x)",
          "b": "pow((x*(sin(externalVal)*x)),tan(min(externalVal,externalVal)))",
          "g": "max((externalVal-externalVal),y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "noise(max((cos(max(y,((min(y,x)-y)*x)))+y),x),y)",
          "b": "noise(x,((y-noise(cos(x),x))*x))",
          "g": "min(y,(externalVal+x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(x,(y*noise(externalVal,tan(min(min((externalVal/externalVal),cos(sin(externalVal))),(x-y))))))",
          "b": "(externalVal*(x/y))",
          "g": "(y+min((y/externalVal),y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(externalVal-y)",
          "b": "cos(x)",
          "g": "min((x-((y+cos(y))*cos(x))),externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan(y)",
          "b": "(externalVal+sin(externalVal))",
          "g": "max(min(noise(tan(externalVal),sin(y)),(y/x)),y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(x,externalVal)",
          "b": "min(x,noise(noise((sin(y)*x),(y*mod(max(externalVal,externalVal),y))),(pow((tan(externalVal)*x),x)/externalVal)))",
          "g": "max(x,y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x+externalVal)",
          "b": "min(sin(y),pow((pow(pow((x+externalVal),mod(externalVal,mod(externalVal,externalVal))),max(x,externalVal))/y),x))",
          "g": "((externalVal-externalVal)*mod((x-max(pow(x,externalVal),(externalVal*externalVal))),externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(externalVal,y)",
          "b": "((y+externalVal)+noise(((x*x)*noise(pow(max(pow(pow(externalVal,pow(max(y,y),x)),x),pow(externalVal,(x*(mod(y,(max(mod(y,max(min(externalVal,y),(y/(y+max(mod(externalVal,mod(mod((min(max(noise(noise((noise(noise(x,y),x)+min(((pow(y,externalVal)+max(x,externalVal))/tan((externalVal*externalVal))),externalVal)),(y/externalVal)),externalVal),cos((x-externalVal))),((externalVal+externalVal)/((x*mod(sin(min(pow(cos(x),externalVal),y)),x))-externalVal)))*tan(tan(mod(externalVal,noise(max(sin(sin(tan(x))),pow(externalVal,externalVal)),x))))),(y/externalVal)),sin(x))),externalVal))))),(max(externalVal,tan(externalVal))*externalVal))*y))*y)))),noise(x,externalVal)),y)),mod(sin(x),x)))",
          "g": "(externalVal/(externalVal+(min((externalVal/externalVal),(y+(sin(x)*x)))-cos(noise(externalVal,externalVal)))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(noise((externalVal*y),(x/externalVal))/externalVal)",
          "b": "((((sin(externalVal)-externalVal)*(x-x))-externalVal)-max(max(x,tan(((max((x-y),x)*x)-y))),min(mod(max(x,x),x),y)))",
          "g": "(x*tan(min(pow(externalVal,y),x)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(cos(y),y)",
          "b": "noise(y,x)",
          "g": "mod(sin(tan(x)),pow(externalVal,externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(noise(x,y))",
          "b": "tan(((externalVal-y)-((x/mod(sin((cos(externalVal)+y)),y))/(sin(sin(mod(y,y)))*pow(x,mod(((mod(y,y)-sin((noise(pow(cos(mod((y/tan(y)),max(max(externalVal,y),externalVal))),(externalVal-y)),(max((x-(externalVal/(tan(externalVal)+sin(y)))),y)/x))*externalVal)))*tan(externalVal)),y))))))",
          "g": "mod(y,((max(max(noise(max(y,pow(max(max(y,x),x),x)),y),noise(((y/y)-y),x)),x)/externalVal)/cos(y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max((cos(externalVal)*mod(x,mod(pow((y/noise(noise((y/noise(y,mod(noise((cos((max((x+min(((max(y,(min(cos(y),externalVal)*tan(x)))-pow(y,tan(externalVal)))*externalVal),noise((externalVal/((pow(externalVal,(mod(externalVal,externalVal)/(externalVal-externalVal)))*noise(x,x))+min(tan(x),x))),y))),x)/externalVal))/(y/x)),externalVal),x))),x),externalVal)),y),externalVal))),mod((pow(((max(externalVal,(((x*tan(min(sin((noise((sin((pow(cos(externalVal),(externalVal+y))*y))-y),mod(x,min(y,y)))*(cos(y)+mod(sin(x),((x*pow((x/(y*y)),min(x,noise(y,externalVal))))/pow(x,externalVal)))))),mod(externalVal,y))))/tan((externalVal+externalVal)))-y))*mod(externalVal,max(max(y,y),externalVal)))*x),tan(x))+((externalVal-externalVal)-sin(sin(sin(mod(x,externalVal)))))),(x/externalVal)))",
          "b": "tan(min(externalVal,x))",
          "g": "(x-y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(externalVal,y)",
          "b": "sin(externalVal)",
          "g": "tan(y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(y,externalVal)",
          "b": "(externalVal-y)",
          "g": "cos(sin(y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(externalVal,cos(x))",
          "b": "sin(y)",
          "g": "(min(noise(x,x),externalVal)+(min(noise((x*x),y),x)*mod(x,externalVal)))"
        }
      }
    ],
    "timestamp": "22h:11m:15s"
  }],
  "timestamp": "2023-11-16-22-11-13"
}