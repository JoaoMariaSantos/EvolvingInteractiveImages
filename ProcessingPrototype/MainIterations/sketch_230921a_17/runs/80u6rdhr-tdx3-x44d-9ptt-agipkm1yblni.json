{
  "id": "80u6rdhr-tdx3-x44d-9ptt-agipkm1yblni",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.4000000059604645,
    "populationSize": 20
  },
  "populations": [{
    "generation": 0,
    "id": "ykrsydyz-ajgw-kuu3-zh9j-dhlmbo7hqlql",
    "individuals": [
      {
        "fitness": 0,
        "expressions": {
          "r": "(sin(cos(y))-mod(x,y))",
          "b": "max(x,(x+x))",
          "g": "pow(externalVal,mod(min(y,audio(tan((tan(tan(externalVal))/y)),x)),x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(max(sin(pow((max(y,cos(x))*(x+externalVal)),max(x,min(audio(audio(tan((mod(externalVal,externalVal)-y)),(sin(mod(y,externalVal))*((audio(x,y)+(y*x))-min(externalVal,cos(y))))),sin(externalVal)),sin(sin(cos(x))))))),y),(y/externalVal))",
          "b": "mod(y,sin(mod(mod(audio(externalVal,externalVal),cos(x)),tan(pow((externalVal-x),cos(audio(externalVal,y)))))))",
          "g": "(mod(externalVal,audio(max(x,pow(y,mod((externalVal/y),externalVal))),y))*(tan(max(tan(y),externalVal))/y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(externalVal,noise(externalVal,y))",
          "b": "(y*x)",
          "g": "pow(min(cos(y),(x-externalVal)),y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min((externalVal+y),externalVal)",
          "b": "max(x,(min(min(y,x),pow(y,noise((tan(pow(x,cos(x)))*(pow(externalVal,pow(y,y))+x)),y)))*(externalVal*((cos(tan(externalVal))+y)*x))))",
          "g": "(min(x,(x-x))*externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x/externalVal)",
          "b": "tan(y)",
          "g": "pow((y+x),(y/externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "audio((pow(y,externalVal)-y),x)",
          "b": "pow(mod(externalVal,(y+x)),noise(y,noise(x,max(max(x,y),externalVal))))",
          "g": "audio(tan((externalVal*min(sin(x),pow(y,(x+(y+externalVal)))))),(x*y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x+tan(sin(y)))",
          "b": "mod(externalVal,audio(x,x))",
          "g": "mod(x,y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x/pow(pow(noise((x/(noise(pow((externalVal+(x+max((externalVal*audio(y,y)),noise(y,(externalVal+mod(x,min(sin(externalVal),x))))))),pow(externalVal,y)),y)*y)),tan(y)),x),x))",
          "b": "pow(externalVal,cos(externalVal))",
          "g": "(y-x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(externalVal,((externalVal/min(y,sin(max(tan((x*audio(externalVal,min(tan((y-externalVal)),(((x*(noise(audio(externalVal,externalVal),(tan(x)-externalVal))/externalVal))/x)/x))))),noise(min(y,x),((y+audio(externalVal,externalVal))+externalVal))))))*(externalVal+x)))",
          "b": "cos(x)",
          "g": "noise(audio(y,y),min(min(audio(audio(externalVal,pow(x,y)),y),y),(pow((audio(y,y)+externalVal),max(externalVal,y))*x)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(noise(y,tan(max(x,externalVal))),y)",
          "b": "((externalVal+noise((y+externalVal),audio(x,(externalVal-min(noise(pow(pow(externalVal,y),(sin(externalVal)*audio((externalVal/(y-(externalVal-min(y,tan(cos(pow(mod(mod(cos(cos(max(externalVal,audio(y,y)))),max(audio(y,externalVal),cos(externalVal))),externalVal),y))))))),externalVal))),sin((x-mod(min(((externalVal/cos(y))-y),pow(y,((tan(x)/y)+min(x,(externalVal/x))))),y)))),max(externalVal,externalVal))))))-cos(((externalVal-tan(((x+cos(x))/sin(noise(noise((y/y),pow(tan(externalVal),audio(x,x))),y)))))/audio(y,(externalVal-mod(y,(y+y)))))))",
          "g": "cos(mod(y,mod(y,y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(x,noise(externalVal,mod(tan(x),(y+x))))",
          "b": "noise(max(tan(x),sin(max(tan(externalVal),cos(y)))),mod(cos(pow(cos(x),externalVal)),max(noise(x,x),y)))",
          "g": "pow(y,(x*min(y,y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan(cos(noise(audio(externalVal,(cos((y/y))*x)),y)))",
          "b": "(externalVal/noise(x,y))",
          "g": "tan(tan(sin(x)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(y)",
          "b": "noise(pow(pow((x/((noise(sin(max(y,(sin((y/x))/x))),audio(externalVal,x))*externalVal)-y)),(externalVal-(externalVal*externalVal))),((audio(sin(tan(externalVal)),(y*y))/externalVal)+sin(y))),y)",
          "g": "pow(externalVal,max(tan(externalVal),externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(max(y,x)+mod(sin(x),sin(pow(tan(cos(((x+y)+(tan(externalVal)+pow(y,x))))),x))))",
          "b": "(pow(audio(mod(externalVal,x),x),y)/(x-max(externalVal,externalVal)))",
          "g": "(externalVal+audio(max((audio(externalVal,x)+(x+min(externalVal,y))),y),(((mod(externalVal,externalVal)+externalVal)-externalVal)/max(max(x,mod((x/max(y,pow(noise((tan(y)-max(mod(audio(y,x),sin(tan(tan(y)))),y)),(max(tan(max((x*min((tan(audio(x,sin((sin(y)*sin(y)))))-y),y)),noise(noise(externalVal,audio((x-x),externalVal)),y))),(x-min((y*x),max(externalVal,(audio(mod(y,y),externalVal)-externalVal)))))+y)),cos(externalVal)))),pow(tan(pow(x,externalVal)),mod(mod(x,(tan(pow(min(mod(x,externalVal),y),max(x,noise(mod(externalVal,externalVal),externalVal))))*sin(y))),(tan(audio(cos((pow(y,(cos(y)+tan((x-externalVal))))/sin(max(externalVal,x)))),cos(mod(x,x))))-audio(x,max(noise(x,x),y))))))),tan(tan((externalVal/y)))))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "noise(y,x)",
          "b": "tan(externalVal)",
          "g": "(y/externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(externalVal/externalVal)",
          "b": "tan(externalVal)",
          "g": "sin(min(max(max(noise(pow(pow(pow(min(externalVal,mod(externalVal,min(x,externalVal))),pow(x,noise(y,max(y,(externalVal+audio(externalVal,externalVal)))))),noise(externalVal,x)),x),externalVal),y),(externalVal-sin(x))),x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(noise(((y*noise((externalVal*externalVal),((x*x)+cos(max(max(noise(y,(y*max(externalVal,mod(externalVal,mod(sin(externalVal),(x-max(externalVal,audio(x,externalVal)))))))),y),x)))))-noise(x,(externalVal*x))),x),externalVal)",
          "b": "cos(noise(pow(externalVal,(mod(audio(pow(sin(y),sin(pow(x,x))),max(((mod(y,(externalVal*y))*y)-externalVal),(x-y))),(tan(mod(pow(externalVal,max(tan(pow(x,externalVal)),externalVal)),noise(y,y)))*cos(externalVal)))-pow(pow(x,max(externalVal,noise(y,y))),noise(y,externalVal)))),min(externalVal,(mod(y,externalVal)*externalVal))))",
          "g": "cos((externalVal/((max(x,externalVal)/externalVal)*y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin((sin(y)+tan(audio(externalVal,x))))",
          "b": "(y/sin(tan((externalVal-max((cos(min(cos(cos(tan(cos(tan(x))))),max(cos(x),pow(audio(sin((y*y)),x),x))))+y),x)))))",
          "g": "tan((y-mod(audio(tan(externalVal),cos((y/x))),y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(externalVal,externalVal)",
          "b": "sin(externalVal)",
          "g": "max(cos(externalVal),(externalVal+externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x/noise(cos(x),cos(min(x,externalVal))))",
          "b": "sin(externalVal)",
          "g": "pow(pow((pow(y,noise(externalVal,tan(y)))-y),(pow(min(y,tan(y)),x)+y)),sin((x/cos(y))))"
        }
      }
    ],
    "timestamp": "20h:27m:57s"
  }],
  "timestamp": "2023-11-14-20-27-56"
}