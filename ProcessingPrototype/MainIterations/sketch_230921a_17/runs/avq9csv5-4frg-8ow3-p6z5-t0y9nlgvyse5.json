{
  "id": "avq9csv5-4frg-8ow3-p6z5-t0y9nlgvyse5",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.4000000059604645,
    "populationSize": 20
  },
  "populations": [{
    "generation": 0,
    "id": "l61ymthi-y7cf-dju6-n47b-kogtq08msct7",
    "individuals": [
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(noise(x,cos(sin((noise(y,tan((x/(noise(externalVal,(max(pow(tan(noise(noise((sin(cos(x))+max(y,mod(x,sin(externalVal)))),sin(externalVal)),sin(y))),externalVal),tan(tan(max(y,externalVal))))-(x/externalVal)))*y))))+tan(externalVal))))),y)",
          "b": "((x*tan(noise(cos(mod(y,max(mod(y,externalVal),y))),x)))-sin(x))",
          "g": "sin(x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(pow(((x+y)/(max(externalVal,mod((externalVal/cos(min(noise(max(tan(max(externalVal,noise(externalVal,mod(sin(x),mod(y,y))))),(externalVal+externalVal)),externalVal),sin(x)))),((y-pow(externalVal,y))-x)))*(((externalVal-(externalVal-min(externalVal,tan((tan(max((max(externalVal,x)-noise(y,mod(noise(y,max((y-externalVal),x)),externalVal))),noise(mod(externalVal,noise(x,(x+pow(((externalVal/x)*sin((x*(externalVal*(x/(mod(y,y)-cos(((sin(externalVal)*((y/externalVal)-sin(mod(x,x))))*(externalVal-x))))))))),(externalVal+mod(tan(y),max((pow(y,externalVal)/externalVal),y))))))),max(externalVal,y))))*y)))))-y)*noise(x,((externalVal/x)-externalVal))))),min((tan(externalVal)/x),((x/(y*cos(sin(tan(max(((y*mod(pow(tan(externalVal),y),externalVal))*externalVal),x))))))/x))),y)",
          "b": "(y-(tan(min(cos(y),externalVal))+pow(x,(cos((y/((mod(pow(y,min(sin(y),(mod(((x-max(y,externalVal))+pow((x+noise(noise(y,y),max(cos(x),x))),externalVal)),cos(externalVal))+externalVal))),cos(externalVal))-x)*(y+max(y,tan(pow(y,max(noise(min(externalVal,externalVal),noise(mod(min((y/externalVal),mod(y,mod((sin(sin(mod(x,(min(x,externalVal)/(y*y)))))-externalVal),(externalVal/y)))),y),mod(externalVal,mod(y,externalVal)))),min(min(externalVal,cos(x)),noise(pow(mod(min(externalVal,y),y),y),(externalVal-x)))))))))))-noise(mod(x,externalVal),pow(max(sin(externalVal),y),noise(mod(pow(y,externalVal),x),externalVal)))))))",
          "g": "mod(externalVal,externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(noise(x,x)*tan(externalVal))",
          "b": "tan(y)",
          "g": "mod(pow(x,y),(y*x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(y,tan(y))",
          "b": "(sin(y)*max(y,cos(((noise(y,x)/x)-mod(x,noise((x+pow(x,externalVal)),x))))))",
          "g": "(cos(x)+max(y,y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(x,y)",
          "b": "mod((max((externalVal/max(externalVal,x)),x)/min(y,max((pow(y,sin((mod(noise(externalVal,y),externalVal)-y)))*y),y))),tan(noise((max(x,y)*(((y/((x/max((noise(noise((x/y),x),x)*max(((max(cos(sin(x)),min((y*y),min(pow(x,externalVal),x)))/x)*pow((mod(x,y)*(y/cos(x))),x)),y)),((externalVal-max(pow(noise(cos(pow((x+pow(max(tan(cos(y)),externalVal),x)),tan(tan(mod((y*externalVal),y))))),(y-externalVal)),(externalVal-sin(pow((noise((noise(x,max(x,tan(y)))-externalVal),x)*tan(x)),externalVal)))),x))/(x/(x/y)))))+(x/y)))+x)-pow(externalVal,min(y,x)))),y)))",
          "g": "mod(externalVal,y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(y)",
          "b": "tan(noise(tan(y),cos(externalVal)))",
          "g": "mod(y,sin(pow(cos(x),tan(x))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(externalVal)",
          "b": "noise(externalVal,y)",
          "g": "cos(mod(noise(externalVal,(x/min(x,externalVal))),externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(x,externalVal)",
          "b": "(externalVal+cos(sin(x)))",
          "g": "min((y+mod(sin(min(y,x)),((y*(y*cos(tan(max(sin(externalVal),externalVal)))))-pow(externalVal,(y-externalVal))))),externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan(cos(sin(y)))",
          "b": "cos(externalVal)",
          "g": "noise(((y/x)-max(sin(y),y)),max(y,x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(y,noise(sin(sin((x-externalVal))),((pow(x,cos((x-y)))/x)*externalVal)))",
          "b": "noise(y,externalVal)",
          "g": "pow(y,cos(sin(y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x*y)",
          "b": "min(sin(externalVal),y)",
          "g": "(y+x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(externalVal)",
          "b": "noise(y,x)",
          "g": "max(min(y,externalVal),(y+x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(y)",
          "b": "(pow(y,sin(y))/mod(noise(externalVal,mod(noise(min(min((pow(x,(externalVal+y))*max(((((externalVal+tan(x))/externalVal)/mod((cos(y)+sin(x)),externalVal))+min((x*min((x+y),(((cos(min((y-y),externalVal))*(tan(max(cos(y),mod(tan(mod(cos(x),(tan(y)*externalVal))),cos(y))))*pow(pow(cos(max(cos((cos(noise(sin(externalVal),externalVal))-max(y,max((pow(y,pow(x,y))/((x/x)/externalVal)),max((y*min(x,externalVal)),(x-y)))))),x)),y),externalVal)))+tan(y))+x))),y)),x)),sin(mod(externalVal,externalVal))),y),mod(y,min(cos(y),cos(y)))),tan(tan(externalVal)))),(x+mod(min(cos(x),x),x))))",
          "g": "(y*x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(((sin(externalVal)-cos(externalVal))*y),noise(x,externalVal))",
          "b": "cos((x/externalVal))",
          "g": "cos(max((sin((noise(mod(max((x-x),externalVal),(mod(y,mod(x,x))-(mod(externalVal,(externalVal*y))*y))),((y/x)*sin(externalVal)))*externalVal))+y),((tan(x)-sin(y))-y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(pow(x,(sin(x)+x)),tan((max((x+sin(y)),min(pow(y,cos((cos(x)*max(externalVal,x)))),cos(pow(x,min(x,externalVal)))))*mod(tan(tan(externalVal)),(pow(y,x)*mod(tan((sin(x)+cos(pow(x,(min(noise(externalVal,(x*pow(y,y))),externalVal)+x))))),x))))))",
          "b": "tan(x)",
          "g": "pow(externalVal,externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "noise(cos(x),tan(x))",
          "b": "min(max(x,y),externalVal)",
          "g": "max(y,y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(y,externalVal)",
          "b": "min(x,y)",
          "g": "max(externalVal,x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(externalVal)",
          "b": "mod(mod(mod(min(externalVal,y),externalVal),x),externalVal)",
          "g": "(((x*externalVal)+(max(mod(y,y),mod(externalVal,externalVal))*((x*x)*externalVal)))-x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(max(pow(mod(x,tan(pow(x,cos(pow(y,x))))),x),noise(x,noise((externalVal/x),externalVal))),x)",
          "b": "min(pow(max(tan(cos(y)),(min(min(noise(x,sin(cos(externalVal))),cos(externalVal)),y)+(externalVal-noise(((((cos(sin(sin(noise(min(mod(x,y),externalVal),y))))/mod(tan(min(x,cos(externalVal))),pow((externalVal+(externalVal*min((max(x,y)+externalVal),y))),externalVal)))/tan((y+externalVal)))+y)-max(x,x)),y)))),(tan(y)-externalVal)),sin(x))",
          "g": "sin(x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(mod(min(externalVal,cos(y)),mod(sin(min(noise(tan(((x-externalVal)+x)),externalVal),y)),y)),y)",
          "b": "mod(x,(externalVal*x))",
          "g": "cos((externalVal-cos(min(sin(y),(mod((min(externalVal,y)/((noise(x,tan(pow((max(y,y)/y),x)))-min(externalVal,noise((x/x),noise(sin(externalVal),externalVal))))-max((y*y),x))),max(externalVal,max(externalVal,(y/cos(max(x,x))))))-x)))))"
        }
      }
    ],
    "timestamp": "22h:12m:28s"
  }],
  "timestamp": "2023-11-16-22-12-27"
}