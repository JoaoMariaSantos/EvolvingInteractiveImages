{
  "id": "1652dpuk-xc7k-y81j-t63m-b3mx3lsefxxr",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.4000000059604645,
    "populationSize": 20
  },
  "populations": [{
    "generation": 0,
    "id": "d33fxg67-oi21-v7d7-iuza-35ecc6x9d0tx",
    "individuals": [
      {
        "fitness": 0,
        "expressions": {
          "r": "tan(tan(x))",
          "b": "noise((mod(cos(max(x,x)),externalVal)-max(audio(x,(y+y)),x)),x)",
          "g": "mod(audio(x,y),min(externalVal,noise(externalVal,pow(mod(tan(x),x),(tan(externalVal)*(cos(y)/mod(audio(noise((y/max(pow(x,x),externalVal)),min(min(y,mod(x,((externalVal/x)/y))),(y-x))),tan(x)),min(mod(x,mod((x+x),y)),x))))))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(cos((externalVal+x)))",
          "b": "audio((x/(y/y)),y)",
          "g": "min(externalVal,(x*(y/(externalVal*max(x,y)))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(pow(mod(noise(x,y),x),sin(mod(y,x))),(x*(y+y)))",
          "b": "(externalVal+y)",
          "g": "min(externalVal,x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(mod((x/(y*cos(noise(sin(x),x)))),externalVal),tan(y))",
          "b": "tan(audio(x,x))",
          "g": "max(max(y,y),externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(audio(y,x)/externalVal)",
          "b": "pow(x,externalVal)",
          "g": "pow(mod(y,(y*noise(((((externalVal/tan(noise(cos(mod(pow(y,pow((externalVal/tan(externalVal)),sin(max(noise(sin(x),externalVal),(y*x))))),(y+mod(pow((min(cos(tan(max(externalVal,y))),y)+x),y),pow(sin(min(cos(externalVal),max((x/y),audio(tan(x),noise(min(x,x),x))))),(y/externalVal)))))),min((x*(y+pow(x,x))),noise(y,externalVal)))))-pow(externalVal,externalVal))+x)-cos(pow(max((audio(externalVal,y)*(x/tan(externalVal))),externalVal),max(x,externalVal)))),((min((audio(cos(((mod(sin(externalVal),max(tan(x),y))+min(externalVal,(y-sin(x))))+y)),y)-noise(externalVal,externalVal)),externalVal)-pow(y,externalVal))/cos(externalVal))))),externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(y+(y/y))",
          "b": "tan(externalVal)",
          "g": "mod(externalVal,min(sin(externalVal),externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(x)",
          "b": "mod(y,y)",
          "g": "pow(y,noise(externalVal,(y/(x/externalVal))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(y*y)",
          "b": "sin(y)",
          "g": "cos(tan(x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "audio(pow((y-audio(externalVal,externalVal)),(x/mod(x,externalVal))),cos(x))",
          "b": "audio(noise(externalVal,audio(audio(y,cos(externalVal)),(x+mod(audio(externalVal,(y*x)),x)))),y)",
          "g": "audio(audio(x,x),pow(tan(min(y,externalVal)),cos(noise(x,(y+y)))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(x,audio(y,y))",
          "b": "sin(x)",
          "g": "cos(x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x*externalVal)",
          "b": "(pow(min(y,(tan(max(x,min(tan(x),(x+y))))+(x*externalVal))),max(y,y))+audio(x,cos(externalVal)))",
          "g": "(audio(sin(mod(y,(x-max(audio(pow((pow(externalVal,max(x,(x*externalVal)))*pow(cos(max(externalVal,x)),externalVal)),x),externalVal),(externalVal+mod(noise((x*y),noise(externalVal,pow(y,x))),min(tan(y),y))))))),externalVal)-externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(x)",
          "b": "tan(x)",
          "g": "(noise(x,y)*externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(externalVal+noise(cos(y),y))",
          "b": "sin(x)",
          "g": "noise(y,(x-externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(x,x)",
          "b": "sin((cos(externalVal)/y))",
          "g": "sin(audio(y,x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x/sin(y))",
          "b": "audio((externalVal*tan(externalVal)),(y*(y+x)))",
          "g": "sin(externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "noise(externalVal,(mod(x,y)+externalVal))",
          "b": "(tan(y)/x)",
          "g": "max(sin(min(mod(min(audio(x,(externalVal+externalVal)),x),y),mod(y,externalVal))),(y/min(externalVal,x)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(((y-pow(max(mod(noise(sin(externalVal),audio((pow(max(y,cos(x)),min((y/(audio(y,cos(externalVal))+externalVal)),x))-((sin(tan(sin((x/(y-x)))))+x)*cos(mod(audio(x,externalVal),y)))),y)),cos(y)),x),pow(mod(x,min(pow(pow((min(x,tan((x+externalVal)))/externalVal),cos((y*(externalVal-(externalVal*x))))),max(x,sin((((pow(tan(y),audio(externalVal,(externalVal+y)))/externalVal)+externalVal)-sin(x))))),noise(y,externalVal))),(audio(externalVal,y)*(y+externalVal)))))-cos(noise((y*x),y))),sin(y))",
          "b": "tan(mod(y,x))",
          "g": "noise((x-externalVal),audio(x,cos(min(externalVal,pow((externalVal+externalVal),sin(y))))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod((pow(mod(x,x),y)+(cos(x)-x)),externalVal)",
          "b": "pow(externalVal,tan(x))",
          "g": "noise(cos(max(tan(externalVal),externalVal)),externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x-externalVal)",
          "b": "audio(noise(sin(x),tan(noise(externalVal,x))),audio(y,externalVal))",
          "g": "noise(y,(externalVal-x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan(x)",
          "b": "((((noise((noise(x,mod(pow(audio(x,noise(externalVal,mod(audio((sin(cos(x))/mod(externalVal,externalVal)),y),cos((y-externalVal))))),x),y))+externalVal),cos(mod(externalVal,y)))/max((cos(max((x+pow((externalVal+externalVal),noise((pow(noise(pow(x,y),(audio(externalVal,max((pow(y,audio((cos(externalVal)/externalVal),externalVal))-(noise((audio(x,y)*audio(x,x)),y)-cos(x))),tan(max(externalVal,y))))+x)),externalVal)*y),((x+audio(audio(x,externalVal),(cos(x)+x)))-externalVal)))),(mod(externalVal,y)*y)))*externalVal),(mod(noise((externalVal/cos(sin(cos(externalVal)))),x),x)-x)))+min(x,tan(x)))-y)*noise(externalVal,max(noise(x,(x*y)),noise(externalVal,x))))",
          "g": "(externalVal+y)"
        }
      }
    ],
    "timestamp": "21h:52m:0s"
  }],
  "timestamp": "2023-11-16-21-51-58"
}