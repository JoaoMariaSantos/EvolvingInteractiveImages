{
  "id": "otlci487-6m25-wy1m-05za-hwbthu2muvsj",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.4000000059604645,
    "populationSize": 20
  },
  "populations": [{
    "generation": 0,
    "id": "nboqjr3v-q92v-sb5t-g2rb-legkk5hql7oh",
    "individuals": [
      {
        "fitness": 0,
        "expressions": {
          "r": "noise(x,(mod((externalVal*x),x)-externalVal))",
          "b": "(max(y,max(max(x,max(externalVal,mod(externalVal,sin(x)))),tan(x)))/externalVal)",
          "g": "mod(externalVal,externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(((pow(pow(mod(mod(max((externalVal-x),(audio(x,x)-y)),(y/mod((y*max(((mod(sin(audio((cos((max(mod(x,min(tan((cos(x)/noise(y,(audio(externalVal,noise(mod(y,y),x))-mod(externalVal,x))))),(externalVal-externalVal))),cos(x))/cos(max(externalVal,externalVal))))+externalVal),x)),externalVal)/tan(max(y,(sin(externalVal)-x))))+min(x,mod(tan(y),externalVal))),y)),audio((min(tan(externalVal),pow(x,externalVal))*externalVal),(min(externalVal,externalVal)/min(((max(externalVal,((y*pow(x,(((externalVal/externalVal)-cos(x))-x)))+(y+max(pow(externalVal,externalVal),max(max(x,externalVal),audio(((externalVal-(externalVal/noise(mod(pow(externalVal,x),y),y)))*tan(tan((x/x)))),y))))))*pow(audio(y,y),min(audio(externalVal,y),externalVal)))+max(y,y)),sin(sin(y)))))))),y),noise(mod(pow(audio(y,externalVal),tan(externalVal)),(noise(min(y,(y/y)),sin(externalVal))*(y+x))),x)),externalVal)-externalVal)+externalVal)*externalVal)",
          "b": "(y/y)",
          "g": "mod(x,audio((y+externalVal),y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(y+audio(pow(cos(x),x),(x/y)))",
          "b": "(y*y)",
          "g": "tan(externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(max(x,pow(y,y))+externalVal)",
          "b": "min(tan(y),x)",
          "g": "((x-y)-tan((x/externalVal)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(y)",
          "b": "(min(min(noise(externalVal,tan(externalVal)),max(tan(externalVal),x)),y)-mod(sin(y),externalVal))",
          "g": "(((noise(noise((y-y),audio(externalVal,mod(externalVal,((y/cos(externalVal))*(y*tan(audio(x,y))))))),(x-y))*externalVal)-((x-externalVal)/y))-externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(audio(sin(externalVal),max(max(noise(x,audio(audio(x,externalVal),cos((x-externalVal)))),y),y)),y)",
          "b": "audio(min(y,(externalVal-externalVal)),y)",
          "g": "(externalVal+noise(x,tan(externalVal)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(y)",
          "b": "(noise(y,externalVal)*y)",
          "g": "mod(pow((max(externalVal,min(y,x))/externalVal),x),(externalVal*(mod(min(externalVal,y),y)+x)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(y-y)",
          "b": "sin(max(y,noise(audio(x,x),(x+max(cos((x-y)),x)))))",
          "g": "(y/noise(y,externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(audio((audio(min(x,y),cos((sin(max(sin(x),(x-(externalVal/externalVal))))+y)))-y),externalVal)-x)",
          "b": "max(cos((externalVal/y)),tan(y))",
          "g": "(noise(pow(y,y),(sin(externalVal)/x))/y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(externalVal,externalVal)",
          "b": "min(mod(max(cos(cos(pow(((y/(externalVal+externalVal))-y),y))),(y-x)),y),(y/(max(x,y)+y)))",
          "g": "mod(x,externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "audio(((tan((((y/externalVal)-sin(noise(tan(x),externalVal)))*externalVal))+x)+x),min(externalVal,y))",
          "b": "audio(externalVal,(externalVal+x))",
          "g": "audio((externalVal-(audio(mod(noise(sin(max(y,x)),(min(externalVal,(y/((externalVal-x)-(externalVal+externalVal))))+(y-max(externalVal,x)))),mod(pow((((x+y)+mod(mod(y,externalVal),(noise(y,y)/sin(y))))/sin(x)),externalVal),y)),y)+mod(x,externalVal))),mod(x,tan(x)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(externalVal,cos(y))",
          "b": "mod((pow(y,pow(x,mod(y,min(externalVal,max(cos((externalVal*noise(x,min(externalVal,noise(y,x))))),x)))))-externalVal),sin((((y-externalVal)+max((externalVal/max(max(y,y),x)),noise(x,pow(y,mod(x,x)))))-y)))",
          "g": "pow(y,mod(noise(mod(audio(y,y),x),externalVal),max(y,externalVal)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "noise(noise(y,cos(externalVal)),(x*x))",
          "b": "min(tan(cos(tan(y))),externalVal)",
          "g": "audio(sin(audio(y,noise(externalVal,externalVal))),x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(x)",
          "b": "mod(externalVal,mod(noise(pow(min(noise(max(min(x,externalVal),cos(y)),min(((cos(externalVal)/x)*externalVal),mod(x,y))),externalVal),(externalVal+y)),externalVal),(x*y)))",
          "g": "tan(y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow((mod(externalVal,sin(min(y,externalVal)))*externalVal),pow(y,y))",
          "b": "tan(y)",
          "g": "(sin(sin(x))*((externalVal*noise(tan(externalVal),x))-sin(y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "audio((y+(min(audio(x,mod(tan(tan(x)),(tan(mod(y,max(y,max((y-noise((externalVal+x),(x+(x*externalVal)))),y))))/y))),x)-externalVal)),x)",
          "b": "pow((mod(x,min(x,y))*y),x)",
          "g": "sin(mod(x,externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod((x+y),(externalVal*x))",
          "b": "cos(audio((max(mod(x,(y*(pow((externalVal*pow(x,max(audio(audio((noise((audio(x,noise(x,max(cos(max((noise(cos(externalVal),y)*pow(mod(x,sin((x+x))),tan((noise(x,externalVal)+externalVal)))),y)),y)))-y),y)*x),x),cos(y)),y))),pow(x,x))/y))),externalVal)*y),(x*(x/x))))",
          "g": "(mod(y,sin(mod(pow(externalVal,audio(y,externalVal)),min(y,externalVal))))+externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(max(noise(mod(x,((mod(mod(sin(pow(tan((externalVal+x)),(mod(externalVal,audio((noise((x/y),x)/(y/x)),tan(y)))/y))),externalVal),y)+tan(pow(pow(x,externalVal),tan(x))))-x)),x),x),y)",
          "b": "(mod(mod((mod(y,mod(externalVal,audio(x,audio(x,(externalVal+min(y,tan(x)))))))+x),x),y)/y)",
          "g": "min(cos(y),audio(tan(externalVal),externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(y*sin(max(noise(externalVal,x),audio(pow(x,externalVal),externalVal))))",
          "b": "max(y,audio((min(x,y)-x),noise((tan(externalVal)/max(externalVal,x)),x)))",
          "g": "mod(externalVal,audio(y,cos(mod(x,externalVal))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(x,audio(noise(noise(x,y),y),x))",
          "b": "(x+audio(max(max(x,tan(sin(externalVal))),max(externalVal,x)),(noise(sin(y),((noise(externalVal,y)*cos(y))*sin(externalVal)))/x)))",
          "g": "(((noise(y,externalVal)*sin(externalVal))*(pow(pow((sin(externalVal)-x),cos(pow((x+noise(x,audio(y,(audio(y,x)/y)))),(y/x)))),externalVal)/pow(tan(x),tan((y*externalVal)))))*externalVal)"
        }
      }
    ],
    "timestamp": "21h:47m:15s"
  }],
  "timestamp": "2023-11-16-21-47-14"
}