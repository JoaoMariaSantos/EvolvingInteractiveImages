{
  "id": "9yftblvm-uimh-ug9o-3n65-vd3m0b3jbq8m",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 0,
    "tournamentSize": 3,
    "mutationRate": 0.20000000298023224,
    "populationSize": 15
  },
  "populations": [
    {
      "generation": 0,
      "id": "7rlnype4-iayy-5m0i-320v-4oocu5mz5861",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(min(mod(mod(y,externalVal),audio(sin(cos(y)),y)),externalVal)),cos(pow(x,audio(((sin(y)*externalVal)/y),y))))",
            "b": "sin(pow(externalVal,y))",
            "g": "sin(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((y+cos(y)),y)",
            "b": "mod(y,audio(sin(tan(noise(sin(sin(externalVal)),tan(x)))),tan(audio(y,max(y,max(noise(audio(noise((x+pow(noise(externalVal,y),x)),mod(mod(externalVal,cos(externalVal)),y)),sin(y)),y),x))))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(y,cos(y))",
            "b": "max(pow(pow(x,pow((externalVal+y),audio(y,pow(externalVal,noise(pow(y,x),y))))),tan(cos(x))),(externalVal+((sin(noise(y,y))-(x*y))+sin(x))))",
            "g": "max(externalVal,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(x-x)",
            "b": "noise(x,cos(y))",
            "g": "noise(y,audio(mod((y+y),max((y+min(tan(y),tan(mod((pow(y,((sin(sin(y))/tan(sin((externalVal+cos(externalVal)))))+tan(mod(cos(externalVal),tan(x)))))*(externalVal-externalVal)),y)))),x)),noise(pow(y,tan((sin(sin(y))*y))),x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(mod(y,y))",
            "b": "(y/((cos(tan(y))-x)*((pow(x,pow(cos(externalVal),y))-cos(y))+tan(y))))",
            "g": "((sin(y)/externalVal)+mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,min((y/tan(y)),externalVal))+cos(externalVal)),(min(externalVal,pow(externalVal,y))-x))",
            "b": "tan(y)",
            "g": "min(audio(cos(x),x),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-(audio(audio(y,((y*externalVal)*((y+externalVal)-externalVal))),(externalVal*x))+noise(min(y,min(y,externalVal)),audio(externalVal,x))))",
            "b": "mod(y,audio((noise(y,x)-tan(y)),externalVal))",
            "g": "(externalVal+cos((((max((y*x),mod(audio(noise(x,externalVal),x),(x*mod(x,mod((min((y-x),externalVal)-externalVal),cos(noise(min(x,noise(audio(externalVal,min(externalVal,sin(y))),min(max((max((noise(externalVal,sin((externalVal/audio(min(mod(x,tan(x)),externalVal),min(y,pow(externalVal,(sin(cos(y))-(audio(y,y)+externalVal))))))))+sin(tan(cos(x)))),x)-tan(x)),(x-noise(y,((max((y*x),externalVal)/x)+max(tan(audio(noise(mod(((pow(noise(y,externalVal),pow(x,externalVal))*y)/x),y),externalVal),mod(externalVal,audio(cos(x),y)))),y))))),mod(mod(((audio(tan(max(tan((externalVal-y)),sin(y))),externalVal)+(y-externalVal))+x),y),x)))),y)))))))-y)*externalVal)*tan(externalVal))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio(externalVal,noise((y+cos((noise(audio(y,y),tan(x))+noise(sin(externalVal),tan(x))))),max(tan(pow(x,y)),mod(((externalVal+y)*x),y))))",
            "b": "pow(y,cos(cos(pow(min(externalVal,min(x,tan(audio(externalVal,x)))),externalVal))))",
            "g": "(pow(y,(externalVal*x))/max(pow(audio(y,externalVal),cos(pow(externalVal,x))),cos(noise((max(externalVal,noise((x/(y/externalVal)),noise(tan(y),max(mod(externalVal,x),sin(y)))))/y),externalVal))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(cos((externalVal*externalVal)),sin((y/y)))",
            "b": "(pow(x,(x/y))/cos(min(x,max(noise(externalVal,x),x))))",
            "g": "tan(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(x*(y-mod(externalVal,audio(y,externalVal))))",
            "b": "(externalVal/externalVal)",
            "g": "(y+tan((cos(y)+externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "max(sin(tan(x)),externalVal)",
            "g": "audio(x,(cos(y)+x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(x/y)",
            "b": "cos((min(min(x,tan((min(y,(y/min(y,y)))-y))),noise((mod(x,((externalVal+mod(audio((min(max(max(externalVal,y),max(y,x)),y)/externalVal),max(y,mod((((audio((externalVal+externalVal),y)-x)*sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))-y)))/audio(cos(y),y)),(pow(sin(max(x,y)),x)-x)))),externalVal))/y))/pow(externalVal,audio(tan(x),externalVal))),x))/max((x-sin(((y+y)/y))),x)))",
            "g": "pow((x-(pow(externalVal,tan(x))/min(y,(y+x)))),pow(noise(max(mod((externalVal-(audio(cos(audio(x,max(mod(max((((x/((x-cos(max(sin(y),(y-cos(cos(y))))))/y))/y)*x),mod(min(tan(pow(noise(y,(sin((x*(y-(tan(y)-audio(y,max(externalVal,cos(x)))))))*y)),(externalVal*audio(noise(min(audio(sin(pow(x,x)),x),noise(y,audio(noise(x,y),(y-externalVal)))),y),cos(x))))),(externalVal/(externalVal*min((y+audio(x,(mod(x,externalVal)*x))),tan((x-noise((x+audio((min(y,externalVal)/y),externalVal)),tan(y)))))))),((y*y)+min(x,externalVal)))),externalVal),externalVal))),externalVal)-y)),y),y),(audio(y,externalVal)-externalVal)),(mod(y,pow(y,cos(sin(x))))-x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(externalVal,(max(tan(x),noise(sin(y),x))+audio(externalVal,(y*(pow((mod(y,y)-externalVal),externalVal)-x)))))",
            "b": "sin(max(audio(pow(externalVal,(externalVal-x)),y),y))",
            "g": "tan(max((externalVal-sin(externalVal)),pow(y,pow(((x*externalVal)*x),noise(tan(externalVal),y)))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((externalVal/externalVal)+(x*(y/y)))",
            "b": "min(y,pow(y,mod((min(y,max(y,tan(x)))*(y/externalVal)),x)))",
            "g": "mod(x,x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(x*cos(y))",
            "b": "pow(y,y)",
            "g": "mod(externalVal,((x/y)+noise(x,x)))"
          }
        }
      ],
      "timestamp": "23h:34m:29s"
    },
    {
      "generation": 1,
      "ascendantID": "7rlnype4-iayy-5m0i-320v-4oocu5mz5861",
      "id": "3vkeimai-bqrk-8hec-8byi-n6sf8vge0wt3",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "((externalVal/externalVal)+(x*(y/y)))",
            "b": "min(y,pow(y,mod((min(y,max(y,tan(x)))*(y/externalVal)),x)))",
            "g": "mod(x,x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(externalVal,(max(tan(x),noise(sin(y),x))+audio(externalVal,(y*(pow((min((externalVal*(y/sin((externalVal/y)))),externalVal)-externalVal),externalVal)-x)))))",
            "b": "cos(cos(pow(min(externalVal,noise(x,tan(audio(externalVal,x)))),externalVal)))",
            "g": "tan(max((externalVal-sin(externalVal)),pow(y,pow(((x*externalVal)*x),noise(tan(externalVal),y)))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((y+cos(y)),y)",
            "b": "pow(y,audio(sin(tan(noise(sin(sin(externalVal)),tan(x)))),tan(audio(y,max(y,max(noise(audio(min((x+pow(noise(externalVal,y),x)),mod(noise(externalVal,cos(externalVal)),y)),sin(y)),y),x))))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(cos((y-mod(externalVal,audio(y,externalVal)))),sin((y/y)))",
            "b": "(pow(x,(x/y))/cos(min(x,max((externalVal/externalVal),x))))",
            "g": "tan(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((noise(y,max((y/tan(y)),externalVal))+cos(externalVal)),(max(externalVal,pow(externalVal,y))-x))",
            "b": "tan(y)",
            "g": "min(audio(cos(x),x),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio(externalVal,noise((y+cos((noise(audio(y,y),tan(x))+noise(sin(externalVal),tan(x))))),tan(tan(pow(x,y)))))",
            "b": "pow(y,cos(pow(cos(externalVal),y)))",
            "g": "(pow(y,(externalVal*x))/max(pow(audio(y,externalVal),cos(pow(externalVal,x))),cos(noise((max(externalVal,noise((x/(y/externalVal)),noise(tan(y),max(mod(externalVal,x),sin(y)))))*y),externalVal))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(y,tan(y))",
            "b": "max(pow(pow(x,pow((externalVal+externalVal),audio(y,pow(externalVal,noise(pow(y,x),y))))),tan(cos(x))),(externalVal+((sin(noise(y,y))-(x*y))+cos(x))))",
            "g": "max(externalVal,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y+(audio(audio(y,((y*externalVal)*((y-y)-externalVal))),(externalVal*x))+noise(min(y,min(y,externalVal)),audio(externalVal,x))))",
            "b": "mod(y,audio((noise(y,x)-tan(y)),externalVal))",
            "g": "(externalVal+tan((((max((y*x),mod(audio(noise(x,externalVal),x),(x*mod(x,mod((min((y-x),externalVal)-externalVal),sin(noise(max(x,noise(audio(externalVal,min(externalVal,sin(y))),min(max((max((noise(externalVal,sin((externalVal/audio(min(mod(x,tan(x)),externalVal),min(y,pow(externalVal,(sin(cos(y))-(audio(y,y)+externalVal))))))))+sin(cos(cos(x)))),x)-tan(x)),(x-noise(y,((min((y*x),externalVal)/x)+max(tan(audio(mod(noise(((pow(noise(y,externalVal),pow(x,externalVal))*y)/x),y),externalVal),mod(externalVal,audio(cos(x),y)))),y))))),pow(mod(((audio(tan(max(tan((externalVal-y)),sin(y))),externalVal)+(y-externalVal))+x),y),x)))),y)))))))-y)*externalVal)*tan(externalVal))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "min(sin(tan(y)),externalVal)",
            "g": "audio(x,((x/y)+noise(x,x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((externalVal/externalVal)+(x*(y/y)))",
            "b": "min(y,pow(y,pow((min(y,pow(min(sin(x),max(y,max(x,y))),audio(cos(x),sin(x))))*(y/externalVal)),x)))",
            "g": "mod(x,x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(x/y)",
            "b": "sin((min(min(x,tan((min(y,(y/mod(y,y)))+y))),noise((noise(x,((externalVal+mod(audio((min(max(max(externalVal,y),max(y,x)),y)/externalVal),min(externalVal,mod((((audio((externalVal+externalVal),y)-x)*sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))-y)))/audio(cos(y),y)),(audio(sin(max(x,y)),x)-x)))),externalVal))/y))/pow(externalVal,audio(tan(x),externalVal))),x))/max((x-sin(((y+y)/y))),x)))",
            "g": "pow((x-(mod(externalVal,tan(x))/min(y,(y+x)))),pow(noise(max(mod((externalVal-(audio(tan(audio(x,max(mod(max((((x/((x-cos(max(sin(y),(y-sin(cos(y))))))/y))/y)*x),mod(min(tan(pow(noise(y,(cos((x*(y-(tan(y)-audio(y,max(externalVal,cos(x)))))))*y)),(externalVal/audio(noise(min(audio(sin(pow(x,x)),x),noise(x,audio(noise(x,y),(y-externalVal)))),y),cos(x))))),(externalVal/(externalVal*min((y-audio(x,(mod(x,externalVal)*x))),tan((x-noise((x+audio((min(y,externalVal)/y),externalVal)),cos(y)))))))),((y*y)+noise(y,externalVal)))),externalVal),externalVal))),externalVal)-y)),y),y),(audio(y,externalVal)-externalVal)),(mod(y,pow(y,cos(sin(x))))+x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(mod(y,y))",
            "b": "(y/((cos(tan(y))-x)*((pow(x,mod(cos(externalVal),externalVal))-cos(y))+tan(y))))",
            "g": "((sin(y)/externalVal)+mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((y+cos(externalVal)),y)",
            "b": "mod(y,audio(sin(tan(noise(sin(sin(externalVal)),tan(x)))),tan(audio(y,max(y,max(noise(audio(noise((x+pow(noise(externalVal,y),x)),mod(mod(externalVal,cos(externalVal)),y)),sin(y)),y),x))))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(externalVal,(max(tan(x),mod(sin(y),x))+audio(externalVal,(y*(mod((mod(y,y)-externalVal),externalVal)-x)))))",
            "b": "sin(max(audio(pow(externalVal,(externalVal-x)),y),y))",
            "g": "tan(max((externalVal-sin(externalVal)),pow(y,pow(((x*externalVal)*x),noise(min(externalVal,tan((y/max(min(pow(audio(y,pow(pow(externalVal,(x-y)),noise(y,y))),externalVal),((min(y,sin(x))*sin(pow((max(x,y)-noise(cos(externalVal),sin(tan(x)))),y)))*x)),y)))),y)))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "min((cos(x)/(externalVal/externalVal)),externalVal)",
            "g": "pow(x,(cos(y)+x))"
          }
        }
      ],
      "timestamp": "23h:34m:34s"
    },
    {
      "generation": 2,
      "ascendantID": "3vkeimai-bqrk-8hec-8byi-n6sf8vge0wt3",
      "id": "dsz7sgmh-yf38-buzi-w1lm-t14ut438t36c",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "(y+(audio(audio(y,((y/externalVal)*((y-y)-externalVal))),(externalVal/x))+noise(noise(y,y),audio(externalVal,x))))",
            "b": "mod(y,audio((noise(y,x)-(cos(tan(y))-x)),externalVal))",
            "g": "(externalVal+tan((((max((externalVal*x),mod(audio(noise(x,externalVal),x),(x*mod(x,noise((min((y-x),externalVal)-externalVal),sin(mod(max(x,noise(audio(externalVal,min(externalVal,sin(y))),min(max((max((noise(externalVal,sin((externalVal/audio(min(mod(x,sin(x)),externalVal),min(y,pow(externalVal,(sin(cos(y))+(audio(y,y)+externalVal))))))))+sin(cos(cos(x)))),x)+max(x,externalVal)),(x-noise(y,(cos(min((y*x),externalVal))+max(cos(audio(noise(noise(((pow(noise(y,externalVal),pow(x,externalVal))*y)/x),y),externalVal),mod(externalVal,audio(cos(x),y)))),y))))),pow(mod(((audio(tan(max(tan((externalVal-y)),sin(y))),externalVal)+(y-externalVal))+x),y),x)))),y)))))))-y)*externalVal)*tan(externalVal))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((y+(x*(y/y))),y)",
            "b": "mod(y,audio(sin(tan(noise(sin(sin(externalVal)),tan(x)))),tan(audio(y,max(y,max(noise(audio(noise((x+pow(noise(externalVal,y),x)),mod(mod(externalVal,cos(externalVal)),y)),sin(y)),y),x))))))",
            "g": "max(x,x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(y,tan(y))",
            "b": "max(pow(pow(x,mod((externalVal+externalVal),audio(y,pow(externalVal,min(pow(y,x),y))))),tan(sin(x))),(externalVal+((sin(noise(y,y))-(x*y))-tan(x))))",
            "g": "max(externalVal,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(externalVal,(max(tan(x),mod(sin(y),x))+audio(externalVal,(x*(externalVal-y)))))",
            "b": "sin(min(tan(y),externalVal))",
            "g": "tan(max((externalVal-sin(externalVal)),pow(y,pow(((x*externalVal)*x),noise(min(externalVal,tan((y/max(noise(mod(audio(y,pow(pow(externalVal,(x-y)),noise(y,y))),externalVal),((min(y,sin(x))*sin(pow((max(x,y)-noise(cos(externalVal),sin(tan(x)))),y)))*x)),y)))),y)))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((y+cos(externalVal)),y)",
            "b": "mod(y,audio(sin(tan(noise(sin(cos(externalVal)),tan(x)))),tan(audio(y,max(y,max(noise(audio(noise((x+pow(noise(externalVal,y),x)),mod(pow(externalVal,cos(externalVal)),y)),sin(y)),y),x))))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "min(max(sin(tan(y)),externalVal),externalVal)",
            "g": "mod(x,(noise(x,x)+x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "min((pow(sin((externalVal-cos(externalVal))),tan(externalVal))/(externalVal/externalVal)),externalVal)",
            "g": "pow(x,tan(x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(x/y)",
            "b": "sin((min(min(x,tan((min(y,(y/mod(y,y)))+y))),min((noise(x,((externalVal+pow(audio((min(max(max(externalVal,y),max(y,x)),y)/externalVal),min(externalVal,mod((((audio((externalVal+externalVal),y)-x)*sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))-y)))/audio((y+y),y)),(audio(sin(max(x,y)),x)-x)))),externalVal))/y))/pow(externalVal,audio(tan(x),externalVal))),x))/tan((x-sin(((y+y)/y))))))",
            "g": "pow((x-(mod(externalVal,tan(x))/min(y,(y+x)))),pow(noise(max(mod((externalVal-(audio(tan(audio(x,max(mod(min((((x/((x-cos(max(sin(y),(y-sin(cos(y))))))/y))/y)*x),mod(min(tan(pow(min(y,(cos((x*(y-(tan(y)-audio(y,max(externalVal,cos(x)))))))*y)),(externalVal/pow(min(min(audio(sin(pow(x,x)),x),noise(x,audio(noise(x,y),(y*externalVal)))),x),cos(x))))),(externalVal/(externalVal*min((y-audio(x,(pow(x,externalVal)*x))),tan((x-noise((x+audio((min(y,externalVal)/y),externalVal)),tan(y)))))))),((y*y)+noise(y,externalVal)))),externalVal),externalVal))),externalVal)-y)),y),y),(audio(y,externalVal)-externalVal)),(mod(y,pow(y,cos(sin(x))))+x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(mod(y,y))",
            "b": "(y/((cos(tan(y))-x)*((pow(x,mod(cos(externalVal),externalVal))-sin(y))+tan(y))))",
            "g": "(sin(sin(y))+mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((x+cos(externalVal)),y)",
            "b": "mod(y,audio(sin(max(noise(sin(cos(y)),tan(x)),x)),tan(audio(y,max(y,min(noise(audio(noise((x+pow(noise(externalVal,y),x)),mod(mod(externalVal,cos(externalVal)),y)),sin(y)),y),x))))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,min((y/tan(y)),externalVal))+cos(externalVal)),(max(externalVal,pow(externalVal,y))-x))",
            "b": "tan(y)",
            "g": "noise(audio(cos(x),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((noise(y,max((y/tan(y)),externalVal))+cos(externalVal)),(max(externalVal,audio(externalVal,x))-x))",
            "b": "cos(y)",
            "g": "min(audio(cos(x),x),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "max((cos(x)/sin(externalVal)),externalVal)",
            "g": "pow(x,(cos(y)-x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(mod(y,y))",
            "b": "(y/((cos(tan(y))-x)*((pow(x,mod(cos(externalVal),externalVal))-cos(y))+tan(externalVal))))",
            "g": "((sin(y)/externalVal)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(externalVal,(max(cos(x),mod(sin(y),x))+audio(externalVal,(y*(pow((min((externalVal*(y/sin(sin(y)))),externalVal)-externalVal),externalVal)-x)))))",
            "b": "tan(cos(pow(min(externalVal,noise(x,max(audio(externalVal,x),cos(y)))),externalVal)))",
            "g": "tan(max((externalVal-sin(externalVal)),noise(y,audio(((x*externalVal)-x),min(tan(externalVal),y)))))"
          }
        }
      ],
      "timestamp": "23h:34m:35s"
    },
    {
      "generation": 3,
      "ascendantID": "dsz7sgmh-yf38-buzi-w1lm-t14ut438t36c",
      "id": "xwxwjsyq-m9k0-kp5j-q6ce-fhk98pdkn6fi",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal-y),y)",
            "b": "mod(y,audio(cos(min(noise(sin(sin(externalVal)),tan(x)),x)),tan(audio(y,max(y,min(noise(audio(mod((x+pow(noise(externalVal,y),x)),mod(mod(externalVal,cos(externalVal)),y)),(x/x)),y),x))))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(mod(y,y))",
            "b": "(y/((cos(tan(y))-x)*((pow(x,mod(cos(externalVal),externalVal))-sin(y))+tan(y))))",
            "g": "((sin(y)/externalVal)+mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((noise(y,max((y/tan(y)),externalVal))+cos(externalVal)),(max(externalVal,audio(externalVal,x))-x))",
            "b": "cos(y)",
            "g": "min(audio(tan(x),x),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "max((cos(x)/sin(externalVal)),externalVal)",
            "g": "pow(x,(cos(y)-x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "min((pow(sin((externalVal-cos(externalVal))),tan(externalVal))/(externalVal/externalVal)),externalVal)",
            "g": "pow(x,tan(x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(externalVal,(cos(x)+audio(externalVal,(y*(pow((min((externalVal*(y/cos(sin(y)))),externalVal)+externalVal),externalVal)-x)))))",
            "b": "tan(tan(pow(min(externalVal,noise(x,cos(y))),externalVal)))",
            "g": "tan(max((externalVal-cos(externalVal)),noise(y,audio(((x*externalVal)-x),min(max(externalVal,cos((y/max(min(pow(audio(y,pow(externalVal,x)),externalVal),((min(y,sin(x))*cos(pow((max(x,y)+min(cos(externalVal),(tan(x)*pow((tan(externalVal)-(cos(y)+(y+tan(externalVal)))),(externalVal*x))))),y)))-x)),y)))),y)))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "noise(sin((pow(externalVal,(externalVal-(noise(x,externalVal)*x)))-y)),externalVal)",
            "g": "pow(x,(x+audio((min(y,externalVal)/y),externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(mod(y,y))",
            "b": "(y/((cos(tan(y))-x)*((pow(x,mod(cos(externalVal),y))-cos(y))+tan(externalVal))))",
            "g": "((sin(y)/externalVal)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(max(externalVal,y),(externalVal-pow(max(externalVal,y),x)))",
            "b": "(y/((cos(tan(y))-x)*((pow(x,mod(cos(externalVal),externalVal))-cos(y))+cos(externalVal))))",
            "g": "(sin(sin(y))-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((x/y))",
            "b": "(y/((cos(cos(y))-x)*((mod(x,mod(sin((min(min(x,max((max(y,(y/mod(y,y)))-y),y)),min((noise(x,((externalVal+pow(audio((min(max(max(externalVal,y),max(y,x)),y)/externalVal),max(externalVal,mod((((audio((externalVal+externalVal),y)-x)*sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))+x)))/audio((y+y),y)),(audio((min(x,y)/noise(x,mod(cos(x),x))),x)-x)))),externalVal))/y))/pow(externalVal,audio(tan(x),externalVal))),x))/tan((x-sin(((y+y)/y)))))),externalVal))-cos(y))+tan(externalVal))))",
            "g": "((sin(y)/externalVal)+cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(mod(y,y))",
            "b": "(y/((cos(tan(y))-x)-((pow(x,mod(cos(externalVal),externalVal))-cos(y))+tan(externalVal))))",
            "g": "((sin(y)/externalVal)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,min((y*tan(y)),externalVal))+cos(externalVal)),(max(externalVal,pow(externalVal,y))-x))",
            "b": "tan(y)",
            "g": "noise(audio(cos(x),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(y,tan(y))",
            "b": "max(pow(pow(x,mod((externalVal+externalVal),audio(y,pow(externalVal,min(mod(y,x),y))))),tan(sin(x))),(y+((sin(noise(y,y))-(x*y))-tan(x))))",
            "g": "max(externalVal,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(externalVal,(min(cos(x),noise(sin(y),x))+pow(externalVal,(y/(pow((min((externalVal*(y/sin(sin(y)))),externalVal)-externalVal),externalVal)-x)))))",
            "b": "tan(cos(pow(min(externalVal,noise(x,max(audio(externalVal,x),cos(y)))),externalVal)))",
            "g": "max(max((externalVal-sin(externalVal)),noise(y,audio(((x*externalVal)-x),min(tan(externalVal),y)))),(y+externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,min((y/tan(y)),externalVal))+cos(externalVal)),(max(externalVal,pow(externalVal,y))-x))",
            "b": "tan(y)",
            "g": "noise(pow(cos(x),x),x)"
          }
        }
      ],
      "timestamp": "23h:34m:37s"
    },
    {
      "generation": 4,
      "ascendantID": "xwxwjsyq-m9k0-kp5j-q6ce-fhk98pdkn6fi",
      "id": "kdg0ujd7-q2lu-cwvl-kx6z-msc6d3yfj648",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(mod(y,y))",
            "b": "(y/((cos(cos(y))+x)-((pow(x,mod(cos(externalVal),externalVal))*cos(y))+tan(externalVal))))",
            "g": "((sin(y)/externalVal)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(mod(y,y))",
            "b": "(y/((cos(tan(y))-x)-((pow(x,sin((pow(externalVal,(externalVal-(noise(x,externalVal)*x)))-y)))-cos(y))+tan(externalVal))))",
            "g": "((sin(y)*y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((x/y))",
            "b": "(y/((cos(cos(y))-x)*((mod(x,mod(sin((min(min(x,max((max(y,(y/pow(y,y)))-y),y)),min(sin(noise(x,((externalVal+pow(audio((min(max(max(externalVal,y),max(y,x)),y)/externalVal),max(externalVal,mod((((audio((externalVal+externalVal),y)-x)*sin((pow(externalVal,(externalVal-(mod(x,externalVal)/x)))+x)))/pow((y+y),y)),(audio((min(x,y)/noise(x,mod(cos(x),x))),x)-x)))),externalVal))/y))),x))/tan((x-(((y+y)/y)/y))))),externalVal))-cos(y))+tan(externalVal))))",
            "g": "((sin(y)/externalVal)+cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,min((y/tan(y)),externalVal))+(x*max((x+externalVal),cos((tan(y)*y))))),(max(externalVal,pow(externalVal,y))-x))",
            "b": "tan(y)",
            "g": "min(pow(min(audio(tan(x),x),y),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "noise(sin((pow(externalVal,(externalVal-(mod(x,y)/x)))-y)),externalVal)",
            "g": "pow(x,(x+audio((min(y,externalVal)/y),externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((x/y))",
            "b": "(y*((cos(cos(y))-x)*((mod(x,mod(sin((min(min(x,max((max(y,(y/mod(y,y)))-y),y)),noise((noise(x,((externalVal+pow(audio((min(max(max(externalVal,y),max(y,x)),y)/externalVal),max(externalVal,mod((((audio((externalVal+externalVal),y)-x)*sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))+x)))/audio((y+y),y)),(audio(sin(min(x,y)),x)-x)))),externalVal))/y))/pow(externalVal,audio(tan(x),externalVal))),x))/tan((x-sin(((y+y)/y)))))),externalVal))-cos(y))+tan(externalVal))))",
            "g": "((sin(y)/externalVal)+cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "max(noise((x-max(audio((x+y),y),mod(externalVal,(y*(x+cos(pow((y+x),tan(x)))))))),y),externalVal)",
            "g": "pow(x,(tan(x)-x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "min((externalVal/externalVal),externalVal)",
            "g": "audio(x,tan(x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((noise(y,min(sin(y),externalVal))+cos(externalVal)),(max(externalVal,audio(externalVal,x))-x))",
            "b": "cos(y)",
            "g": "max(audio(tan(x),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,max(sin(y),externalVal))+cos(externalVal)),(max(externalVal,audio(externalVal,x))-x))",
            "b": "cos(y)",
            "g": "min(audio(tan(x),x),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod((mod(y,min((y/tan(y)),externalVal))+cos(externalVal)),(max(externalVal,pow(externalVal,y))-x))",
            "b": "tan(y)",
            "g": "noise(pow(cos(x),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,min((y*tan(y)),externalVal))+cos(externalVal)),(max(externalVal,mod(externalVal,x))-x))",
            "b": "tan(y)",
            "g": "noise(pow(cos(x),x),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(externalVal,(cos(x)+audio(externalVal,(y*(pow((min((externalVal*(y*cos(sin(y)))),externalVal)-externalVal),externalVal)-x)))))",
            "b": "tan(cos(externalVal))",
            "g": "tan(max((externalVal-cos(externalVal)),noise(y,pow(((x*externalVal)+x),min(max(externalVal,cos((y/max(min(pow(audio(y,pow(externalVal,x)),externalVal),((min(y,sin(x))*cos(pow((max(x,y)+min(cos(externalVal),(tan(x)*pow((tan(externalVal)-tan(x)),(externalVal*x))))),y)))-x)),y)))),y)))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "max((cos(x)/sin(externalVal)),externalVal)",
            "g": "audio(x,(cos(y)-x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal-y),y)",
            "b": "mod(y,audio(cos(min(noise(sin((externalVal/x)),tan(x)),x)),tan(audio(y,max(y,min(noise(audio(mod((x+pow(noise(externalVal,y),x)),mod(mod(externalVal,cos(externalVal)),y)),(x/x)),y),x))))))",
            "g": "tan(x)"
          }
        }
      ],
      "timestamp": "23h:34m:38s"
    },
    {
      "generation": 5,
      "ascendantID": "kdg0ujd7-q2lu-cwvl-kx6z-msc6d3yfj648",
      "id": "1zjbjun3-5ihq-2b2v-c0cl-5eq86ybwir39",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-externalVal)",
            "b": "max(tan(y),externalVal)",
            "g": "audio(x,(cos(y)-x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,min((y/tan(y)),externalVal))+(x*max((x+externalVal),cos((cos(x)/y))))),(max(externalVal,pow(externalVal,y))-x))",
            "b": "tan(y)",
            "g": "min(pow(min(audio(tan(x),x),y),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(mod(y,y))",
            "b": "sin(y)",
            "g": "((sin(y)/externalVal)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((x/y))",
            "b": "(y*((tan(cos(y))-x)*((mod(x,mod(sin((min(min(x,max((max(y,(y*mod(y,y)))-y),y)),noise((noise(x,((externalVal+pow(audio((min(max(max(externalVal,y),max(y,x)),y)/externalVal),max(externalVal,mod((((audio((externalVal+externalVal),y)-x)*sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))+x)))/audio((y+y),y)),(pow(sin(max(x,externalVal)),x)-x)))),externalVal))/y))/pow(externalVal,audio(tan(x),externalVal))),x))/tan((x-sin(((y+y)/y)))))),externalVal))-cos(y))+tan(externalVal))))",
            "g": "((sin(y)/externalVal)+cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,max(sin(y),externalVal))+cos(externalVal)),(max(externalVal,audio(externalVal,x))-x))",
            "b": "cos(y)",
            "g": "min(audio(tan(x),x),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(mod(y,y),(externalVal*audio(max(externalVal,y),x)))",
            "b": "(y/((cos(tan(y))-x)-((mod(x,sin((pow(externalVal,(externalVal-(noise(x,externalVal)*x)))-y)))-cos(y))+tan(externalVal))))",
            "g": "((sin(y)*y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "noise(((cos(cos(y))+x)-((pow(x,mod(cos(externalVal),externalVal))*cos(y))+tan(externalVal))),externalVal)",
            "g": "audio(x,(x+sin(y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "min((externalVal/externalVal),externalVal)",
            "g": "audio(x,tan(x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal*audio(max(externalVal,y),x)),y)",
            "b": "mod(y,audio(cos(min(noise(sin((externalVal/x)),tan(x)),x)),tan(audio(y,max(y,noise(min(audio(mod((x+pow(noise(externalVal,y),x)),mod(mod(externalVal,cos(externalVal)),y)),(x/x)),y),x))))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,min((y*tan(y)),externalVal))+cos(externalVal)),(max(externalVal,mod(externalVal,x))-x))",
            "b": "tan(y)",
            "g": "noise((min(y,externalVal)/y),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(sin(x))",
            "b": "(y*((tan(cos(y))-x)*((mod(x,mod(sin((min(min(x,max((max(y,(y/mod(y,y)))-y),y)),min((noise(x,((externalVal+pow(audio((min(max(max(externalVal,y),max(y,x)),y)/externalVal),max(externalVal,mod((((audio((externalVal+externalVal),y)+x)*sin((audio(externalVal,(externalVal-(noise(x,externalVal)/x)))+x)))/audio((y+y),y)),(audio(sin(min(x,y)),x)-x)))),externalVal))/y))/pow(externalVal,audio(tan(x),externalVal))),x))/tan((x-sin(((y+y)/y)))))),externalVal))-cos(y))+tan(externalVal))))",
            "g": "((sin(y)/externalVal)+cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,max(sin(y),externalVal))+cos(externalVal)),(min(externalVal,audio(y,x))-x))",
            "b": "cos(y)",
            "g": "min(((x/y)+mod(x,y)),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,max((externalVal-externalVal),externalVal))+(x/max((x+externalVal),cos((tan(y)*y))))),(max(externalVal,pow(externalVal,y))-x))",
            "b": "max(y,externalVal)",
            "g": "min(pow(tan(x),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,max((y/tan(y)),externalVal))+(x*max((x+externalVal),cos((tan(x)*y))))),(max(externalVal,pow(externalVal,y))-x))",
            "b": "tan(y)",
            "g": "min(min(audio(tan(x),x),y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal-y),y)",
            "b": "mod(y,audio(cos(max(noise(sin((externalVal/x)),tan(x)),x)),tan(audio(y,max(y,min(noise(audio(mod((x+pow(noise(externalVal,y),x)),pow(mod(externalVal,sin(externalVal)),y)),(x/x)),y),x))))))",
            "g": "tan(x)"
          }
        }
      ],
      "timestamp": "23h:34m:38s"
    },
    {
      "generation": 6,
      "ascendantID": "1zjbjun3-5ihq-2b2v-c0cl-5eq86ybwir39",
      "id": "g4ohpzgt-j1sx-w978-6vxq-k9amn8egq409",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal/audio(tan(externalVal),x)),(externalVal*audio(max(externalVal,y),x)))",
            "b": "(y/((cos(tan(y))-x)-((mod(x,sin((pow(externalVal,(externalVal-(noise(x,externalVal)*x)))+y)))-cos(y))+max(x,externalVal))))",
            "g": "(audio(x,((x/x)+min(x,y)))-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,max((y/tan(y)),externalVal))+(x*max((x+externalVal),cos((tan(x)*y))))),(max(externalVal,pow(externalVal,y))-x))",
            "b": "tan(y)",
            "g": "min(min(audio(tan(x),x),y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,min(sin(y),externalVal))+(x/max((x+externalVal),tan((cos(x)/y))))),(max(externalVal,pow(externalVal,y))-x))",
            "b": "max(y,externalVal)",
            "g": "min(pow(min(audio(tan(x),x),y),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((x/y))",
            "b": "(y*((tan(cos(y))-x)-((mod(x,mod(sin((min(min(x,max((max(y,(y*mod(y,y)))+y),y)),noise((noise(x,((externalVal+pow(audio((min(max(max(externalVal,y),max(y,x)),y)*externalVal),max(externalVal,mod((((audio((externalVal+externalVal),y)-x)*sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))+x)))/audio((x+y),y)),(pow(sin(max(x,externalVal)),x)-x)))),externalVal))/y))/pow(externalVal,audio(tan(x),externalVal))),x))/max((x-sin(((y-x)*y))),x))),y))-max(tan(y),externalVal))+tan(externalVal))))",
            "g": "((sin(y)/externalVal)+cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(mod(y,y),(externalVal*audio(max(externalVal,y),x)))",
            "b": "(y-((cos(tan(y))-x)-((mod(x,sin((mod(externalVal,(externalVal-(mod(x,y)*x)))-y)))-cos(y))+tan(externalVal))))",
            "g": "((sin(y)*y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(mod(y,y))",
            "b": "(y/((max(y,externalVal)-x)*((mod(x,sin((mod(externalVal,(externalVal-(min(x,externalVal)*x)))-y)))-cos(y))+tan(externalVal))))",
            "g": "(((y/pow(((mod(y,y)/y)-x),pow(x,((x*y)+noise(x,x)))))*y)-pow(tan(x),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(sin(x))",
            "b": "(y*((tan(cos(y))-x)*((mod(x,pow(sin((min(min(x,max((min(y,(y/mod(y,y)))-y),y)),min((noise(x,((externalVal+pow(audio((min(max(max(externalVal,y),max(y,x)),y)/externalVal),max(externalVal,mod((((audio((externalVal-y),y)+x)*sin((pow(externalVal,(externalVal-sin(noise(x,externalVal))))+y)))/audio((y+y),y)),(audio(sin(noise(x,y)),x)-x)))),externalVal))*y))/pow(externalVal,audio(cos(x),externalVal))),x))/tan((x-sin(((y+y)/y)))))),externalVal))-cos(y))+tan(externalVal))))",
            "g": "((sin(y)/externalVal)+tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((externalVal-y))",
            "b": "mod(y,audio(cos(max(noise(sin((externalVal/x)),tan(x)),x)),tan(audio(y,tan(y)))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,max(sin(y),externalVal))+cos(externalVal)),(max(externalVal,audio(externalVal,x))-x))",
            "b": "cos(y)",
            "g": "noise(audio(cos(x),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "min((externalVal/externalVal),externalVal)",
            "g": "audio(x,tan(x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal-y),y)",
            "b": "mod(y,audio(cos(max(noise(sin((externalVal/x)),tan(x)),x)),tan(audio(y,max(y,min(noise(audio(mod((x+pow(noise(externalVal,y),x)),mod(mod(externalVal,sin(externalVal)),y)),(x/x)),y),x))))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(mod(y,y),(externalVal-audio(max(externalVal,y),x)))",
            "b": "(y/((cos(tan(y))-x)-((mod(x,sin((pow(externalVal,(externalVal-(noise(x,externalVal)*x)))-y)))+cos(y))+tan(externalVal))))",
            "g": "((sin(y)*y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal*audio(max(externalVal,y),x)),y)",
            "b": "pow(y,audio(cos(min(noise(sin((externalVal/x)),tan(x)),x)),tan(audio(y,max(y,noise(min(audio(mod((x+pow(noise(externalVal,y),x)),mod(mod(externalVal,cos(externalVal)),y)),(x/x)),y),x))))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(sin(x))",
            "b": "(y*((tan(cos(y))-x)*((mod(x,mod(sin(sin(min(max(x,noise((max(y,(y*mod(y,y)))-y),y)),noise((noise(x,((externalVal+pow(audio((min(max(max(externalVal,y),max(y,x)),y)/externalVal),noise(externalVal,mod((((audio((externalVal+externalVal),y)+x)*sin((pow(externalVal,(externalVal*(mod(x,externalVal)/x)))+x)))/pow((y+y),y)),(mod(sin(tan(x)),x)-x)))),externalVal))/y))/pow(externalVal,audio(tan(x),externalVal))),x)))),externalVal))+cos(y))-tan(externalVal))))",
            "g": "((sin(y)/externalVal)+cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "noise(((cos(cos(y))+x)-((pow(x,mod(cos(externalVal),externalVal))*(y/sin(externalVal)))+tan(externalVal))),externalVal)",
            "g": "audio(x,(x-sin(y)))"
          }
        }
      ],
      "timestamp": "23h:34m:39s"
    },
    {
      "generation": 7,
      "ascendantID": "g4ohpzgt-j1sx-w978-6vxq-k9amn8egq409",
      "id": "mme3oxci-22gn-1jwi-p8s3-humz6kz423bf",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,max(sin(y),externalVal))+cos(externalVal)),(max(externalVal,audio(externalVal,x))-x))",
            "b": "cos(y)",
            "g": "noise(audio(tan(x),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((externalVal*(externalVal-y)),y)",
            "b": "pow(y,audio(cos(min(noise(sin((externalVal/x)),tan(x)),x)),tan(audio(y,max(y,noise(min(audio(noise((x+pow(noise(externalVal,y),x)),mod(mod(externalVal,cos(externalVal)),y)),(y*x)),y),x))))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal-y),y)",
            "b": "mod(y,audio(cos(max(noise(sin((externalVal/x)),tan(x)),x)),tan(audio(y,max(y,min(noise(audio(mod((x+pow(noise(externalVal,y),x)),mod(pow(externalVal,cos(externalVal)),y)),(x/x)),x),x))))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((externalVal-y))",
            "b": "mod(y,audio(cos(max(noise(sin((externalVal/x)),cos(x)),x)),tan(audio(y,tan(y)))))",
            "g": "cos(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "min(sin(y),externalVal)",
            "g": "audio(x,sin(x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(mod(y,y),(externalVal*audio(tan(externalVal),x)))",
            "b": "(y-((cos(max(y,y))-x)-((mod(x,sin((pow(externalVal,(externalVal-(noise(x,externalVal)*x)))-y)))-cos(y))+tan(externalVal))))",
            "g": "((((x*y)+noise(x,x))*y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,min(sin(y),externalVal))+(x/mod(x,externalVal))),(max(externalVal,pow(externalVal,y))*x))",
            "b": "max(y,externalVal)",
            "g": "min(pow(min(audio(tan(x),x),y),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((x/y))",
            "b": "(y*((tan(cos(y))-x)-((mod(x,mod(sin((min(min(x,max((max(y,(y*mod(y,y)))+y),y)),noise((noise(x,((externalVal+pow(audio((min(max(max(externalVal,y),max(y,x)),y)*externalVal),min(externalVal,pow((((audio((externalVal+externalVal),y)-x)*sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))+x)))/audio((y+y),y)),(pow(sin(max(x,externalVal)),x)-x)))),externalVal))/y))/pow(externalVal,audio(tan(x),externalVal))),x))/max((x-sin(((y-x)*y))),x))),y))-max(tan(y),externalVal))+tan(externalVal))))",
            "g": "((sin(y)/externalVal)+cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal/audio(tan(externalVal),x)),max(mod(y,y),(externalVal*audio(max(externalVal,y),x))))",
            "b": "(y/((cos(tan(y))-x)*((mod(x,sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))+y)))-cos(y))+max(x,externalVal))))",
            "g": "(audio(x,(sin(x)+min(x,y)))-((sin(y)*y)-mod(x,x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(mod(y,y),(externalVal/audio(max(externalVal,y),x)))",
            "b": "(y-((cos(tan(y))-x)-((mod(x,sin((mod(externalVal,(externalVal+(mod(x,y)/x)))-y)))*cos(y))+tan(externalVal))))",
            "g": "((sin(y)*y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal-y),y)",
            "b": "mod(y,audio(sin(tan(noise(sin((externalVal/x)),tan(x)))),tan(pow(y,max(y,min(noise(audio(mod((x+pow(noise(externalVal,y),x)),mod(mod(externalVal,sin(externalVal)),y)),(x/x)),y),x))))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((externalVal/(externalVal-externalVal)))",
            "b": "(y/(y*((tan(cos(y))*x)-((mod(x,mod(sin((min(min(x,max((max(y,(y*pow(externalVal,y)))+y),y)),noise((noise(x,((externalVal-pow(audio((min(max(max(externalVal,y),max(y,x)),y)*externalVal),min(externalVal,noise((((audio((externalVal+externalVal),y)-x)/sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))+x)))/audio((x+y),y)),(audio(sin(min(x,y)),x)+x)))),externalVal))/y))/pow(externalVal,audio(tan(x),externalVal))),x))*max((x-sin(((y-x)*y))),x))),y))-max(tan(y),externalVal))+tan(externalVal)))))",
            "g": "((sin(y)*y)-pow(tan(x),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(mod(y,y),(externalVal-audio(max(externalVal,y),x)))",
            "b": "(y/((cos(tan(y))-x)-((mod(x,sin((pow(externalVal,(externalVal-(noise(x,y)*x)))-y)))+cos(y))+tan(externalVal))))",
            "g": "((sin(y)*y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,min(sin(y),externalVal))+(x/max((x+externalVal),tan((externalVal-y))))),(max(externalVal,pow(externalVal,y))-x))",
            "b": "max(y,externalVal)",
            "g": "min(pow(max(audio(tan(x),x),y),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal-y),y)",
            "b": "audio(externalVal,audio(cos(max(noise(sin((externalVal/x)),tan(x)),x)),tan(audio(y,tan(y)))))",
            "g": "tan(x)"
          }
        }
      ],
      "timestamp": "23h:34m:40s"
    },
    {
      "generation": 8,
      "ascendantID": "mme3oxci-22gn-1jwi-p8s3-humz6kz423bf",
      "id": "v7j3fhxo-rxbe-8fnp-1dnx-saew4lamr4ww",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((externalVal/(externalVal-externalVal)))",
            "b": "(y/(y*((tan(cos(y))*x)-((mod(x,mod(sin((min(min(x,max((max(y,(y*pow(externalVal,y)))+y),y)),noise((noise(x,((externalVal-pow(audio((min(max(max(externalVal,y),max(y,x)),y)*externalVal),min(externalVal,noise((((audio((externalVal+externalVal),y)-x)/sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))+x)))/audio((x+y),y)),(audio((min(x,y)/noise(x,mod(cos(x),x))),x)+x)))),externalVal))*x))/pow(externalVal,audio(tan(x),externalVal))),x))*min((x-sin(((y-x)*y))),x))),y))*max(tan(y),externalVal))+tan(externalVal)))))",
            "g": "((sin(y)*y)-audio(tan(x),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(max((externalVal-y),y),y)",
            "b": "mod(y,audio(cos(max(noise(sin((externalVal/x)),tan(x)),x)),cos(audio(y,min(y,min(mod(audio(noise((x+pow(noise(externalVal,y),x)),mod(pow(externalVal,cos(externalVal)),y)),(x/x)),x),x))))))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal/audio(tan(externalVal),x)),max(mod(y,y),(externalVal*audio(max(externalVal,y),x))))",
            "b": "(y/((cos(tan(y))-x)*((mod(x,sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))+y)))-cos(y))+max(x,externalVal))))",
            "g": "(audio(x,((x/x)+min(x,y)))-((sin(y)*y)-mod(x,x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(mod(y,y),(externalVal/audio((externalVal-y),x)))",
            "b": "(y-((cos(cos(y))*x)-((mod(x,sin((pow(externalVal,(externalVal+(pow(x,externalVal)/x)))+x)))*cos(y))+sin(y))))",
            "g": "(audio(x,sin(x))-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "min(cos(y),externalVal)",
            "g": "audio(x,sin(x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal/audio(tan(externalVal),x)),max(mod(y,y),(externalVal-audio(max(externalVal,y),x))))",
            "b": "(y/((cos(tan(y))-x)*((mod(x,sin((pow(externalVal,(externalVal*(noise(x,externalVal)/x)))+y)))-cos(y))+max(x,externalVal))))",
            "g": "(audio(x,(sin(x)+min(x,y)))-((sin(y)-y)-mod(x,x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(mod(y,y),(externalVal*audio(tan(externalVal),x)))",
            "b": "(y-((tan(max(y,y))-x)-((mod(x,cos((pow(externalVal,(externalVal-(noise(x,externalVal)*x)))-y)))-cos(y))+tan(externalVal))))",
            "g": "((((x/y)+noise(x,x))/y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,max(sin(y),externalVal))+tan(externalVal)),(tan(externalVal)-x))",
            "b": "cos(y)",
            "g": "noise(audio(tan(x),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((externalVal/(externalVal-externalVal)))",
            "b": "(y/(y*((tan(max(y,externalVal))*x)-((mod(x,mod(sin((min(min(x,max((max(y,(y*pow(externalVal,y)))+y),y)),noise((noise(x,((externalVal-pow(audio((max(min(max(externalVal,externalVal),max(y,x)),externalVal)*externalVal),min(externalVal,noise((((audio((externalVal+externalVal),y)-x)*sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))+x)))/audio((x+y),y)),(audio(sin(min(x,y)),x)+x)))),externalVal))/y))*pow(externalVal,audio(tan(x),externalVal))),x))*max((x-sin(((y-x)*y))),x))),y))-max(tan(y),y))+cos(externalVal)))))",
            "g": "((sin(y)/y)-pow(tan(x),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(mod(y,y))",
            "b": "(y/((cos(tan(y))-x)-((mod(x,cos((pow(externalVal,(externalVal-(noise(x,y)/x)))-y)))+cos(y))+tan(externalVal))))",
            "g": "(((y/pow((sin(noise(y,y))-x),pow(x,((x/y)+noise(x,x)))))*y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal/audio(tan(externalVal),x)),max(noise(y,y),(externalVal*audio(audio(max(externalVal,y),x),x))))",
            "b": "(y/((cos(max(y,y))+x)-((mod(x,cos((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))+y)))-cos(y))+max(x,externalVal))))",
            "g": "(audio(x,(sin(x)+min(x,y)))-(((x/y)+min(x,x))-mod(x,x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal-y),y)",
            "b": "audio(y,audio(cos(min(noise(sin((externalVal/x)),cos(x)),x)),tan(audio(y,tan(y)))))",
            "g": "cos(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(mod(y,y),(externalVal/audio(tan(y),x)))",
            "b": "(y-((cos(tan(y))-x)-((mod(x,sin((mod(externalVal,(externalVal+(mod(x,y)/x)))-y)))-cos(y))+tan(externalVal))))",
            "g": "((sin(y)*y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((externalVal*(externalVal-y)))",
            "b": "(y/(y*((tan(cos(y))*x)-((mod(x,mod(sin((min(min(x,max((tan(y)+y),y)),noise(sin(y),x))*tan((x-sin(((y-x)*externalVal)))))),y))-max(tan(y),y))+tan(externalVal)))))",
            "g": "((cos(y)-y)-pow(tan(x),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(externalVal,min(sin(y),externalVal))+(x/mod(x,externalVal))),(max(externalVal,mod(externalVal,x))+x))",
            "b": "max(y,externalVal)",
            "g": "min(pow(min(audio(tan(x),x),y),x),x)"
          }
        }
      ],
      "timestamp": "23h:34m:41s"
    },
    {
      "generation": 9,
      "ascendantID": "v7j3fhxo-rxbe-8fnp-1dnx-saew4lamr4ww",
      "id": "wp26ph1z-el8h-kzkv-zigc-ujyzinpkndzt",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(pow(y,x))",
            "b": "(y/((cos(tan(y))-x)-((mod(x,cos((audio(externalVal,(externalVal-(mod(x,externalVal)/x)))-y)))-cos(y))+tan(externalVal))))",
            "g": "(((y/pow((sin(noise(y,y))-x),mod(x,((x/y)+noise(x,x)))))*y)*mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise((mod(y,y)+(x/mod(x,externalVal))),(max(externalVal,mod(externalVal,x))-x))",
            "b": "min(y,externalVal)",
            "g": "min(pow(min(audio(tan(x),x),y),x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((y-(externalVal-y)))",
            "b": "(y/(y*((max(cos(y),(noise(noise(noise(externalVal,(sin(x)+y)),y),y)+y))*x)-((mod(x,mod(sin((min(min(x,max((tan(y)+y),y)),noise(sin(y),x))*tan((x-sin(((y-x)*externalVal)))))),y))-max(tan(y),y))+tan(externalVal)))))",
            "g": "((cos(y)-y)-pow(tan(x),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(mod(y,y))",
            "b": "(y/((cos(tan(y))-x)-((mod(x,cos((pow(externalVal,(externalVal-(noise(x,y)/x)))*y)))-cos(y))+tan(externalVal))))",
            "g": "(((y*pow((sin(noise(y,y))-x),pow(x,((x/y)+noise(x,x)))))*y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((externalVal/audio(tan(externalVal),x)),(externalVal-audio((externalVal-y),x)))",
            "b": "(y/((cos(tan(y))-x)*((mod(x,sin((pow(externalVal,(externalVal-((mod(x,mod(sin((min(min(x,max((max(y,(y-pow(externalVal,y)))+y),y)),noise(sin(y),x))*tan((x-sin(((y-x)*externalVal)))))),y))-max(tan(y),y))+tan(externalVal))))+y)))-cos(y))+max(x,externalVal))))",
            "g": "(audio(x,((x/x)+min(x,y)))-((sin(y)*y)-mod(x,x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(mod(y,y),(externalVal*audio(tan(externalVal),x)))",
            "b": "(y-((tan(max(y,y))+x)-((mod(x,cos((pow(externalVal,(externalVal-(noise(x,externalVal)*x)))-y)))-cos(y))+tan(externalVal))))",
            "g": "((((x/y)+noise(x,x))/y)+mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(mod(y,y),(externalVal*audio(tan(externalVal),x)))",
            "b": "(y-((tan(max(y,y))-x)-((mod(x,cos((pow(externalVal,(externalVal-(noise(x,externalVal)-x)))-y)))-cos(y))+tan(externalVal))))",
            "g": "((((x/y)+noise(x,x))*y)+mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((externalVal/(externalVal-externalVal)))",
            "b": "(y/(y*((tan(max(y,externalVal))*x)-((mod(x,mod(sin((min(min(x,max((max(y,(y*pow(externalVal,y)))+y),y)),noise((noise(x,((externalVal-pow(audio((max(min(max(externalVal,externalVal),max(externalVal,x)),externalVal)*externalVal),min(externalVal,noise((((audio((externalVal+externalVal),y)-x)*sin((pow(externalVal,(externalVal-(noise(x,externalVal)/x)))+x)))/audio((x+y),y)),(audio(sin(min(x,y)),x)+x)))),externalVal))/y))*pow(externalVal,audio(tan(x),externalVal))),x))*max((x-sin(noise(mod(noise(externalVal,((x/externalVal)-y)),x),y))),x))),externalVal))*max(tan(y),y))+cos(y)))))",
            "g": "((sin(y)/y)-pow(tan(x),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal/audio(max(externalVal,y),x)),max(mod(y,y),(externalVal*audio(max(externalVal,y),x))))",
            "b": "(y/((tan(tan(y))-x)*((mod(x,sin((pow(externalVal,(externalVal-(noise(x,externalVal)*x)))+y)))*cos(y))+max(x,externalVal))))",
            "g": "(audio(x,((x/x)+min(x,y)))*((sin(y)/externalVal)-mod(x,x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((externalVal/(externalVal-externalVal)))",
            "b": "(y/(y/((tan(max(y,externalVal))*x)-((mod(x,mod(sin((min(min(x,max((min(y,(y*pow(externalVal,y)))+y),y)),min((min(x,((externalVal-pow(audio((max(min(max(externalVal,externalVal),max(externalVal,x)),externalVal)/externalVal),min(externalVal,noise((((audio((externalVal+externalVal),y)-x)*sin((pow(externalVal,(externalVal+(noise(x,externalVal)/x)))+x)))/audio((x+y),y)),(audio(sin(noise(x,y)),x)+x)))),externalVal))/y))-pow(externalVal,audio(tan(x),externalVal))),x))*max((x*sin(((y-x)*y))),x))),y))-max(tan(y),y))+cos(externalVal)))))",
            "g": "(((y/sin(y))/y)-pow(tan(x),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((externalVal/pow(tan(externalVal),x)),max(noise(y,y),(externalVal*audio(audio(min(externalVal,y),x),x))))",
            "b": "(y/((cos(max(y,y))+x)-((mod(x,sin((mod(externalVal,(externalVal+(noise(x,externalVal)/x)))+y)))-cos(y))+max(x,externalVal))))",
            "g": "(audio(x,(sin(x)+pow(mod(cos(x),x),x)))-(((x/y)+min(x,x))-mod(x,x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(mod(y,y),(externalVal*audio(tan(externalVal),x)))",
            "b": "(y-((tan(tan(y))-x)*((mod(x,cos((pow(externalVal,(externalVal-(noise(x,externalVal)*x)))*y)))-cos(y))+tan(externalVal))))",
            "g": "((((x/y)+noise(x,x))/y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(mod(y,y))",
            "b": "(y*((cos(tan(y))-x)-((mod(x,cos((pow(externalVal,(externalVal-(noise(x,y)/x)))-y)))+cos(y))+tan(externalVal))))",
            "g": "(((y/pow((sin(noise(y,y))*x),pow(x,(sin(x)+noise(x,x)))))*y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(max((externalVal-y),y))",
            "b": "(y/((cos(tan(y))-x)-((mod(x,cos((pow(externalVal,(externalVal-(noise(mod(externalVal,sin(externalVal)),y)/x)))-y)))+cos(y))+tan(externalVal))))",
            "g": "(((y/pow((sin(noise(y,y))-x),pow(x,(sin(x)+cos(x)))))*y)-mod(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(pow(y,y),max(pow(y,y),(externalVal-audio(max(externalVal,y),x))))",
            "b": "(y/((cos(max(y,y))*x)*(((min(mod(noise(externalVal,((x/externalVal)-y)),x),y)+y)-cos(y))+max(x,externalVal))))",
            "g": "(audio(x,(sin(x)+max(x,y)))+((sin(y)-y)+mod(x,x)))"
          }
        }
      ],
      "timestamp": "23h:34m:43s"
    }
  ],
  "timestamp": "2023-11-4-23-34-26"
}