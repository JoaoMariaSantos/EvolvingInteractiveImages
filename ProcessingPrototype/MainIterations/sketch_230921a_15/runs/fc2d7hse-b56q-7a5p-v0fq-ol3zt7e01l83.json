{
  "id": "fc2d7hse-b56q-7a5p-v0fq-ol3zt7e01l83",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.20000000298023224,
    "populationSize": 10
  },
  "populations": [{
    "generation": 0,
    "id": "9mc5lup8-cmnj-a43p-g46g-bo820er35fze",
    "individuals": [
      {
        "fitness": 0,
        "expressions": {
          "r": "min(tan(max(cos((externalVal/y)),(noise(mod(mod(externalVal,externalVal),y),x)*externalVal))),y)",
          "b": "mod(y,mod(externalVal,(sin(mod(y,(y+audio(x,externalVal))))+mod(x,noise(max(noise(externalVal,mod((tan(pow(min((((x/x)+y)*cos(noise(y,tan(tan(x))))),audio(pow(y,y),(min(noise(y,mod(y,y)),y)+(mod((max(y,(externalVal+x))-sin(x)),cos(audio(y,externalVal)))*(y+sin(x)))))),cos(x)))+pow(min((audio(audio(externalVal,externalVal),(((min(mod(y,x),x)*(y/sin(noise(y,audio(externalVal,(audio(cos(x),x)/externalVal))))))/pow(((externalVal/y)-y),externalVal))+sin(mod(x,x))))*x),min(min(y,tan(x)),y)),pow(y,externalVal))),y)),(sin(noise(mod(max(externalVal,y),y),x))-x)),cos(mod((x*externalVal),((pow(externalVal,x)/y)-y))))))))",
          "g": "cos(noise(externalVal,mod((tan(pow(externalVal,tan(y)))*max(y,(externalVal+sin(noise(externalVal,y))))),externalVal)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(mod(pow(pow((tan(x)-audio(min(min(externalVal,cos(cos(audio(externalVal,audio(max((audio(externalVal,y)-y),noise(noise(externalVal,max(x,externalVal)),(externalVal/cos(y)))),mod((x*y),y)))))),x),y)),pow(x,x)),externalVal),max(x,x))+max(externalVal,max(((x*(noise(pow(x,x),audio(tan(tan(x)),x))*externalVal))+max(tan(mod(y,min(cos(sin((pow(y,cos((tan(tan((x+x)))/externalVal)))+y))),externalVal))),y)),min(mod(x,externalVal),noise(min((pow((y-x),externalVal)*audio((externalVal-externalVal),x)),externalVal),min(pow(x,max(externalVal,tan(sin(x)))),(externalVal*(x/(noise((min(y,audio((audio((externalVal+sin(externalVal)),y)*noise(externalVal,x)),tan(externalVal)))/cos(cos(audio(externalVal,externalVal)))),x)/cos(noise(max((y/tan((y/min(x,((x/(audio(y,pow(cos(externalVal),externalVal))*max(pow(sin((cos(cos(audio((noise((audio(y,x)*y),x)/(y/y)),(x+(tan(mod(externalVal,x))+x)))))+externalVal)),cos((x-cos(tan(x))))),x)))-externalVal))))),(((max(cos(noise(x,externalVal)),cos(y))-(externalVal*tan(x)))+((x/mod(x,y))+y))+mod(pow(y,(x-y)),x))),y)))))))))))",
          "b": "(x-externalVal)",
          "g": "cos(x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(sin(externalVal)-x)",
          "b": "max(y,y)",
          "g": "mod((min((min((y+(noise(sin(((y*y)+y)),sin(x))/(mod(externalVal,(y-cos(noise(y,(y+audio(max(min(x,externalVal),y),sin(((y+externalVal)/y))))))))+mod(x,y)))),externalVal)/(externalVal/externalVal)),externalVal)+x),y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(audio(externalVal,(x+y)),max(externalVal,x))",
          "b": "noise(x,externalVal)",
          "g": "mod(externalVal,min(externalVal,noise((y-audio(externalVal,sin((externalVal/externalVal)))),(x/x))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan(x)",
          "b": "(y/x)",
          "g": "(noise(x,externalVal)/y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(externalVal,noise(externalVal,y))",
          "b": "pow(sin(max((noise(x,externalVal)*y),x)),externalVal)",
          "g": "max((y/cos(cos(sin(y)))),min(noise(mod(max(externalVal,mod((mod((sin((((tan(mod(((y+(externalVal-externalVal))*y),externalVal))+cos(x))/x)*y))*externalVal),y)-y),(x-externalVal))),cos(x)),y),x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(min(audio(x,externalVal),y)/x)",
          "b": "max(x,externalVal)",
          "g": "cos(mod(noise(cos(y),min(pow(externalVal,(x/cos(externalVal))),externalVal)),(x-y)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "((mod(sin((sin(x)+x)),y)+((sin((y-x))/y)*(x-x)))+y)",
          "b": "noise(mod(externalVal,min(x,(pow(y,pow(sin(pow(externalVal,x)),(y*(noise(max((pow(tan(noise(externalVal,y)),x)-max((y-(x-y)),cos((max(noise(y,y),y)/y)))),x),min(externalVal,externalVal))/y))))+tan(pow(y,mod(x,y)))))),(x*y))",
          "g": "noise(y,max(x,x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(sin(cos(externalVal)),pow(tan(((noise(cos(externalVal),y)-externalVal)*(x+y))),cos(x)))",
          "b": "(cos(externalVal)/max((y+x),externalVal))",
          "g": "pow(externalVal,y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(y,cos(x))",
          "b": "sin(max(y,externalVal))",
          "g": "cos(x)"
        }
      }
    ],
    "timestamp": "23h:24m:13s"
  }],
  "timestamp": "2023-11-4-23-24-11"
}