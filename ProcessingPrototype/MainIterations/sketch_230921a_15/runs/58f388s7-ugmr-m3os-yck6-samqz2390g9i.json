{
  "id": "58f388s7-ugmr-m3os-yck6-samqz2390g9i",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 0,
    "tournamentSize": 3,
    "mutationRate": 0.20000000298023224,
    "populationSize": 15
  },
  "populations": [
    {
      "generation": 0,
      "id": "l0cs61lh-qfbi-aari-l73m-k4vibjrs8v37",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(mod(x,(((externalVal/(externalVal+y))-y)*max((y+y),pow(y,noise(y,(x*mod(max(y,externalVal),y))))))))",
            "b": "min(min(noise(sin(y),x),(pow(pow(y,externalVal),sin(externalVal))-max(cos(externalVal),min(x,noise(x,y))))),tan(x))",
            "g": "(pow(max(y,tan(y)),x)-max(externalVal,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(y)",
            "b": "((max(pow(externalVal,x),y)+x)/pow(y,x))",
            "g": "(x/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "(pow(externalVal,y)-y)",
            "g": "noise(x,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio(externalVal,x)",
            "b": "sin(pow(min(x,(x/min(audio(y,(((x/((x+cos(((x*x)*cos(externalVal))))*externalVal))+y)/(cos(noise((tan(audio(cos(x),externalVal))/x),(x*mod(y,externalVal))))*x))),audio(y,noise(y,(noise(y,externalVal)*x)))))),((y-y)/externalVal)))",
            "g": "(tan(noise(x,y))-noise(externalVal,y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(sin(cos(x))-sin(x))",
            "b": "(cos((max(externalVal,max(externalVal,x))+externalVal))-cos(mod(noise(externalVal,externalVal),externalVal)))",
            "g": "(externalVal/max((tan(externalVal)*noise(min(x,audio(min(externalVal,externalVal),max(x,((y*x)/sin(max((x+externalVal),externalVal)))))),externalVal)),externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "cos(mod(min(y,(audio(x,y)+min(min(sin(externalVal),cos(y)),y))),max(y,externalVal)))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(audio(y,noise(y,(max(x,sin(x))-externalVal))),(externalVal+y))",
            "b": "cos(x)",
            "g": "(audio(cos(x),y)/x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((pow(x,(((tan(max((externalVal/audio(pow(tan(x),x),sin((noise(x,externalVal)*(externalVal*x))))),noise(max((mod(y,x)/y),cos(min(externalVal,x))),externalVal)))*y)+y)+y))/cos(y)),y)",
            "b": "audio(audio(externalVal,(y+(mod(x,noise(y,pow(externalVal,(cos(x)-x))))-externalVal))),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio(mod(externalVal,externalVal),mod(x,noise((min(x,externalVal)+x),y)))",
            "b": "audio(y,((min(cos((tan(pow(x,externalVal))/(y-(y-y)))),externalVal)-y)+(y-externalVal)))",
            "g": "tan(y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(mod(min(y,sin(externalVal)),y),(externalVal/x))",
            "b": "mod(cos(audio(noise(((externalVal+(y*pow(externalVal,externalVal)))*y),externalVal),max(y,max(sin(min(externalVal,x)),min(sin(externalVal),y))))),cos(externalVal))",
            "g": "sin(audio((y/cos(min(x,externalVal))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio(y,cos(pow(y,((y-y)/cos(y)))))",
            "b": "audio(x,(tan((sin(max(externalVal,x))*(externalVal-(pow(max(externalVal,x),cos(x))*x))))-externalVal))",
            "g": "(audio(y,x)*externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-externalVal)",
            "b": "max((noise(x,externalVal)+mod(y,y)),max(audio(cos(externalVal),pow(pow(tan(min(noise(y,y),pow(x,y))),(x-externalVal)),((y-x)*pow((tan(audio(x,externalVal))-externalVal),cos(x))))),externalVal))",
            "g": "(externalVal+x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(sin(externalVal)*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "pow(audio(x,tan(externalVal)),x)",
            "b": "max(audio((y+noise(pow(externalVal,tan(audio(x,sin((cos(y)+mod(y,x)))))),mod(max(x,externalVal),(cos(externalVal)/y)))),tan(cos(cos(x)))),(pow((sin(x)+y),externalVal)+noise((y+cos(tan(x))),x)))",
            "g": "max(y,x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(min(y,pow(tan(externalVal),(y*pow((externalVal/externalVal),noise(externalVal,x)))))*cos(x))",
            "b": "((audio(pow(sin(noise(y,audio(noise((max(min(audio(x,cos(x)),x),externalVal)+audio((externalVal-x),y)),audio(y,y)),externalVal))),x),(cos(y)+x))+audio(externalVal,(audio((tan(x)/externalVal),x)*x)))+x)",
            "g": "(y-tan(y))"
          }
        }
      ],
      "timestamp": "0h:1m:5s"
    },
    {
      "generation": 1,
      "ascendantID": "l0cs61lh-qfbi-aari-l73m-k4vibjrs8v37",
      "id": "cdo2nkhp-v84o-syzo-mlgb-xrrgcwll5iy9",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "audio(y,cos(pow(y,((y-y)/cos(y)))))",
            "b": "audio(x,(tan((sin(max(externalVal,x))/(externalVal-(pow(max(externalVal,x),cos(x))*x))))-externalVal))",
            "g": "(audio(y,x)*externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*mod(max(y,externalVal),y))*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio(y,cos(pow(y,((y-y)/cos(y)))))",
            "b": "audio(x,(tan((sin(max(externalVal,x))*(externalVal-(max(max(audio(x,cos(x)),x),externalVal)*x))))-externalVal))",
            "g": "((externalVal/(((y-externalVal)*y)+externalVal))*externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "(mod(externalVal,y)-y)",
            "g": "noise(x,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((externalVal/y)*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "(pow(externalVal,y)-y)",
            "g": "noise(x,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "cos(mod(max(y,(audio(x,y)+min(min(sin(externalVal),cos(y)),y))),max(y,externalVal)))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "pow(max(externalVal,x),x)",
            "b": "max(pow((y+sin(x)),tan(sin(cos(x)))),(pow((sin(x)+y),externalVal)+noise((y+cos(tan(x))),x)))",
            "g": "max(x,x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((mod(x,(((tan(max((externalVal/audio(pow(tan(x),x),sin((noise(x,externalVal)*(externalVal*x))))),noise(max((mod(y,x)/y),cos(min(externalVal,x))),externalVal)))*y)+y)+y))/cos(y)),y)",
            "b": "audio(audio(externalVal,(y+(mod(x,noise(y,pow(externalVal,pow(max(y,externalVal),pow(y,externalVal)))))-externalVal))),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(sin(externalVal)*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(min(x,audio(min(externalVal,externalVal),max(x,sin((y*x))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "(pow(externalVal,y)-y)",
            "g": "mod(x,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(min(y,pow(tan(externalVal),(y*pow((externalVal/externalVal),noise(externalVal,x)))))*pow((externalVal/externalVal),noise(externalVal,x)))",
            "b": "((audio(pow(sin(noise(y,audio(noise((max(min(audio(x,cos(x)),x),externalVal)+audio((externalVal-x),y)),audio(y,y)),externalVal))),x),(cos(y)+x))+audio(externalVal,(audio((tan(x)/externalVal),x)*x)))+x)",
            "g": "(y-tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(y)",
            "b": "((max(pow(externalVal,x),y)+x)/pow(y,x))",
            "g": "(x/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(audio(y,noise(y,(max(x,(y/y))-externalVal))),(externalVal+y))",
            "b": "cos(x)",
            "g": "(audio(cos(x),y)/x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "pow(audio(y,noise(y,(max(x,sin(x))-externalVal))),(externalVal+y))",
            "b": "cos(x)",
            "g": "(audio(cos(x),y)/x)"
          }
        }
      ],
      "timestamp": "0h:1m:7s"
    },
    {
      "generation": 2,
      "ascendantID": "cdo2nkhp-v84o-syzo-mlgb-xrrgcwll5iy9",
      "id": "u6gip2i8-ais0-e50o-c28i-o2gknt1k3zne",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "(sin(externalVal)*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(min(x,audio(min(externalVal,externalVal),max(x,sin((y*x))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "pow(audio(y,tan(y)),(externalVal+y))",
            "b": "sin(x)",
            "g": "((x/externalVal)/x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "pow(max(externalVal,x),x)",
            "b": "max(audio((y+sin(x)),tan(sin(cos(x)))),(pow((sin(x)+y),externalVal)+mod((y+cos(tan(x))),x)))",
            "g": "min(y,x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(y)",
            "b": "((max(pow(externalVal,x),y)+x)/pow(y,x))",
            "g": "(x/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "(cos(x)-y)",
            "g": "noise(x,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "cos(mod(max(y,(audio(x,y)+min(min(sin(externalVal),cos(y)),y))),max(y,externalVal)))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal*y)",
            "b": "((noise((max(audio(mod(y,x),externalVal),sin((pow(externalVal,x)*mod(x,x))))*max((y*x),x)),y)-externalVal)-y)",
            "g": "noise(x,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(audio(y,noise(y,(max(x,(y/y))-externalVal))),(externalVal+y))",
            "b": "cos(x)",
            "g": "(audio(cos(x),y)/x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*mod(max(y,externalVal),y))*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(y)",
            "b": "((max(mod(externalVal,x),y)+x)/pow(y,x))",
            "g": "(x/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(audio(y,noise(y,(max(x,(y/y))*externalVal))),(externalVal+y))",
            "b": "cos(x)",
            "g": "(audio(cos(x),y)/x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(pow(y,mod(y,(max(x,(y/y))-externalVal)))*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((mod(x,(((tan(max(sin(externalVal),noise(max((mod(y,x)/y),cos(max(externalVal,x))),externalVal)))*y)+y)+y))/cos(y)),y)",
            "b": "audio(audio(y,externalVal),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*(externalVal-y))*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(mod(x,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "sin(mod(max(y,(mod(x,externalVal)+min(min(sin(externalVal),tan(x)),y))),max(y,externalVal)))",
            "g": "cos(externalVal)"
          }
        }
      ],
      "timestamp": "0h:1m:8s"
    },
    {
      "generation": 3,
      "ascendantID": "u6gip2i8-ais0-e50o-c28i-o2gknt1k3zne",
      "id": "rne1ih50-91ya-fs5w-95eq-xz5eqjqbtx3s",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal*y)",
            "b": "((mod((max(audio((externalVal*(noise((y*(max(externalVal,audio((sin(externalVal)*min(y,(mod(pow((externalVal+(cos(sin(min(min(externalVal,externalVal),noise(y,externalVal))))*x)),y),externalVal)/externalVal))),y))+noise((x*x),externalVal))),y)/externalVal)),externalVal),sin((pow(externalVal,x)*mod(x,x))))*max((y*x),x)),y)-externalVal)-y)",
            "g": "noise(x,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(pow(y,mod(y,(max(x,(y/y))-externalVal)))-x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "(sin(x)+y)",
            "g": "noise(x,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*sin(x))*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*mod((externalVal/x),y))*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*mod(max(y,externalVal),y))*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(pow(y,mod(y,(tan(x)-externalVal)))*y)",
            "b": "audio(y,externalVal)",
            "g": "tan(tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(pow(y,mod(y,(max(x,(y/y))-externalVal)))*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((externalVal-y)*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "cos(mod(max(y,(pow(x,y)+min(min(sin(externalVal),cos(x)),y))),min(y,externalVal)))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(pow(y,mod(y,(max(externalVal,x)-externalVal)))*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((noise(x,(((tan(max((externalVal/pow(audio(tan(x),x),sin((mod(x,externalVal)/(externalVal/x))))),noise(max((mod(y,x)/y),cos(max(externalVal,x))),externalVal)))*y)+y)+y))-tan(y)),y)",
            "b": "audio(audio(y,externalVal),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "sin(mod(max(y,(mod(x,externalVal)-min(min(sin(externalVal),max(y,(y-(pow(noise(externalVal,cos((externalVal*(noise((y*(max(externalVal,audio((cos(externalVal)*min(y,cos(x))),y))-max(noise(y,cos(x)),externalVal))),externalVal)/externalVal)))),audio(x,noise(sin(y),y)))-noise(x,(externalVal+x)))))),y))),tan(y)))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "pow(max(externalVal,x),x)",
            "b": "max(audio((y+sin(x)),tan(sin(cos(x)))),(pow((sin(x)+y),externalVal)+mod((y+cos(tan(x))),x)))",
            "g": "min(y,x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "cos(mod(min(y,(pow(x,y)+min(min((externalVal/x),cos(y)),y))),tan(y)))",
            "g": "cos(externalVal)"
          }
        }
      ],
      "timestamp": "0h:1m:9s"
    },
    {
      "generation": 4,
      "ascendantID": "rne1ih50-91ya-fs5w-95eq-xz5eqjqbtx3s",
      "id": "h1q8uyij-saih-ql7i-xagb-fxj44l0m6ggz",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "((externalVal-y)*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(max(externalVal,x)*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "sin(mod(max(y,(mod(x,externalVal)-min(min(sin(externalVal),max(y,(y-(pow(noise(externalVal,cos((externalVal*(noise((y*(max(externalVal,audio((cos(externalVal)*min(y,cos(x))),y))-max(noise(y,cos(x)),externalVal))),externalVal)/externalVal)))),audio(x,noise(sin(y),y)))*noise(y,(externalVal+x)))))),y))),tan(y)))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*sin(x))/x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(pow(y,mod(y,(tan(x)-externalVal)))*y)",
            "b": "audio(y,externalVal)",
            "g": "tan(cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*mod(max(y,externalVal),y))*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "cos(mod(min(y,(pow(x,y)+min(min((externalVal/x),cos(y)),y))),tan(y)))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((noise(x,(((cos(max(sin(externalVal),noise(max((pow(y,x)/y),cos(max(externalVal,x))),externalVal)))*y)+y)+y))-tan(y)),y)",
            "b": "audio(audio(y,externalVal),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((noise(x,(((tan(max((externalVal/pow(audio(tan(x),x),sin((mod(x,externalVal)/(externalVal/x))))),noise(max((mod(y,x)*externalVal),cos(max(externalVal,x))),externalVal)))*y)+y)+y))-tan(y)),y)",
            "b": "audio(audio(y,externalVal),y)",
            "g": "cos(y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "tan(mod(max(y,(pow(x,y)+min(min((y/x),cos(x)),y))),min(y,externalVal)))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(pow(y,mod(y,(tan(x)-externalVal)))*y)",
            "b": "pow(y,externalVal)",
            "g": "tan(tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*(x*y))*x)",
            "b": "pow(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((noise(x,(((tan(max((externalVal/pow(audio(tan(x),x),sin((mod(x,externalVal)/(externalVal*x))))),noise(max((mod(y,x)/y),cos(max(externalVal,x))),externalVal)))*y)+y)-y))-tan(y)),y)",
            "b": "audio(pow(externalVal,externalVal),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((noise(x,(((tan(max((externalVal/pow(audio(tan(x),x),sin((mod(x,externalVal)/(externalVal/x))))),noise(min((mod(y,x)/y),cos(max(externalVal,x))),externalVal)))-y)-y)+y))-tan(y)),y)",
            "b": "pow(audio(y,externalVal),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal+y)",
            "b": "(audio(externalVal,externalVal)+y)",
            "g": "noise(x,externalVal)"
          }
        }
      ],
      "timestamp": "0h:1m:9s"
    },
    {
      "generation": 5,
      "ascendantID": "h1q8uyij-saih-ql7i-xagb-fxj44l0m6ggz",
      "id": "cxcgogmd-9iim-yvby-w08j-ztwmxtaq6o97",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*(x/y))/x)",
            "b": "audio(y,externalVal)",
            "g": "cos(min(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((noise(x,(((tan(max((externalVal/audio(audio(tan(x),x),sin((mod(x,externalVal)/(externalVal/x))))),noise(max((mod(y,x)*externalVal),cos(max(externalVal,x))),externalVal)))*y)+y)+y))-tan(y)),y)",
            "b": "audio(audio(y,externalVal),y)",
            "g": "cos(y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*(x*y))-x)",
            "b": "pow(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*mod(max(y,externalVal),y))*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(y)",
            "b": "tan(mod(max(y,(audio(x,externalVal)+min(min((externalVal/x),cos(x)),y))),min(y,externalVal)))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(mod(y,mod(y,cos(externalVal)))*y)",
            "b": "audio(y,externalVal)",
            "g": "tan(cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*(x/y))/y)",
            "b": "audio(y,externalVal)",
            "g": "cos(tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(pow(y,mod(y,(tan(x)-externalVal)))-y)",
            "b": "audio(y,externalVal)",
            "g": "tan(cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((noise(x,(((cos(max(sin(externalVal),noise(max((pow(y,x)/y),sin(max(externalVal,x))),externalVal)))*y)+y)+y))-tan(y)),y)",
            "b": "audio(pow(y,externalVal),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(max(externalVal,x)*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "max(mod(max(y,(pow(x,y)+min(min((y*x),cos(x)),y))),min(y,externalVal)),x)",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(pow(y,mod(y,sin(y)))*y)",
            "b": "pow(y,externalVal)",
            "g": "tan(cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((noise(x,noise(max((mod(y,x)*externalVal),cos(max(externalVal,x))),externalVal))-cos(x)),y)",
            "b": "audio(audio(audio(y,externalVal),y),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((noise(x,(((tan(max((externalVal/pow(audio(tan(x),x),((mod(x,externalVal)/(externalVal/x))/externalVal))),noise(max((noise(y,x)/y),cos(max(externalVal,x))),externalVal)))-y)-y)+y))-tan(y)),y)",
            "b": "pow(audio(y,externalVal),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(max(externalVal,x)*x)",
            "b": "pow(y,externalVal)",
            "g": "cos(tan(y))"
          }
        }
      ],
      "timestamp": "0h:1m:10s"
    },
    {
      "generation": 6,
      "ascendantID": "cxcgogmd-9iim-yvby-w08j-ztwmxtaq6o97",
      "id": "83jslwcf-t61h-adrx-wfaf-1fjkc0snla32",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*noise(max(y,externalVal),y))*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((mod(x,(((tan(max((externalVal/(pow(y,mod(y,(tan(x)-externalVal)))-y)),noise(max((audio(y,x)*externalVal),cos(max(externalVal,x))),externalVal)))*y)+y)+y))-tan(y)),y)",
            "b": "audio(audio(y,externalVal),y)",
            "g": "sin(y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((noise(x,(((cos(max(sin(externalVal),noise(max((pow(y,x)/y),sin(max(externalVal,x))),externalVal)))*y)+y)+y))*tan(y)),y)",
            "b": "audio(pow(y,externalVal),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(max(externalVal,x)*x)",
            "b": "pow(y,externalVal)",
            "g": "cos(tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*(x*y))-x)",
            "b": "pow(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((noise(x,((sin(cos(max(sin(externalVal),noise(max((pow(y,x)/y),sin(max(externalVal,x))),externalVal))))+y)+y))-tan(y)),y)",
            "b": "audio(pow(y,externalVal),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*(x/y))/y)",
            "b": "audio(y,externalVal)",
            "g": "cos(tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((noise(x,(((cos(min(sin(externalVal),noise(max(sin(pow(y,x)),sin(max(externalVal,x))),externalVal)))*y)+y)+y))-tan(y)),y)",
            "b": "audio(pow(y,externalVal),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(mod(y,mod(y,cos(externalVal)))*y)",
            "b": "audio(y,externalVal)",
            "g": "tan(cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(tan(externalVal)*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "max(mod(max(y,(pow(x,y)+min(min((y*x),sin(x)),y))),min(y,externalVal)),x)",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(mod(y,cos(x))-y)",
            "b": "audio(y,externalVal)",
            "g": "tan(cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(y)",
            "b": "tan(mod(min(y,(audio(x,externalVal)+min(noise((externalVal/x),cos(x)),y))),max(y,externalVal)))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(externalVal)",
            "b": "max(mod(max(y,(pow(x,y)+min(min((y*x),cos(x)),y))),min(y,externalVal)),x)",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(max(externalVal,x)*x)",
            "b": "pow(y,externalVal)",
            "g": "cos(tan(y))"
          }
        }
      ],
      "timestamp": "0h:1m:11s"
    },
    {
      "generation": 7,
      "ascendantID": "83jslwcf-t61h-adrx-wfaf-1fjkc0snla32",
      "id": "yerp2v3d-5qvg-4wtx-epw8-dd1cibn11stx",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(externalVal)",
            "b": "max(mod(max(y,(pow(x,y)+min(min((y*x),cos(x)),y))),min(y,externalVal)),x)",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(((x*noise(cos(y),y))*y)*y)",
            "b": "audio(y,externalVal)",
            "g": "tan(max(y,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(externalVal)",
            "b": "max(mod(max(y,(pow(x,y)+min(min((y*x),cos(x)),y))),min(y,externalVal)),x)",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x/y)/x)",
            "b": "pow(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(pow(y,tan(y))*y)",
            "b": "audio(y,externalVal)",
            "g": "tan(sin(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(mod(y,mod(y,cos(externalVal)))-y)",
            "b": "audio(y,externalVal)",
            "g": "cos(cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(max(externalVal,x)*x)",
            "b": "audio(y,externalVal)",
            "g": "cos(cos(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(externalVal)",
            "b": "max(mod(max(y,(pow(x,y)+min(min((y-y),cos(x)),y))),noise(y,externalVal)),x)",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(externalVal)",
            "b": "max(mod(max(y,(pow(x,y)+min(min((y*x),cos(x)),y))),min(y,externalVal)),x)",
            "g": "tan(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((noise(x,(((cos(max(sin(externalVal),noise(max((pow(y,x)/y),sin(max(externalVal,x))),externalVal)))/y)+y)+y))-tan(y)),y)",
            "b": "audio(pow(y,externalVal),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((noise(x,(((cos(max((externalVal*pow(audio(tan(x),x),cos(tan(mod(x,externalVal))))),mod(max((audio(y,x)/y),sin(max(externalVal,x))),externalVal)))*y)+y)+y))+tan(y)),y)",
            "b": "audio(pow(y,externalVal),y)",
            "g": "(externalVal*externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(y)",
            "b": "tan(mod(min(y,(audio(x,externalVal)+min(noise((externalVal/x),cos(x)),y))),max(y,externalVal)))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(max(externalVal,x)*x)",
            "b": "pow(y,externalVal)",
            "g": "cos(tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max((noise(x,((sin(cos(max(sin(externalVal),noise(max((pow(y,x)/y),sin(max(externalVal,x))),externalVal))))-y)+y))*tan(y)),y)",
            "b": "audio(pow(y,externalVal),y)",
            "g": "(y/externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((x*(x*y))-x)",
            "b": "pow(y,externalVal)",
            "g": "cos(max(y,externalVal))"
          }
        }
      ],
      "timestamp": "0h:1m:16s"
    }
  ],
  "timestamp": "2023-11-05-00-01-04"
}