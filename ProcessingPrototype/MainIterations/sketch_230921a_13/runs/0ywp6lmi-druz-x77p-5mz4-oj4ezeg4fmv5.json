{
  "id": "0ywp6lmi-druz-x77p-5mz4-oj4ezeg4fmv5",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.20000000298023224,
    "populationSize": 10
  },
  "populations": [
    {
      "generation": 0,
      "id": "7um4pzpt-dkbn-g4az-gh7f-f5mvictbt1zm",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y*max(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio((x/sin(max(x,(noise(y,externalVal)*x)))),min(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio((externalVal+x),x)",
            "b": "mod(x,(sin(max(x,y))+y))",
            "g": "pow(y,(tan(y)-mod(x,externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "pow((((externalVal*y)/externalVal)-y),(pow(y,tan(y))*x))",
            "b": "(sin(sin(x))/y)",
            "g": "mod((pow(mod(externalVal,x),y)-externalVal),max(externalVal,((cos(min(x,audio((x-pow((((x+y)+y)/x),x)),y)))/(y+x))/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(x)",
            "b": "sin((externalVal/cos((y*y))))",
            "g": "noise((externalVal-externalVal),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "pow(cos(noise(externalVal,externalVal)),y)",
            "b": "audio(tan((y/(max((y/x),y)/x))),y)",
            "g": "sin(tan(noise(noise(externalVal,y),(audio(y,x)-cos(sin((y-(externalVal/x))))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(x,min(externalVal,y))",
            "b": "min(y,max((noise(tan(min(noise(y,(externalVal*x)),y)),sin(pow(tan(x),y)))+x),y))",
            "g": "max(y,y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos((min(audio(y,x),y)-((audio(x,max(externalVal,tan(x)))+pow(y,y))/x)))",
            "b": "sin(audio(externalVal,y))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(audio((mod((noise(x,x)*x),x)/audio(y,cos(noise(tan(mod((y*cos(x)),noise((y/externalVal),audio(cos(sin(pow(tan(sin(y)),x))),y)))),(y+sin(externalVal)))))),mod(externalVal,y))+(max((externalVal+max(externalVal,pow(max(min(max(x,(x/x)),(audio(min((externalVal*x),externalVal),y)/(pow(min(y,(y-externalVal)),max((sin(y)-noise(externalVal,mod(max(cos(x),externalVal),min(x,max(sin(externalVal),externalVal))))),(x+pow(externalVal,x))))+x))),externalVal),y))),audio(y,externalVal))*pow(max(externalVal,x),pow(sin(x),(y*y)))))",
            "b": "min(externalVal,pow(x,min((min(y,mod(tan(externalVal),externalVal))-externalVal),pow(externalVal,x))))",
            "g": "(externalVal*max(y,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-externalVal)",
            "b": "((externalVal*pow(pow(x,x),audio(max(y,tan(audio(cos(externalVal),mod(tan(externalVal),max((y/(externalVal/(pow(pow(sin(y),max(max(tan(externalVal),y),x)),noise(audio(y,externalVal),externalVal))*x))),y))))),max(y,min(noise(audio(y,sin(externalVal)),max(y,pow(x,x))),(min(pow((y/mod(x,x)),(x/externalVal)),y)+cos((y-externalVal))))))))/externalVal)",
            "g": "(audio(x,mod(y,max(x,max(sin((max((externalVal-y),min(min(noise(externalVal,externalVal),(x*noise(y,y))),mod(externalVal,mod(y,(x*x)))))-externalVal)),min(y,y)))))*x)"
          }
        }
      ],
      "timestamp": "22h:44m:46s"
    },
    {
      "generation": 1,
      "ascendantID": "7um4pzpt-dkbn-g4az-gh7f-f5mvictbt1zm",
      "id": "40c8a8wg-jome-yhhg-hoyj-bcg37zm0zdpu",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y*max(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio((x/sin(max(x,(noise(y,externalVal)*x)))),min(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x-(externalVal/(y/noise(mod(externalVal,y),((externalVal+mod(audio(tan(mod(externalVal,x)),(tan(sin((y-x)))/(cos(max(x,(externalVal+externalVal)))-externalVal))),(pow(cos(y),noise(max((y/externalVal),externalVal),pow(sin(sin(externalVal)),tan(externalVal))))+x)))/externalVal)))))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "pow(cos(mod(externalVal,externalVal)),y)",
            "b": "audio(tan((y/(max((y/x),y)/x))),y)",
            "g": "sin(tan(min(noise(externalVal,y),(audio(y,x)-cos(sin((y-(externalVal/x))))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(audio((mod((noise(x,x)*x),x)/audio(y,sin(noise(tan(mod((y*cos(x)),noise(sin(y),pow(cos(sin(pow(tan(sin(y)),x))),y)))),(y+sin(externalVal)))))),mod(externalVal,y))+(max((externalVal-max(externalVal,pow(tan(min(max(x,(x/x)),(audio(noise((externalVal*x),externalVal),y)/(pow(min(y,(externalVal/externalVal)),max((sin(y)-noise(externalVal,mod(tan(cos(x)),min(x,min(sin(externalVal),externalVal))))),(x+pow(externalVal,x))))+x)))),y))),audio(y,externalVal))*pow(max(externalVal,x),pow(sin(x),(y*y)))))",
            "b": "min(externalVal,pow(x,min((min(y,mod(max(externalVal,sin(y)),externalVal))-externalVal),pow(externalVal,x))))",
            "g": "(externalVal*noise(noise(externalVal,y),(audio(y,x)-cos(sin((y-sin(externalVal)))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(x)",
            "b": "sin((externalVal/cos((externalVal-y))))",
            "g": "noise((externalVal-externalVal),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)/audio(noise(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)*audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(pow((pow((noise(x,x)*x),y)/audio(externalVal,cos(noise(tan(mod((y/cos(x)),noise((y/externalVal),audio(cos(sin(pow(tan(sin(y)),x))),x)))),(y+sin(externalVal)))))),mod(externalVal,y))+(max((externalVal-max(externalVal,pow(max(max(max(x,(x/x)),(pow(min((externalVal*x),externalVal),y)/(pow(min(y,(y-externalVal)),max((sin(y)-noise(externalVal,mod(max(cos(x),externalVal),min(x,max(sin(externalVal),externalVal))))),(x+pow(externalVal,x))))+x))),externalVal),y))),audio(y,externalVal))-pow(max(externalVal,x),pow(sin(x),(y*y)))))",
            "b": "min(externalVal,pow(x,min((min(y,mod(tan(externalVal),externalVal))-externalVal),mod(externalVal,x))))",
            "g": "(externalVal*max(y,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(x,min(externalVal,y))",
            "b": "min(y,max((noise(tan(min(noise(y,(externalVal*x)),y)),cos(pow(tan(x),y)))*x),y))",
            "g": "max(y,y)"
          }
        }
      ],
      "timestamp": "22h:44m:54s"
    },
    {
      "generation": 2,
      "ascendantID": "40c8a8wg-jome-yhhg-hoyj-bcg37zm0zdpu",
      "id": "olfk1lf5-rwxf-y6wn-py0r-t0qbqkbzfe2o",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y*max(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio((x/sin(max(x,(noise(y,externalVal)*x)))),min(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+(externalVal/(y/noise(mod(externalVal,y),((externalVal-pow(audio(tan(mod(externalVal,x)),(cos(sin((y-x)))*(cos(max(x,(externalVal+externalVal)))-externalVal))),(pow(tan(y),noise(max((y/externalVal),externalVal),audio(sin(sin(externalVal)),cos(externalVal))))+x)))/externalVal)))))",
            "g": "(sin(x)/audio(noise(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(x)",
            "b": "((externalVal/cos((externalVal-y)))/y)",
            "g": "noise((externalVal-externalVal),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(cos(x)*audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)*audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x-(externalVal/(y*noise(mod(externalVal,y),((externalVal+noise(audio(tan(mod(externalVal,x)),(tan(sin((y-x)))/(cos(max(x,(externalVal+externalVal)))-externalVal))),(pow(cos(y),mod(max((y/externalVal),externalVal),mod(sin(sin(externalVal)),cos(externalVal))))+x)))/externalVal)))))",
            "g": "((x/tan((min((externalVal-y),y)+(y-x))))/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x-(externalVal/(y/noise(mod(externalVal,y),((externalVal+mod(audio(tan(mod(externalVal,x)),(tan(sin((y-x)))/(cos(max(x,(externalVal+externalVal)))-externalVal))),(pow(cos(y),noise(max((y/externalVal),externalVal),pow(sin(sin(externalVal)),cos(externalVal))))+x)))/externalVal)))))",
            "g": "(sin(x)/audio(max(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(y+(externalVal/sin(y)))",
            "g": "(sin(x)*audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(audio((mod((noise(x,x)*x),x)/audio(y,sin(noise(tan(mod((y*cos(x)),noise(sin(y),mod(cos(sin(pow(tan(sin(y)),x))),x)))),(y+cos(externalVal)))))),mod(externalVal,y))+(max((externalVal-max(externalVal,pow(tan(min(max(x,(x/x)),cos(audio(noise((externalVal-x),y),y)))),y))),audio(y,externalVal))*pow(max(externalVal,x),audio(sin(x),(y*y)))))",
            "b": "min(externalVal,pow(x,min((min(y,noise(max(externalVal,sin(y)),externalVal))+externalVal),pow(externalVal,x))))",
            "g": "(externalVal*noise(min(externalVal,x),(audio(y,x)-cos(sin((y-sin(externalVal)))))))"
          }
        }
      ],
      "timestamp": "22h:44m:55s"
    },
    {
      "generation": 3,
      "ascendantID": "olfk1lf5-rwxf-y6wn-py0r-t0qbqkbzfe2o",
      "id": "j2r442ou-929p-hym5-9jds-5ni2clogtxam",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y*max(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio((x/sin(max(x,(noise(y,externalVal)*x)))),min(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(audio((mod((noise(x,x)*x),x)/audio(y,sin(noise(tan(mod((y/cos(x)),max(sin(y),mod(cos(sin(pow(tan(sin(y)),x))),x)))),(y+cos(externalVal)))))),mod(externalVal,y))+(max((externalVal-max(externalVal,pow(tan(min(max(y,externalVal),sin(audio(noise((externalVal-x),y),y)))),y))),audio(y,externalVal))/pow(max(externalVal,x),audio(sin(x),(y/y)))))",
            "b": "min(externalVal,pow(x,min(min(externalVal,(x*x)),pow(externalVal,x))))",
            "g": "(externalVal*(externalVal-externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(y+(externalVal/sin(y)))",
            "g": "(sin(x)-audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x*(externalVal/(y/noise(mod(externalVal,y),((externalVal+mod(audio(tan(mod(externalVal,x)),(tan(sin((y-x)))/(cos(tan(x))-externalVal))),(pow(cos(y),mod(max((x*externalVal),externalVal),pow(sin(sin(externalVal)),cos(externalVal))))+x)))/externalVal)))))",
            "g": "sin(sin(x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y*min(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio((x/sin(max(x,(noise(y,externalVal)*x)))),min(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(cos(x)*audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        }
      ],
      "timestamp": "22h:44m:58s"
    },
    {
      "generation": 4,
      "ascendantID": "j2r442ou-929p-hym5-9jds-5ni2clogtxam",
      "id": "05oqxkzc-2c6h-ohtp-9yg1-asq78oc7clg4",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y*max(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio((x/sin(max(x,(noise(y,externalVal)*x)))),min(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-noise((externalVal/max(y,y)),x)))",
            "b": "cos((y-max(y,(audio(y,x)*x))))",
            "g": "(max(y,audio((x/sin(max(x,(noise(y,externalVal)-x)))),noise(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(y+(externalVal/cos(y)))",
            "g": "(sin(x)-audio((externalVal/externalVal),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max(max(x,externalVal),x)))",
            "b": "cos((y*min(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio(audio(min(x,noise(mod(y,externalVal),x)),y),min(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y*min(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio((x/sin(max(x,(noise(y,externalVal)*x)))),min(x,externalVal)))-externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+(externalVal/(y/mod(mod(externalVal,y),((externalVal-mod(audio(tan(mod(externalVal,x)),(cos(sin((y+x)))*(sin(max(x,(externalVal+externalVal)))-externalVal))),(pow(cos(y),noise(max((y*externalVal),externalVal),pow(sin(sin(externalVal)),tan(externalVal))))+x)))/externalVal)))))",
            "g": "(sin(x)*audio(min(x,min(mod(y,externalVal),y)),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-noise((externalVal/(externalVal-max((externalVal/max(y,y)),x))),x)))",
            "b": "cos((y*max(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio((x/(audio((x/sin(max(x,(noise(y,externalVal)*x)))),min(x,externalVal))/(mod(x,x)-noise(pow(noise(externalVal,x),(x-(y*x))),externalVal)))),min(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x-(externalVal/sin(y)))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(cos(x)*audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        }
      ],
      "timestamp": "22h:45m:1s"
    },
    {
      "generation": 5,
      "ascendantID": "05oqxkzc-2c6h-ohtp-9yg1-asq78oc7clg4",
      "id": "g7luqfu8-wqkm-chx4-a6lc-vko390v5pnst",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y*max(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio((x/sin(max(x,(noise(y,externalVal)*x)))),min(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-min((externalVal/(externalVal-max((externalVal/tan(y)),x))),x)))",
            "b": "sin((y*max(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio((x/(audio(sin(y),min(x,externalVal))/(pow(x,x)-noise(pow(noise(externalVal,x),(x-(y*x))),externalVal)))),min(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+(externalVal/(y/mod(mod(externalVal,y),((externalVal+mod(audio(tan(mod(externalVal,x)),(cos(sin((y+x)))*(sin(max(x,(externalVal+externalVal)))-externalVal))),(pow(cos(y),noise(tan((y*externalVal)),pow(sin(sin(externalVal)),tan(externalVal))))+x)))/externalVal)))))",
            "g": "(sin(x)*audio(min(x,min(mod(y,externalVal),y)),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-mod((externalVal/(externalVal-(y+min((externalVal/max(y,y)),x)))),x)))",
            "b": "cos(audio(y,x))",
            "g": "(min(externalVal,audio((x/(audio((x/sin(max(x,(x-(y*x))))),min(x,externalVal))/(mod(x,x)-noise(pow(noise(externalVal,x),(x+(y/x))),externalVal)))),noise(x,externalVal)))-externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y*max(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio((x/sin(max(x,(mod(y,externalVal)-x)))),min(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "sin((y*min(y,((x-min(externalVal,min(externalVal,(x*x))))*x))))",
            "g": "(min(externalVal,audio(externalVal,x))-externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+cos(externalVal))",
            "g": "(cos(x)*pow(min(x,noise(min(x,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/max(y,y))",
            "b": "cos((y-min(y,((audio(y,x)*x)*x))))",
            "g": "(max(y,audio((x/sin(max(x,(noise(y,externalVal)-x)))),(noise(y,externalVal)*x)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y*min(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio(sin(x),min(x,externalVal)))-externalVal)"
          }
        }
      ],
      "timestamp": "22h:45m:3s"
    },
    {
      "generation": 6,
      "ascendantID": "g7luqfu8-wqkm-chx4-a6lc-vko390v5pnst",
      "id": "gz3xf66y-0ykx-a9wx-na24-e2ixq737utwb",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y*max(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio((x/sin(max(x,(noise(y,externalVal)*x)))),min(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+cos(externalVal))",
            "g": "(cos(x)*pow(min(x,noise(min(x,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y-min(y,((audio(y,x)-x)*x))))",
            "g": "(max(y,audio((x/cos(tan(x))),(noise(y,externalVal)*x)))-externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/max(y,y))",
            "b": "cos((y-min(y,((audio(y,x)*x)*x))))",
            "g": "(max(y,audio((x/sin(max(x,(noise(y,externalVal)-x)))),(noise(y,externalVal)*x)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-noise((externalVal/(externalVal-(y+(externalVal-mod((externalVal/(externalVal-(y+min((externalVal/max(y,y)),x)))),x))))),x)))",
            "b": "cos(cos(audio(y,x)))",
            "g": "(min(externalVal,audio((x/(audio((x/sin(max(x,(x-(y*x))))),min(x,externalVal))/(mod(x,x)-noise(pow(noise(externalVal,x),(x+noise(externalVal,x))),externalVal)))),noise(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(externalVal)",
            "b": "cos((y*min(y,(audio(y,x)-x))))",
            "g": "(min(externalVal,audio(sin(x),min(x,externalVal)))*externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x+sin(externalVal))",
            "g": "(sin(x)/audio(min(x,noise(noise(y,externalVal),y)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/tan(y))",
            "b": "cos((y-min(y,((audio(y,x)*x)*x))))",
            "g": "(max(y,pow((x/(max(x,(noise(y,externalVal)-x))/(mod(x,x)-noise(mod(mod(externalVal,x),(x-(y*x))),externalVal)))),(noise(y,externalVal)*x)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-min((externalVal/(externalVal-max((externalVal/tan(y)),x))),x)))",
            "b": "((y*max(y,(audio(y,x)*x)))/y)",
            "g": "(max(externalVal,audio((x/(audio(cos(x),min(x,externalVal))/(pow(x,x)-noise(pow(noise(externalVal,x),(x-(y*x))),externalVal)))),min(x,externalVal)))+externalVal)"
          }
        }
      ],
      "timestamp": "22h:45m:6s"
    },
    {
      "generation": 7,
      "ascendantID": "gz3xf66y-0ykx-a9wx-na24-e2ixq737utwb",
      "id": "wrnxng3o-24oy-fcoj-4a3f-41bhpnsizrs0",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y*max(y,(audio(y,x)*x))))",
            "g": "(min(externalVal,audio((x/sin(max(x,(noise(y,externalVal)*x)))),min(x,externalVal)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(externalVal)",
            "b": "cos((y*min(y,(audio(y,x)+x))))",
            "g": "(min(externalVal,audio(sin(x),min(x,externalVal)))*externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/tan(y))",
            "b": "cos((y-min(y,((audio(y,x)/x)/x))))",
            "g": "(max(y,pow((x*(max(x,(noise(y,externalVal)-x))/(mod(x,x)+noise(mod(mod(externalVal,x),(x-(y*x))),externalVal)))),(noise(y,externalVal)*x)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+cos(externalVal))",
            "g": "(cos(x)*mod(min(x,noise(min(x,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-min((externalVal/(externalVal-max((externalVal/tan(y)),x))),x)))",
            "b": "cos((y-max(y,((audio(y,x)*x)*x))))",
            "g": "(tan(y)+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal*(externalVal-mod(y,max(x,externalVal))))",
            "b": "((y*max(y,pow(cos(externalVal),externalVal)))/y)",
            "g": "(tan(externalVal)+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(externalVal)",
            "b": "cos((y*min(y,(mod(x,audio(cos(x),x))-x))))",
            "g": "(min(externalVal,pow(sin(x),min(x,externalVal)))*externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+sin(externalVal))",
            "g": "(sin(x)/audio(min(x,noise(noise(y,externalVal),y)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal-max((externalVal/max(y,y)),x)))",
            "b": "cos((y*max(y,(tan(y)*x))))",
            "g": "(min(externalVal,audio(sin(x),min(x,externalVal)))+externalVal)"
          }
        }
      ],
      "timestamp": "22h:45m:8s"
    },
    {
      "generation": 8,
      "ascendantID": "wrnxng3o-24oy-fcoj-4a3f-41bhpnsizrs0",
      "id": "srg9sh1q-hiyi-p2lj-tsov-ryyyjkd8ntkf",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/tan(y))",
            "b": "cos((y-min(y,((audio(y,x)/x)/x))))",
            "g": "(max(y,pow((x*(max(x,(noise(y,externalVal)-x))/(mod(x,x)+noise(mod(mod(externalVal,x),(x-(y*x))),externalVal)))),(noise(y,externalVal)*x)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "(x+(externalVal/sin(y)))",
            "g": "(sin(x)/audio(min(x,noise(mod(y,externalVal),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/tan(y))",
            "b": "cos((y-min(y,(tan(y)*x))))",
            "g": "(max(y,(y-x))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+sin(externalVal))",
            "g": "(sin(x)/audio(min(x,noise(noise(y,externalVal),y)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/(externalVal+min((externalVal/(externalVal-cos(y))),x)))",
            "b": "cos((y-max(y,((pow(y,x)*x)*x))))",
            "g": "(cos(y)+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/tan(y))",
            "b": "cos((y-min(y,(sin(audio(y,x))/x))))",
            "g": "(max(y,mod((x*(max(x,(noise(y,externalVal)-x))/(mod(x,x)+mod(mod(noise(externalVal,x),(x-(y*x))),externalVal)))),(noise(y,externalVal)*x)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/tan(y))",
            "b": "cos((y-noise(y,((audio(y,x)/x)/x))))",
            "g": "(min(y,pow((x/(max(x,(noise(y,externalVal)-x))/(mod(x,x)+min(noise(mod(externalVal,x),(x-(y*x))),externalVal)))),(noise(y,externalVal)*x)))+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(externalVal)",
            "b": "cos((y*min(y,(audio(y,x)+x))))",
            "g": "(min(externalVal,audio(sin(x),min(x,externalVal)))*externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(externalVal)",
            "b": "tan(min(y,(audio(y,x)-x)))",
            "g": "(min(externalVal,audio(sin(x),min(x,externalVal)))*externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(x)",
            "b": "(x+sin(externalVal))",
            "g": "(sin(x)/audio(min(x,noise(noise(externalVal,externalVal),y)),y))"
          }
        }
      ],
      "timestamp": "22h:45m:18s"
    }
  ],
  "timestamp": "2023-11-2-22-44-46"
}