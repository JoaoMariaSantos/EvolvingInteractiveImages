{
  "id": "e0xipc4e-o9hq-fxfg-3ibo-l6l5evjqa051",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.20000000298023224,
    "populationSize": 10
  },
  "populations": [{
    "generation": 0,
    "id": "mi63j2k8-dbza-m14o-aztv-gak4rzffadd0",
    "individuals": [
      {
        "fitness": 0,
        "expressions": {
          "r": "(y/x)",
          "b": "(mod(externalVal,x)+y)",
          "g": "noise(max((externalVal*externalVal),mod(sin(sin(y)),y)),mod(y,audio(x,x)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(min(mod((externalVal-(y/x)),externalVal),tan(audio(externalVal,externalVal)))/audio(x,externalVal))",
          "b": "min(cos(x),sin((y/cos(mod(((y-(tan((min(x,noise(noise(y,noise(externalVal,max((pow(mod(x,y),max((x+x),noise(x,y)))/externalVal),externalVal))),y))+(x/audio(x,y))))-y))/(cos(tan(cos(y)))+externalVal)),audio(x,y))))))",
          "g": "(externalVal+externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(y/(x-y))",
          "b": "noise(max(cos(tan(y)),externalVal),externalVal)",
          "g": "pow(y,audio(tan(sin(y)),noise(sin(externalVal),noise(min(externalVal,x),min(cos(externalVal),noise(externalVal,externalVal))))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(x+y)",
          "b": "max(audio(y,sin(x)),(x+y))",
          "g": "tan(x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(pow(min(x,noise(sin(audio(y,tan(externalVal))),min(externalVal,(audio((y+x),noise(mod(externalVal,min(tan(max(x,externalVal)),y)),max((x-y),(cos(x)*x))))/mod(externalVal,mod(tan((externalVal/y)),y)))))),externalVal)-x)",
          "b": "pow(sin(((y+externalVal)*externalVal)),(y*audio(externalVal,externalVal)))",
          "g": "(max(max(externalVal,max(y,x)),(x+y))/(y*(audio(y,x)*x)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(externalVal)",
          "b": "noise(externalVal,x)",
          "g": "((x*y)/externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(y,x)",
          "b": "(min(audio(y,(x+sin(y))),x)/(((max(x,externalVal)-externalVal)+y)+((externalVal+audio(tan(externalVal),(noise(y,x)/x)))*y)))",
          "g": "cos(externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "((externalVal/sin(mod(externalVal,mod(pow(pow(mod(externalVal,cos(max((x/externalVal),x))),sin(y)),(y-externalVal)),noise(externalVal,((tan(x)*externalVal)-x))))))*cos(min(x,externalVal)))",
          "b": "tan(((externalVal+x)*x))",
          "g": "cos(tan(((externalVal+y)/max(x,mod(externalVal,externalVal)))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan(externalVal)",
          "b": "(noise(pow(externalVal,x),y)-y)",
          "g": "min(externalVal,x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max((sin(externalVal)*pow(sin(audio(externalVal,(externalVal*noise((((pow(x,(externalVal/(externalVal-noise(mod(cos(x),externalVal),(noise(externalVal,y)*tan(y))))))-tan(mod(externalVal,((x*cos(min(sin(y),externalVal)))/x))))/pow(y,externalVal))/mod(max(min(y,tan(y)),pow(y,noise(y,sin((x-(x-mod((x/y),externalVal))))))),min(tan(mod(noise(((x/pow(x,x))+externalVal),pow(externalVal,x)),x)),cos(tan(y))))),x)))),(pow((mod(y,sin((sin(audio(externalVal,min(x,max(((x*(externalVal/sin(x)))/externalVal),pow(externalVal,externalVal)))))+sin(x))))/pow(x,noise(externalVal,pow((x-y),(y/(max(externalVal,min(y,(audio(pow(x,(max(y,y)+externalVal)),x)+y)))/externalVal)))))),y)-((x/externalVal)-y)))),x)",
          "b": "tan(max(min(externalVal,y),(mod(externalVal,((((externalVal*max((externalVal/externalVal),x))+externalVal)-(externalVal*sin(y)))+cos(pow(y,tan(mod(sin(tan(y)),x))))))-y)))",
          "g": "noise(externalVal,(y-pow(y,sin(mod(y,(externalVal-y))))))"
        }
      }
    ],
    "timestamp": "22h:38m:2s"
  }],
  "timestamp": "2023-11-2-22-38-2"
}