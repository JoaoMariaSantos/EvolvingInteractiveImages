{
  "id": "1lmobsxq-5a7f-q2ys-h1ob-gqh8xp5uu3g1",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.20000000298023224,
    "populationSize": 10
  },
  "populations": [{
    "generation": 0,
    "id": "vgbv0mji-i2jz-r334-fb36-q43c32aa8vhm",
    "individuals": [
      {
        "fitness": 0,
        "expressions": {
          "r": "(mod(y,(sin(min(pow((max(y,x)+y),x),max(x,y)))-externalVal))-x)",
          "b": "(max((x-(x*max(mod((noise((audio(y,externalVal)/noise(max(y,tan(((externalVal-externalVal)*y))),externalVal)),x)-x),(cos(tan(externalVal))-y)),noise(externalVal,sin(externalVal))))),externalVal)-max(y,tan(x)))",
          "g": "cos(externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(noise(x,externalVal))",
          "b": "min(noise(externalVal,pow(y,y)),y)",
          "g": "(mod(noise(y,x),pow(audio(externalVal,x),cos((y+((x+x)+y)))))/min(externalVal,mod(externalVal,cos(x))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(audio((x/audio(min(y,x),y)),sin(y)),cos(x))",
          "b": "(externalVal/(externalVal+x))",
          "g": "min(noise(y,cos(cos(max(mod((mod(audio(externalVal,externalVal),noise(externalVal,min(x,externalVal)))/y),x),(y-y))))),x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "mod(x,y)",
          "b": "cos(audio(max(y,y),y))",
          "g": "(x-y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(y)",
          "b": "min(cos(y),y)",
          "g": "((externalVal+(x+x))-y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(externalVal/externalVal)",
          "b": "audio(x,mod(externalVal,(x+x)))",
          "g": "cos(audio((externalVal-x),sin(mod(y,pow(min(min(externalVal,max((noise(cos(x),(tan(x)-x))+externalVal),externalVal)),audio(externalVal,(x*(tan(externalVal)/x)))),y)))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "audio(y,externalVal)",
          "b": "tan(y)",
          "g": "(y+y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(mod((x+sin(noise(externalVal,x))),(y/((tan(mod(externalVal,(y/externalVal)))+noise(tan(pow(y,(externalVal-y))),x))+mod((sin((min(externalVal,pow(y,max(x,(noise(x,mod(cos(audio(x,min(cos(cos(noise(x,(x+externalVal)))),tan(pow(x,((externalVal/x)-y)))))),cos((y*(noise(externalVal,externalVal)+x)))))*x))))/pow(noise(audio(pow(y,max((sin((sin(externalVal)*y))+noise((y-tan(mod(externalVal,pow(sin(x),x)))),max(externalVal,externalVal))),audio(max(noise(noise(y,(externalVal+externalVal)),tan(pow((noise(externalVal,cos((cos(noise(x,y))*noise(x,pow(noise(y,audio(sin(mod(pow((x*y),(y/y)),y)),(mod((tan(externalVal)-pow(x,y)),audio((x+x),audio(externalVal,y)))-externalVal))),(noise(x,x)*y))))))-externalVal),tan(x)))),y),externalVal))),pow((noise(x,noise(y,externalVal))*tan(noise((sin(pow(mod(x,y),y))+(mod(pow(((externalVal/externalVal)-tan(x)),mod(x,max(externalVal,(x+sin(max((((max(x,externalVal)*noise(min((x*externalVal),(x*y)),max(pow(externalVal,externalVal),min(externalVal,externalVal))))-x)+max(x,y)),y)))))),(max(audio(min(min(externalVal,audio(externalVal,(y/mod(y,x)))),noise(externalVal,(x-externalVal))),tan(x)),y)-externalVal))*max(externalVal,noise((externalVal*noise(externalVal,x)),noise(audio((tan(noise(y,audio(audio(externalVal,sin(x)),y)))/noise(y,y)),y),min(cos(externalVal),audio(x,audio(tan(noise(min(y,(mod(externalVal,externalVal)-y)),x)),x)))))))),audio(externalVal,y)))),externalVal)),max(pow(x,externalVal),min(y,(externalVal*cos(pow(noise(x,externalVal),x)))))),(x-min(y,(cos(externalVal)+y))))))+externalVal),x))))+externalVal)",
          "b": "min(x,noise(y,cos(x)))",
          "g": "mod(x,max(tan(cos(sin(externalVal))),pow(x,externalVal)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "((sin(x)/x)/max(y,externalVal))",
          "b": "pow((x*cos(noise(pow(x,(externalVal-x)),y))),x)",
          "g": "sin((mod(min((y/mod(externalVal,max(mod(min(tan(pow(sin(y),externalVal)),y),x),tan(min(max(cos(mod(cos(externalVal),(y+(max(x,tan(x))+x)))),y),noise(y,x)))))),y),audio(y,x))*externalVal))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(externalVal)",
          "b": "min(noise(y,cos(y)),externalVal)",
          "g": "pow(x,noise((y*x),x))"
        }
      }
    ],
    "timestamp": "22h:36m:24s"
  }],
  "timestamp": "2023-11-2-22-36-24"
}