{
  "id": "pfk1qgbt-icxk-2xf9-54ku-11mbawvyipfy",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 1,
    "tournamentSize": 3,
    "mutationRate": 0.4000000059604645,
    "populationSize": 12
  },
  "populations": [
    {
      "generation": 0,
      "id": "ybxjb97m-iy6h-oooq-3xfo-zqu2txymk7lr",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "(x/cos(externalVal))",
            "b": "pow(y,externalVal)",
            "g": "noise((x*x),pow(y,y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(max(cos(y),(max(x,min(cos(y),x))/max(pow((externalVal-x),y),noise(max((audio(externalVal,x)/x),externalVal),x)))),externalVal)",
            "b": "tan((y*externalVal))",
            "g": "tan(audio(tan(x),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(cos(externalVal),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))-(pow((mod(y,noise(pow(((externalVal/y)+externalVal),(x*(audio(max(x,externalVal),mod(y,externalVal))-y))),cos(y)))*externalVal),externalVal)-sin(externalVal)))",
            "g": "audio(x,audio((y*(x*x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(externalVal,y)",
            "b": "noise(x,noise(x,max(tan(max(noise(y,max(tan((x-audio(externalVal,y))),externalVal)),externalVal)),(externalVal-((externalVal*y)/x)))))",
            "g": "max(x,(noise(x,x)/mod(x,(max((max(y,min(y,y))/tan(x)),x)+max((y/y),y)))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "min(x,externalVal)",
            "g": "min(min(x,audio(min((audio(pow(min((sin(audio(y,cos(y)))*x),tan(min(y,x))),y),y)/cos(externalVal)),externalVal),noise(y,externalVal))),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y+mod((x/externalVal),x))",
            "b": "pow(sin(x),x)",
            "g": "min(externalVal,y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal+y)",
            "b": "min((x/(externalVal-noise(externalVal,x))),sin(min(max(x,(y/mod(externalVal,min(noise((y+pow(noise(((y/pow(y,cos((((tan(cos(externalVal))/(y-y))*noise(y,sin(mod(x,max(externalVal,(externalVal+noise((sin((externalVal/x))*x),x)))))))*externalVal))))+externalVal),y),externalVal)),((sin(y)-(mod(y,x)/noise(x,externalVal)))*(tan((noise(sin(x),y)*(y/y)))*noise((sin(noise(y,externalVal))-sin(x)),max(mod(x,x),(pow(externalVal,x)/max((audio(min(mod((externalVal+x),cos(externalVal)),tan(x)),sin(pow(externalVal,min(tan(x),y))))+max(externalVal,(externalVal/(cos(tan(mod(cos(y),externalVal)))-x)))),(sin(x)/y)))))))),y)))),mod(max(pow(pow(min(x,x),y),y),y),(externalVal-x)))))",
            "g": "(x+sin(tan(max(x,(x/audio(noise(externalVal,tan(x)),externalVal))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(y,x)",
            "b": "min((x+noise((mod(externalVal,x)-sin(externalVal)),y)),y)",
            "g": "cos((min(x,pow(audio(pow(externalVal,noise((y+pow(max(externalVal,x),cos((y*(externalVal-tan(x)))))),(noise(externalVal,x)-cos(cos(mod(sin(externalVal),(tan(noise(noise(min(mod((externalVal+audio(x,tan(x))),mod(x,noise(externalVal,x))),x),y),x))+externalVal))))))),externalVal),y))+x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal/externalVal)",
            "b": "pow(tan(y),externalVal)",
            "g": "mod(mod(noise((y-x),externalVal),audio((max(tan(min(mod(max(tan(externalVal),externalVal),externalVal),y)),noise(cos(y),(y-(x-((y-x)+x)))))-x),externalVal)),(y-audio(audio(y,x),x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(x/y)",
            "b": "pow((sin(y)+externalVal),noise(y,((((x/tan(mod(externalVal,x)))-y)+cos(y))-sin(x))))",
            "g": "mod((x/y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(x,pow((externalVal-tan(externalVal)),x))",
            "b": "(y*externalVal)",
            "g": "audio(cos(max((y/min(x,(max(x,tan(max(min(min(pow((x/y),sin((y+(cos(cos(y))-cos(y))))),y),x),(x*externalVal))))*tan(externalVal)))),x)),min(y,y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(y,externalVal)",
            "b": "(y*sin(y))",
            "g": "sin(noise(externalVal,min(y,y)))"
          }
        }
      ],
      "timestamp": "19h:6m:50s"
    },
    {
      "generation": 1,
      "ascendantID": "ybxjb97m-iy6h-oooq-3xfo-zqu2txymk7lr",
      "id": "jhrt5cc0-nhc2-v9xz-ony9-hhzd5dt1de5t",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal+y)",
            "b": "min((x/(externalVal-noise(externalVal,x))),sin(min(max(x,(y/mod(externalVal,min(noise((y+pow(noise(((y/pow(y,cos((((tan(cos(externalVal))/(y-y))*noise(y,sin(mod(x,max(externalVal,(externalVal+noise((sin((externalVal/x))*x),x)))))))*externalVal))))+externalVal),y),externalVal)),((sin(y)-(mod(y,x)/noise(x,externalVal)))*(tan((noise(sin(x),y)*(y/y)))*noise((sin(noise(y,externalVal))-sin(x)),max(mod(x,x),(pow(externalVal,x)/max((audio(min(mod((externalVal+x),cos(externalVal)),tan(x)),sin(pow(externalVal,min(tan(x),y))))+max(externalVal,(externalVal/(cos(tan(mod(cos(y),externalVal)))-x)))),(sin(x)/y)))))))),y)))),mod(max(pow(pow(min(x,x),y),y),y),(externalVal-x)))))",
            "g": "(x+sin(tan(max(x,(x/audio(noise(externalVal,tan(x)),externalVal))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal+y)",
            "b": "min((x/(externalVal-min(externalVal,x))),sin(min(tan(x),mod(max(pow(pow(noise(x,x),y),y),y),(externalVal-x)))))",
            "g": "(x+sin(tan(max(x,(x/audio(min(externalVal,max(x,externalVal)),externalVal))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-y)",
            "b": "min((x/(externalVal+noise(externalVal,x))),sin(min(max(x,(x*mod(externalVal,max(mod((y+audio(noise(((y/pow(y,cos((((max(cos(externalVal),(x/min((min(x,sin(min(sin(y),cos(pow(y,cos(min(externalVal,externalVal)))))))-externalVal),((y*x)/(max((pow(audio(y,y),x)/y),externalVal)-noise(max(pow(externalVal,externalVal),(x+y)),max(x,sin(pow((externalVal/x),min(((externalVal-x)*max(x,x)),x))))))))))/(y-y))*noise(y,sin(mod(x,max(externalVal,(externalVal-noise((sin((externalVal/x))*x),x)))))))*externalVal))))+externalVal),y),externalVal)),((sin(y)-sin(noise(y,x)))/(tan((noise(sin(x),x)*(y/y)))*noise((sin(min(y,externalVal))-sin(x)),tan(noise(x,x)))))),y)))),mod(tan(pow(pow(min(x,x),y),y)),(externalVal-x)))))",
            "g": "(x+sin(cos(max(x,(x/audio(noise(externalVal,tan(x)),externalVal))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal+y)",
            "b": "min((x/(externalVal-noise(externalVal,x))),sin(min(min(x,(x*mod(externalVal,min(noise((y+pow(noise(((y/pow(y,tan((((tan(cos(externalVal))*(y-y))*noise(y,sin(pow(x,max(externalVal,(externalVal-noise((cos((externalVal/x))*x),x)))))))/externalVal))))+externalVal),y),externalVal)),((sin(y)-(mod(y,x)/noise(x,externalVal)))*(tan((noise(sin(x),y)*sin(y)))*noise((sin(noise(y,externalVal))*(x/x)),max(mod(x,x),sin(pow(externalVal,x))))))),y)))),noise(max(audio(mod(min(x,x),y),x),y),(externalVal-x)))))",
            "g": "(x+sin(tan(min(x,(x*audio(noise(externalVal,max(x,externalVal)),externalVal))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(x/y)",
            "b": "pow((sin(y)-externalVal),noise(y,((((x/max(mod(externalVal,x),y))*y)+sin(y))-cos(x))))",
            "g": "mod((x/y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal+y)",
            "b": "min((x/(externalVal-noise(externalVal,x))),sin(max(max(x,(x*noise(externalVal,min(mod((y+pow(noise(((y/pow(y,cos((((tan(sin(externalVal))/(y-y))*noise(y,sin(pow(x,max(externalVal,(externalVal+mod((sin((externalVal/x))*x),x)))))))*externalVal))))+externalVal),y),externalVal)),(((externalVal/tan(x))-(mod(y,x)/noise(x,externalVal)))*(tan(sin(mod(cos(x),y)))*noise((sin(noise(y,externalVal))-sin(x)),max(mod(x,x),(pow(externalVal,x)/max((pow(min(mod((externalVal+x),tan(externalVal)),tan(x)),sin(pow(externalVal,min(min(x,y),externalVal))))+min(externalVal,(externalVal/(cos(cos(mod(cos(y),externalVal)))-x)))),(cos(x)*y)))))))),y)))),mod(tan(pow(pow(min(x,x),y),y)),(externalVal-x)))))",
            "g": "(x+(max(tan(x),x)/sin(externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(externalVal,y)",
            "b": "noise(x,noise(x,max(tan(max((mod(externalVal,x)-sin(externalVal)),externalVal)),(externalVal*((externalVal*y)/x)))))",
            "g": "max(x,(noise(x,x)/mod(x,(max(((y+mod(min(externalVal,x),cos((x*(externalVal-tan(x))))))/tan(x)),x)-min((y/y),y)))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(x,pow((externalVal*tan(externalVal)),x))",
            "b": "(y*externalVal)",
            "g": "pow(cos(max((y/max(x,(max(x,tan(tan(min(min(pow((x*y),sin((y+(cos(tan(x))+cos(y))))),y),x))))*cos(externalVal)))),x)),min(y,y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(y,externalVal)",
            "b": "(y*(mod(externalVal,x)-sin(externalVal)))",
            "g": "cos(tan(noise(noise(max(mod((externalVal+audio(x,tan(x))),mod(x,mod(externalVal,x))),x),y),x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(tan(externalVal),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))-(pow((mod(y,noise(pow(((externalVal/y)+externalVal),(x*(audio(min(x,externalVal),mod(y,externalVal))-y))),cos(y)))/externalVal),externalVal)+sin(externalVal)))",
            "g": "pow(x,audio((y*(x*(tan(sin(externalVal))*y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(x/y)",
            "b": "pow((sin(y)+externalVal),mod(y,(((sin(x)+externalVal)+tan(y))-sin(x))))",
            "g": "mod(sin(x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(y,externalVal)",
            "b": "(y*sin(y))",
            "g": "sin(noise(externalVal,min(externalVal,y)))"
          }
        }
      ],
      "timestamp": "19h:7m:0s"
    },
    {
      "generation": 2,
      "ascendantID": "jhrt5cc0-nhc2-v9xz-ony9-hhzd5dt1de5t",
      "id": "8wrl9hbn-yp11-rask-f647-wab5afajl5hr",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(tan(externalVal),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))-(pow((mod(y,noise(pow(((externalVal/y)+externalVal),(x*(audio(min(x,externalVal),mod(y,externalVal))-y))),cos(y)))/externalVal),externalVal)+sin(externalVal)))",
            "g": "pow(x,audio((y*(x*(tan(sin(externalVal))*y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(tan(externalVal),tan(externalVal))",
            "b": "((tan(externalVal)-max(x,y))-(pow((mod(y,noise(pow(((externalVal/y)+externalVal),(x*(audio(min(x,externalVal),audio(externalVal,externalVal))-externalVal))),cos(y)))/externalVal),externalVal)+(externalVal/mod(tan(tan(y)),tan((x/externalVal))))))",
            "g": "pow(x,audio((y*(x*(tan(sin(externalVal))*y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(pow((mod(y,noise(mod((sin(externalVal)+externalVal),(x-(audio(min(x,externalVal),mod(y,externalVal))-y))),cos(y)))/externalVal),externalVal)+sin(externalVal)))",
            "g": "audio(x,audio((y*(x*(max(sin(externalVal),y)*y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(externalVal,y)",
            "b": "min(x,noise(x,max(tan(max((mod(externalVal,x)-sin(externalVal)),externalVal)),(externalVal*sin((externalVal-y))))))",
            "g": "max(x,(noise(x,x)/noise(x,(max(((y+mod(min(externalVal,x),cos((x*(externalVal-tan(x))))))/tan(x)),x)-min((y/y),y)))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal+y)",
            "b": "min(sin(x),(max(tan(x),mod(max(pow(pow(min(x,x),y),y),y),(externalVal-x)))/(y*tan(cos(y)))))",
            "g": "(x+sin(max(cos(x),x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(tan(externalVal),tan(externalVal))",
            "b": "((cos(externalVal)-tan(x))-((sin(y)*(mod(y,x)/noise(x,externalVal)))+sin(externalVal)))",
            "g": "pow(x,audio((y/(x*(tan(tan(externalVal))-y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal+y)",
            "b": "min(cos(x),sin(min(max(x,(x*noise(externalVal,max(pow((y+audio(noise(((y*pow(y,cos((((max(cos(externalVal),(x/min((min(x,sin(min((y*noise(externalVal,y)),cos(pow(y,cos(min(externalVal,externalVal)))))))*externalVal),cos((y*x)))))-(y-y))*noise(y,sin(mod(x,max(externalVal,(externalVal-noise((sin((externalVal/x))*x),x)))))))*externalVal))))+externalVal),y),externalVal)),((sin(y)-(noise(y,x)/mod(x,externalVal)))/(tan((noise(sin(x),x)*(y/y)))*noise((sin(noise(y,externalVal))-(x/x)),max(noise(x,x),(pow(externalVal,x)*max((audio(min(mod(tan(x),sin(externalVal)),tan(x)),sin(pow(externalVal,min(max(x,y),y))))+max(externalVal,(externalVal/(cos(max(mod(tan(y),externalVal),pow(x,x)))*x)))),(sin(x)/y)))))))),y)))),pow(tan(pow(pow(min(x,x),y),y)),(externalVal-x)))))",
            "g": "(x+sin(cos(max(x,(x/audio(noise(externalVal,tan(x)),externalVal))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "pow((sin(y)-externalVal),mod(y,(((sin(x)+externalVal)+tan(y))-cos(x))))",
            "g": "mod(sin(x),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-y)",
            "b": "min((x/(externalVal+noise(externalVal,x))),sin(min(max(x,(x/mod(externalVal,max(mod((y+audio(min(((y/mod(y,cos((((max(cos(externalVal),(x/min((min(x,sin(noise(sin(y),cos(audio(y,cos(min(externalVal,externalVal)))))))-externalVal),((y*x)/(max((pow(audio(y,y),x)/y),externalVal)+noise(max(pow(externalVal,externalVal),(x+y)),max(x,sin(pow((externalVal/x),min(((externalVal-x)-tan(x)),x))))))))))/(y-y))*noise(y,(mod(y,max(externalVal,(externalVal-noise((sin((externalVal/x))*x),x))))/min(y,min(y,min(externalVal,x))))))*externalVal))))+externalVal),y),externalVal)),((sin(y)*(pow(y,x)/pow(x,externalVal)))/(tan((noise(sin(y),x)*(y/y)))*noise(((noise(y,externalVal)*x)-sin(x)),tan(noise(x,x)))))),y)))),mod(tan(pow(pow(min(x,x),y),y)),(externalVal-x)))))",
            "g": "(x+sin(cos(max(x,(x/audio(noise(externalVal,cos(x)),y))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(y,externalVal)",
            "b": "(y*(y-externalVal))",
            "g": "cos(min(mod((x*y),sin((y+(cos(cos(x))+cos(y))))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(y,externalVal)",
            "b": "(y*((externalVal-min(externalVal,x))-(externalVal/externalVal)))",
            "g": "cos(tan(noise(mod(externalVal,y),x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "pow((sin(y)-externalVal),noise(y,(tan(tan(y))*cos(x))))",
            "g": "mod((x/y),x)"
          }
        }
      ],
      "timestamp": "19h:7m:6s"
    },
    {
      "generation": 3,
      "ascendantID": "8wrl9hbn-yp11-rask-f647-wab5afajl5hr",
      "id": "n2wb5gv2-ujgr-8fxj-ux7v-mo8af0lvrnqq",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(pow((mod(y,noise(mod((sin(externalVal)+externalVal),(x-(audio(min(x,externalVal),mod(y,externalVal))-y))),cos(y)))/externalVal),externalVal)+sin(externalVal)))",
            "g": "audio(x,audio((y*(x*(max(sin(externalVal),y)*y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(max(externalVal,x),max(externalVal,cos(externalVal)))",
            "b": "((cos(externalVal)-max(x,y))-(mod(sin(mod(y,noise(pow(((externalVal/y)+externalVal),(x/(audio(min(x,externalVal),mod(y,externalVal))-y))),cos(y)))),y)+tan(y)))",
            "g": "pow(x,audio((y*(x*(tan(sin(externalVal))-y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(y,externalVal)",
            "b": "(y*(y-externalVal))",
            "g": "cos(min(mod((x-y),sin((y+(cos(cos(x))+tan(y))))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(mod((pow(y,noise(mod((sin(externalVal)+externalVal),(x-(audio(min(x,externalVal),pow(y,externalVal))-y))),sin(y)))/externalVal),externalVal)-sin(y)))",
            "g": "audio(x,audio((y*(x*(max(sin(externalVal),y)/y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,externalVal)",
            "b": "(y*cos(max((min(externalVal,x)-sin(externalVal)),externalVal)))",
            "g": "cos(tan(x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(cos(externalVal),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(mod((mod(y,noise(mod((sin(externalVal)+externalVal),(x-(audio(min(x,externalVal),mod(y,externalVal))-y))),cos(y)))/externalVal),externalVal)+cos(y)))",
            "g": "audio(x,audio((y-(x*(max(sin(externalVal),y)*y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(cos(y),tan(externalVal))",
            "b": "((tan(externalVal)-max(x,y))+(pow((mod(y,mod(mod((sin(externalVal)+externalVal),(x-(pow(min(x,externalVal),mod(y,y))+externalVal))),cos(y)))/externalVal),externalVal)+sin(externalVal)))",
            "g": "audio(x,audio((y/(x*(max(sin(externalVal),y)*y))),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(cos(y),max(externalVal,max(externalVal,(x+pow(y,(externalVal*pow(externalVal,tan(audio(externalVal,y)))))))))",
            "b": "((max(externalVal,(y*min(mod(externalVal,x),max(cos(noise(x,cos(y))),max(x,x)))))-tan(x))+(mod(sin(mod(externalVal,noise(pow((sin(externalVal)+externalVal),(x-(audio(max(x,externalVal),mod(y,externalVal))-externalVal))),cos(y)))),externalVal)+sin(externalVal)))",
            "g": "audio(x,audio((y*(x/(max(((x*noise(min(y,x),x))-y),y)*y))),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "pow((((max(cos(externalVal),(x/noise((min(x,sin(noise(sin(externalVal),cos(audio(y,cos(min(externalVal,externalVal)))))))-externalVal),((y*x)/(max((pow(audio(y,y),x)/y),externalVal)-noise(max(pow(externalVal,externalVal),(x+y)),tan(x)))))))/(y+x))*min(x,sin(pow(x,max(externalVal,(externalVal*noise((sin((externalVal/x))*x),x)))))))*externalVal),noise(y,(tan(tan(y))*cos(x))))",
            "g": "mod((x/y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "pow((sin(y)+externalVal),noise(y,(cos(tan(y))*cos(x))))",
            "g": "mod((x/y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(tan(externalVal),cos(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+((sin(y)*(mod(y,x)/mod(x,externalVal)))+sin(externalVal)))",
            "g": "pow(x,audio((y/(x*(tan(tan(externalVal))-y))),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)*max(x,y))+(mod((mod(y,noise(mod(((externalVal/y)+externalVal),(x+(audio(min(x,externalVal),mod(y,externalVal))-y))),cos(y)))/externalVal),externalVal)+sin(y)))",
            "g": "audio(x,audio((y*(x*(max((externalVal/externalVal),y)/y))),y))"
          }
        }
      ],
      "timestamp": "19h:7m:18s"
    },
    {
      "generation": 4,
      "ascendantID": "n2wb5gv2-ujgr-8fxj-ux7v-mo8af0lvrnqq",
      "id": "mncqr3o1-396t-8ftj-z5mv-2q3tw2tafdt2",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(mod((pow(y,noise(mod((sin(externalVal)+externalVal),(x-(audio(min(x,externalVal),pow(y,externalVal))-y))),sin(y)))/externalVal),externalVal)-sin(y)))",
            "g": "audio(x,audio((y*(x*(max(sin(externalVal),y)/y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(externalVal),max(externalVal,max(externalVal,(x+pow(y,(externalVal*pow(externalVal,tan(audio(externalVal,y)))))))))",
            "b": "((max(externalVal,(y*min(noise(externalVal,x),min(cos(noise(x,cos(y))),max(x,x)))))-tan(x))+(pow(sin(noise(externalVal,min(pow((sin(externalVal)+externalVal),(x-(audio(max(x,externalVal),mod(y,externalVal))-externalVal))),cos(y)))),externalVal)+sin(externalVal)))",
            "g": "audio(x,audio((y*(x/(max(((x*noise(sin(externalVal),x))*y),y)*y))),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(max(externalVal,x),max(externalVal,cos(externalVal)))",
            "b": "((cos(externalVal)-max(x,y))-(pow((pow(y,mod(mod(((externalVal/y)-externalVal),(x/(mod(min(x,externalVal),mod(y,externalVal))*y))),cos(y)))/externalVal),y)-tan(externalVal)))",
            "g": "pow(x,audio((y*(x*(tan(sin(externalVal))-externalVal))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,externalVal)",
            "b": "(y*cos(max((min(externalVal,x)-sin(externalVal)),externalVal)))",
            "g": "tan(max(x,(externalVal/externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(tan(y),max(externalVal,tan(externalVal)))",
            "b": "((cos(externalVal)-max(x,y))-(mod(sin(pow(y,noise(mod((sin(externalVal)+externalVal),(x-(audio(min(x,externalVal),pow(y,y))-y))),sin(y)))),externalVal)-sin(y)))",
            "g": "audio(x,audio((y*audio((y-(y*(max(sin(externalVal),y)*y))),y)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "pow((((max(cos(externalVal),(x/noise((min(x,(min(sin(externalVal),cos(audio(y,cos(min(externalVal,externalVal)))))/max(pow(externalVal,externalVal),y)))*externalVal),((y*x)/(min(sin(pow(audio(y,y),x)),externalVal)-noise(tan(pow(externalVal,externalVal)),max(x,sin(mod(sin(externalVal),min(((externalVal-x)-tan(x)),x))))))))))/(y+x))*min(x,(pow(x,max(externalVal,(externalVal*noise((cos((externalVal/x))*x),x))))*min(y,noise(y,noise(y,x))))))*externalVal),noise(y,(tan(tan(y))*cos(x))))",
            "g": "pow((x*y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(pow(sin(mod(y,noise(mod((sin(externalVal)+externalVal),(x-(audio(min(x,externalVal),mod(y,externalVal))*y))),cos(y)))),externalVal)+sin(externalVal)))",
            "g": "pow(x,audio((y*(x*(min(sin(externalVal),y)*y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(pow((pow(y,noise(noise((sin(externalVal)+externalVal),(x*(audio(min(x,externalVal),pow(y,externalVal))-y))),tan(y)))/externalVal),externalVal)-sin(y)))",
            "g": "audio(x,audio((y*(y/(max(sin(externalVal),y)/y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(max(externalVal,x),noise(y,externalVal))",
            "b": "((cos(externalVal)-max(x,y))-(mod(cos(mod(y,noise(mod(((externalVal*y)+externalVal),sin(x)),cos(y)))),y)+tan(y)))",
            "g": "pow(y,audio((y*(y-(tan(((y+(cos(cos(x))+tan(y)))/min(externalVal,y)))-y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "pow((sin(y)+externalVal),(cos(externalVal)-max(x,y)))",
            "g": "mod(audio((y*(x-sin(max(sin(externalVal),x)))),y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(cos(y),cos(externalVal))",
            "b": "((cos(externalVal)-tan(x))-((sin(y)*(mod(y,x)/mod(x,externalVal)))+sin(externalVal)))",
            "g": "pow(x,audio((x*max(sin(externalVal),y)),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(cos(y),max(externalVal,max(externalVal,(x+mod(y,(externalVal*mod(externalVal,tan(audio(externalVal,y)))))))))",
            "b": "((max(externalVal,(y*min(mod(externalVal,x),max(cos(noise(x,cos(y))),max(x,x)))))*tan(x))+(mod(sin(pow(externalVal,noise(pow((sin(externalVal)+externalVal),(x-(audio(max(x,externalVal),mod(y,externalVal))-externalVal))),cos(y)))),externalVal)+sin(externalVal)))",
            "g": "audio(x,pow((y*(x/(max(((y*noise(min(y,x),x))-y),y)*y))),x))"
          }
        }
      ],
      "timestamp": "19h:7m:24s"
    },
    {
      "generation": 5,
      "ascendantID": "mncqr3o1-396t-8ftj-z5mv-2q3tw2tafdt2",
      "id": "baled1c4-dbvf-6btl-ui2m-hp45xqa9ky10",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(mod((pow(y,noise(mod((sin(externalVal)+externalVal),(x-(audio(min(x,externalVal),pow(y,externalVal))-y))),sin(y)))/externalVal),externalVal)-sin(y)))",
            "g": "audio(x,audio((y*(x*(max(sin(externalVal),y)/y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "pow(((y/externalVal)+externalVal),(cos(externalVal)-min(x,y)))",
            "g": "mod(audio((y*(x-cos((x*y)))),y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(max(externalVal,x),tan(externalVal))",
            "b": "((cos(externalVal)+max(x,y))-(pow((pow(y,mod(mod(((externalVal/y)-externalVal),(x/(pow(min(x,externalVal),noise(y,externalVal))*y))),cos(y)))*externalVal),y)-tan(externalVal)))",
            "g": "pow(x,pow(tan(externalVal),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(externalVal),max(externalVal,max(externalVal,(x+pow(y,(externalVal/audio(externalVal,cos(audio(externalVal,y)))))))))",
            "b": "((max(externalVal,(y*min(mod(externalVal,x),min(cos(noise(x,cos(y))),max(x,x)))))-tan(x))+(pow(sin(noise(externalVal,min(audio((sin(externalVal)-externalVal),(x-(audio(max(x,externalVal),mod(y,y))-externalVal))),cos(y)))),externalVal)+sin(externalVal)))",
            "g": "pow(x,audio((y/(x/(max(((y*(y-(max(((y+(cos(cos(x))+max(y,pow(mod(x,externalVal),externalVal))))/max(externalVal,y)),y)-y)))*y),y)*y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "mod((sin(y)+externalVal),(cos(externalVal)-max(x,y)))",
            "g": "mod(audio((y-(x+sin(max(sin(externalVal),x)))),y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(max(externalVal,x),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))-(pow((pow(y,mod(mod(((externalVal/y)-externalVal),(x/(mod(min(x,externalVal),mod(y,externalVal))*y))),cos(y)))/externalVal),y)-max(externalVal,pow((tan(y)*min(max(externalVal,externalVal),y)),max((x/externalVal),(externalVal*externalVal))))))",
            "g": "pow(y,audio((y*sin(x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(tan(y),max(externalVal,max(externalVal,(x+min(mod(max(y,x),noise((externalVal-y),externalVal)),(x*x))))))",
            "b": "((cos(externalVal)-max(x,y))+(mod(sin(max((x/externalVal),(externalVal*externalVal))),externalVal)-sin(y)))",
            "g": "audio(x,audio((y*audio((y+audio((y/(x*(tan(sin(externalVal))/y))),x)),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(pow((pow(y,noise(mod((sin(externalVal)+externalVal),(x-(audio(min(x,externalVal),pow(y,externalVal))-externalVal))),sin(y)))/externalVal),externalVal)-sin(y)))",
            "g": "audio(x,audio((y-(x*(max(cos(externalVal),y)/y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(tan(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(mod((pow(y,noise(audio((sin(externalVal)+externalVal),(x*(audio(min(x,externalVal),pow(y,y))*externalVal))),sin(y)))/externalVal),externalVal)-sin(y)))",
            "g": "audio(x,audio((y/(y*(max(sin(externalVal),y)/y))),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-tan(x))+(audio((pow(y,noise(noise((sin(externalVal)+externalVal),(x*(audio(min(x,externalVal),audio(y,externalVal))-y))),tan(y)))/externalVal),y)-sin(y)))",
            "g": "audio(x,audio((y*(y/(max(sin(externalVal),y)/y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(externalVal),(x*x))",
            "b": "((tan(externalVal)+tan(x))+(pow(cos(noise(externalVal,min(pow((sin(externalVal)+externalVal),(x+cos(externalVal))),cos(y)))),externalVal)+sin(externalVal)))",
            "g": "audio(x,audio((y*sin(x)),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(tan(externalVal),noise(y,externalVal))",
            "b": "((cos(externalVal)-max(x,y))-(mod(cos(mod(y,noise(mod(((externalVal*y)+externalVal),sin(x)),tan(y)))),y)-tan(externalVal)))",
            "g": "pow(y,audio((y*(y+(tan(((y-(cos(cos(y))+tan(y)))/min(externalVal,y)))-y))),y))"
          }
        }
      ],
      "timestamp": "19h:7m:28s"
    },
    {
      "generation": 6,
      "ascendantID": "baled1c4-dbvf-6btl-ui2m-hp45xqa9ky10",
      "id": "nfiy1w1a-iiwd-8luj-ccv2-utrsvqyyyzaw",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(mod((pow(y,noise(mod((sin(externalVal)+externalVal),(x-(audio(min(x,externalVal),pow(y,externalVal))-y))),sin(y)))/externalVal),externalVal)-sin(y)))",
            "g": "audio(x,audio((y*(x*(max(sin(externalVal),y)/y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(tan(y),max(externalVal,max(externalVal,(x+pow(y,(externalVal*audio(y,tan(audio(externalVal,y)))))))))",
            "b": "((cos(externalVal)-tan(x))+(audio((pow(y,noise(noise((sin(externalVal)+externalVal),(x*(audio(min(x,externalVal),pow(y,externalVal))-y))),tan(y)))/externalVal),y)-cos(externalVal)))",
            "g": "audio(x,audio((y*(x*(tan(sin(externalVal))/y))),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(cos(externalVal),max(externalVal,max(externalVal,(y+pow(y,(externalVal/audio(externalVal,sin(audio(externalVal,y)))))))))",
            "b": "((max(externalVal,(y*min(noise(externalVal,x),min(cos(noise(x,cos(y))),min(x,x)))))*tan(x))+(pow(sin(noise(externalVal,max(audio((cos(externalVal)-externalVal),(x-(pow(max(x,externalVal),noise(y,x))-externalVal))),cos(y)))),externalVal)+(externalVal/audio(tan((sin(min(y,((max(audio(x,sin(y)),audio(x,pow(y,x)))-audio((externalVal*x),min(max(y,x),externalVal)))/min(externalVal,externalVal))))*y)),(x*x)))))",
            "g": "pow(x,audio((y/(x/(max(((y*(y-(max(((externalVal+(tan(cos(y))+tan(y)))/max(externalVal,y)),y)-y)))*y),y)*y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(tan(y),cos(externalVal))",
            "b": "((tan(externalVal)-max(x,y))+(mod((pow(y,noise(audio((sin(externalVal)+externalVal),(x*(pow(min(x,externalVal),pow(y,y))*externalVal))),sin(y)))/externalVal),externalVal)+(externalVal/audio(min(externalVal,x),max((x/externalVal),(externalVal-externalVal))))))",
            "g": "audio(x,audio((y/(y*(max(sin(externalVal),y)/y))),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(max(externalVal,x),max(externalVal,cos(externalVal)))",
            "b": "((cos(externalVal)+tan(x))-(pow((pow(y,mod(mod(mod(audio(x,sin(y)),pow(x,mod(y,x))),(x/(mod(noise(x,externalVal),noise(y,externalVal))*y))),cos(y)))/externalVal),y)-tan(externalVal)))",
            "g": "mod(x,pow(tan(externalVal),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-cos(x))+(audio((pow(y,noise(noise((sin(externalVal)+externalVal),(x*(audio(noise(x,externalVal),audio(y,externalVal))-y))),tan(y)))/externalVal),y)-sin(y)))",
            "g": "audio(x,pow((y*(y/(max(sin(externalVal),y)*y))),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((externalVal+y),max(externalVal,max(externalVal,(x-pow(y,(externalVal/audio(externalVal,cos(audio(externalVal,y)))))))))",
            "b": "((max(externalVal,(y*min(mod(externalVal,x),min(cos(noise(x,tan(y))),max(x,x)))))*sin(x))+(pow((mod(externalVal,min(pow((sin(externalVal)-externalVal),(x-(audio(tan(x),mod(y,y))+externalVal))),cos(y)))/externalVal),externalVal)+cos(y)))",
            "g": "pow(x,pow((y/(x/(max(((y*(y+(tan(((y+(cos(max(sin(externalVal),y))-tan(y)))/max(externalVal,y)))-y)))*y),y)*y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(y),max(externalVal,tan(externalVal)))",
            "b": "((max(externalVal,(y-max(noise(externalVal,x),noise((x*(audio(min(x,externalVal),pow(y,y))/externalVal)),tan(noise(y,x))))))-max(x,y))+(mod(sin(min((x/externalVal),(externalVal-externalVal))),externalVal)-sin(y)))",
            "g": "pow(x,audio((y/audio((y-audio((y/(x*(tan((externalVal/externalVal))/y))),x)),y)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "pow(((y/externalVal)+externalVal),(cos(externalVal)-tan(x)))",
            "g": "mod(audio((y-(x+(max(sin(externalVal),x)/y))),y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(tan(y),tan(externalVal))",
            "b": "((cos(externalVal)+max(x,y))-(pow((mod(y,noise(mod(((externalVal/y)-externalVal),(x/(pow(min(x,externalVal),noise(y,externalVal))*y))),cos(y)))-externalVal),y)-tan(externalVal)))",
            "g": "pow(x,pow(min(externalVal,x),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(tan(y),tan(externalVal))",
            "b": "((cos(externalVal)+max(x,y))-(pow((noise(y,mod(mod(((externalVal/y)-externalVal),(x*(pow(noise(x,externalVal),noise(y,externalVal))*y))),cos(y)))/externalVal),y)*tan(externalVal)))",
            "g": "audio(x,pow(tan(externalVal),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(tan(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(mod(sin(max((x*externalVal),(externalVal*externalVal))),y)-(externalVal/mod(mod(externalVal,y),max((x*externalVal),(externalVal+externalVal))))))",
            "g": "audio(x,audio((y*audio((y+audio((y/(y*(tan(sin(externalVal))*y))),x)),x)),y))"
          }
        }
      ],
      "timestamp": "19h:7m:31s"
    },
    {
      "generation": 7,
      "ascendantID": "nfiy1w1a-iiwd-8luj-ccv2-utrsvqyyyzaw",
      "id": "i8g8rfad-m2u8-oxto-mxyh-8k42ujxo6cmm",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(mod((pow(y,noise(mod((sin(externalVal)+externalVal),(x-(audio(min(x,externalVal),pow(y,externalVal))-y))),sin(y)))/externalVal),externalVal)-sin(y)))",
            "g": "audio(x,audio((y*(x*(max(sin(externalVal),y)/y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(max(y,x),tan(externalVal))",
            "b": "((max(externalVal,(y-min(min(externalVal,x),max(sin(mod(x,cos(y))),max(max(y,x),pow(externalVal,(x-(x/y))))))))*tan(x))+((externalVal-externalVal)-cos(externalVal)))",
            "g": "audio(x,audio((y*(x*(audio((y-audio((y-audio((y/(x*(tan(sin(externalVal))/y))),x)),y)),y)/y))),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(y),tan(externalVal))",
            "b": "((tan(externalVal)-tan(x))+(pow((pow(y,noise(mod((sin(externalVal)+externalVal),(x-(audio(max(x,externalVal),pow(y,externalVal))-y))),sin(y)))/externalVal),externalVal)-sin(y)))",
            "g": "audio(x,pow((y*(x*pow(noise(externalVal,y),y))),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(tan(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(mod(sin(max((x*externalVal),(externalVal+externalVal))),y)-(externalVal/mod(mod(externalVal,y),min((x/externalVal),(externalVal+externalVal))))))",
            "g": "audio(x,audio((y*audio((y+audio((y*(y/(tan((externalVal*externalVal))/y))),x)),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(sin(externalVal),max(externalVal,max(externalVal,(y+mod(y,(externalVal*audio(externalVal,cos(pow(externalVal,y)))))))))",
            "b": "((max(externalVal,(y*min(min(externalVal,x),min(cos(noise(x,cos(y))),min(x,x)))))*tan(x))+(pow(sin(noise(externalVal,max(audio((cos(externalVal)-y),(x-(pow(max(x,externalVal),noise(y,x))-externalVal))),cos(y)))),externalVal)+sin(externalVal)))",
            "g": "pow(x,audio((y/(x/(max(((y*(y-(max(((externalVal+(tan(cos(y))+tan(y)))*tan(externalVal)),y)*y)))*y),y)*y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(max(externalVal,x),max(externalVal,cos(externalVal)))",
            "b": "((cos(externalVal)+tan(x))-(pow((pow(y,pow(mod(mod(audio(x,(y/mod(x,x))),pow(x,pow(y,x))),(x*(mod(noise(x,externalVal),noise(y,externalVal))*y))),cos(y)))/externalVal),y)-tan(externalVal)))",
            "g": "mod(x,pow(tan(externalVal),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(cos(externalVal),max(externalVal,max(externalVal,(y+pow(y,sin(externalVal))))))",
            "b": "(audio(((externalVal/y)-externalVal),(x-(audio(max(x,externalVal),noise(y,y))+externalVal)))+(pow(cos(noise(externalVal,max(audio((tan(externalVal)-externalVal),(x-(pow(max(x,externalVal),noise(y,x))-externalVal))),tan(y)))),externalVal)+(externalVal/audio(tan((tan(max(x,((max(audio(x,sin(y)),audio(x,audio(y,x)))-audio((externalVal/x),noise(max(y,x),externalVal)))/min(externalVal,externalVal))))*y)),(x*x)))))",
            "g": "pow(x,audio((y/(x*(max(((y-(y-(tan(((externalVal+(tan((y/(x/(tan(((y*(y+(tan(((y-(sin(max(sin(externalVal),y))-tan(y)))/max(externalVal,y)))-y)))-y))*y))))+tan(y)))/max(externalVal,y)))-y)))*y),y)-y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min((externalVal+y),max(externalVal,max(externalVal,(x*pow(y,(externalVal/pow(externalVal,cos(audio(externalVal,y)))))))))",
            "b": "((max(externalVal,(x*min(pow(externalVal,x),min(cos(max(x,tan(y))),max(x,x)))))*sin(x))+(pow((mod(externalVal,min(pow((sin(externalVal)*externalVal),(x-(audio(cos(x),mod(y,y))+externalVal))),cos(y)))/externalVal),externalVal)+tan(externalVal)))",
            "g": "audio(x,pow((y/(y/(tan(((y*(y+(tan(sin((y+(cos(max(sin(externalVal),y))-tan(y)))))-y)))/y))*y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "pow(((y/externalVal)+externalVal),(cos(externalVal)-tan(x)))",
            "g": "mod(audio((y-(y+(max(cos(externalVal),x)/y))),y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(max(y,x),tan(externalVal))",
            "b": "((tan(externalVal)+max(x,y))+(mod((tan((x*externalVal))/externalVal),y)-(externalVal/mod(noise(externalVal,y),tan((x*externalVal))))))",
            "g": "audio(x,audio((y/audio((y+audio((y/(y-(max(cos(externalVal),y)*y))),x)),y)),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(tan(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))-(pow((mod(y,noise(noise((cos(mod(x,cos(y)))+externalVal),sin(x)),cos(y)))-externalVal),y)-tan(externalVal)))",
            "g": "audio(x,pow(max(externalVal,y),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(tan(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(pow(sin(max((x*externalVal),(externalVal*externalVal))),y)-(externalVal/noise(mod(externalVal,y),max((x/y),(externalVal-externalVal))))))",
            "g": "audio(x,audio((y*audio((y+audio((y/(y*(tan((externalVal*externalVal))-y))),x)),x)),y))"
          }
        }
      ],
      "timestamp": "19h:7m:33s"
    },
    {
      "generation": 8,
      "ascendantID": "i8g8rfad-m2u8-oxto-mxyh-8k42ujxo6cmm",
      "id": "uzty4k19-uvzj-vvt6-tmd0-rhjxa2766qza",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(mod((pow(y,noise(mod((sin(externalVal)+externalVal),(x-(audio(min(x,externalVal),pow(y,externalVal))-y))),sin(y)))/externalVal),externalVal)-sin(y)))",
            "g": "audio(x,audio((y*(x*(max(sin(externalVal),y)/y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(tan(externalVal),tan(externalVal))",
            "b": "(min(cos(max(x,max(y,pow(x,x)))),max(x,x))+((externalVal-externalVal)-sin(y)))",
            "g": "audio(x,audio((y*(x*(audio((y-sin(externalVal)),x)/y))),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(tan(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))-(pow(mod(y,x),y)+tan(externalVal)))",
            "g": "audio(x,tan(externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(x)",
            "b": "pow(((y/externalVal)+externalVal),(sin(externalVal)-(x/externalVal)))",
            "g": "mod(audio((y*(y+sin(max(cos(externalVal),y)))),y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(sin(externalVal),max(externalVal,max(externalVal,(x-mod(y,(externalVal*audio(externalVal,tan(pow(externalVal,y)))))))))",
            "b": "((max(externalVal,(y*min(min(externalVal,x),min(tan(noise(x,cos(y))),min(x,x)))))*cos(x))+(audio(sin(noise(externalVal,min(audio((cos(externalVal)-y),(x-(pow(max(x,externalVal),noise(y,x))-y))),cos(y)))),externalVal)+sin(externalVal)))",
            "g": "pow(x,audio((y/(x/(max(((y*(y+(tan(((externalVal+(tan(sin(y))+tan(y)))*tan(externalVal)))*y)))-y),y)*y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))-(noise((pow(y,noise(pow((sin(externalVal)+externalVal),(x+(audio(min(x,externalVal),pow(y,externalVal))-y))),sin(y)))/externalVal),y)-sin(y)))",
            "g": "pow(x,audio((y-(x*(max((externalVal*externalVal),y)/y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(cos(y),tan(externalVal))",
            "b": "((cos(externalVal)-tan(x))-(pow((mod(y,min(min((tan(mod(x,cos(y)))-externalVal),sin(x)),sin(y)))-externalVal),y)*tan(externalVal)))",
            "g": "audio(x,audio(x,audio((y*(x*(audio((y-audio((y-audio((y/(x*(tan((externalVal/externalVal))/y))),x)),y)),y)/y))),x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "min(max(externalVal,sin(externalVal)),tan(externalVal))",
            "b": "((cos(externalVal)+max(x,y))+(mod((tan((x/externalVal))/externalVal),y)-(externalVal/mod(noise(externalVal,y),max((x*externalVal),(externalVal-externalVal))))))",
            "g": "audio(x,audio((y/audio(tan(externalVal),y)),x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(cos(externalVal),max(externalVal,max(externalVal,(x+mod(y,sin(externalVal))))))",
            "b": "(pow(((externalVal/y)+externalVal),(x-(audio(max(x,externalVal),min(y,externalVal))+externalVal)))+(pow(cos(noise(externalVal,max(audio((tan(externalVal)*externalVal),(x-(pow(max(x,externalVal),noise(y,x))-externalVal))),tan(y)))),externalVal)+(externalVal/audio(tan((tan(max(x,((max(audio(x,(externalVal/audio(x,x))),audio(x,audio(y,x)))*audio((externalVal/x),min(max(y,x),externalVal)))/min(externalVal,externalVal))))-y)),tan(externalVal)))))",
            "g": "pow(x,audio((y/(x*(max(((y-(y+(tan(((externalVal+(tan((y/audio(x,pow(max(externalVal,y),y))))+tan(y)))/min(externalVal,y)))*y)))*y),x)-y))),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(max(y,x),tan(externalVal))",
            "b": "((tan(externalVal)+cos(x))-(pow((mod(y,pow(mod(pow(audio(x,(y/pow(x,x))),pow(x,pow(y,y))),(x/(noise(min(x,externalVal),noise(y,externalVal))*y))),sin(y)))/externalVal),y)-tan(externalVal)))",
            "g": "mod(x,pow(cos((externalVal*externalVal)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "max(tan(y),tan(externalVal))",
            "b": "((cos(externalVal)-max(x,y))+(pow(sin(min((x*externalVal),(externalVal-externalVal))),y)+sin(externalVal)))",
            "g": "audio(x,audio((y*audio((y+audio((y/(y*((max(cos(externalVal),x)/y)-y))),x)),x)),y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "noise(max(externalVal,x),max(externalVal,cos(externalVal)))",
            "b": "((cos(externalVal)+tan(x))-(mod((pow(y,pow(mod(mod(audio(x,(y/mod(x,x))),noise(x,pow(y,x))),(x*(mod(min(x,externalVal),noise(y,externalVal))-y))),cos(y)))/externalVal),externalVal)/cos(externalVal)))",
            "g": "mod(x,pow(tan(externalVal),y))"
          }
        }
      ],
      "timestamp": "19h:7m:36s"
    }
  ],
  "timestamp": "2023-11-05-19-06-43"
}