{
  "id": "kr3gewwt-pu1u-ydsu-ezmv-7losir4lbyqf",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.4000000059604645,
    "populationSize": 20
  },
  "populations": [
    {
      "generation": 0,
      "id": "hfbp4rtl-flr4-rcs6-67vy-wvuo2nkljhar",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(tan(externalVal))",
            "b": "(x*audio(sin(tan(y)),sin(sin(x))))",
            "g": "mod(externalVal,sin((((x*y)/(externalVal*(cos(y)+y)))/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio(externalVal,sin(cos(x)))",
            "b": "sin(audio(externalVal,((externalVal-x)/externalVal)))",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(sin(x)+mod(x,cos((y*audio(x,externalVal)))))",
            "b": "audio(y,x)",
            "g": "cos((x+x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(x+cos(((tan(y)*externalVal)-(y/mod((externalVal+x),x)))))",
            "b": "cos(y)",
            "g": "((audio(x,sin(mod(y,y)))*y)-(y*tan(y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(cos(externalVal))",
            "b": "tan(y)",
            "g": "(mod(x,x)+tan((x/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(mod(cos(audio(tan(sin(y)),(externalVal+audio(sin(y),(externalVal+(externalVal/x)))))),(sin(mod(cos(y),y))-((cos(externalVal)-((cos((x/(x*(audio(audio(cos(externalVal),(mod(x,cos(x))+(externalVal-mod(((x+externalVal)*cos(externalVal)),y)))),cos(x))-(tan(cos(((y*mod(externalVal,y))+sin((y-y)))))/y)))))*x)*cos(cos(y))))-y)))-y)",
            "b": "(y/sin(((externalVal+audio(mod(y,cos(externalVal)),(x/x)))/y)))",
            "g": "mod(externalVal,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio((externalVal+externalVal),x)",
            "b": "(externalVal*(externalVal-y))",
            "g": "(externalVal-(externalVal/sin(((externalVal+externalVal)+x))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(y,mod(externalVal,cos(x)))",
            "b": "cos((x*x))",
            "g": "audio(x,x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,mod(x,externalVal))",
            "b": "cos((externalVal+(y+(mod(x,sin(y))+(sin(externalVal)*(mod(y,tan(((externalVal-(externalVal+externalVal))/y)))/(externalVal*y)))))))",
            "g": "(audio(((y+(audio(mod((externalVal/externalVal),x),(y*sin((externalVal/y))))-x))/y),audio(y,((externalVal*x)+y)))/(audio(externalVal,externalVal)*cos(x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(y)",
            "b": "mod(mod(x,externalVal),sin(sin(externalVal)))",
            "g": "audio(cos(externalVal),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio(y,x)",
            "b": "(tan(y)-x)",
            "g": "((y-y)+audio(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod((externalVal/mod(x,(y/((externalVal-mod(y,x))+audio(y,y))))),mod(x,x))",
            "b": "mod(tan((audio((sin(((mod(audio((y-audio((mod(x,x)*y),x)),x),externalVal)-externalVal)-sin(cos(externalVal))))/cos(externalVal)),externalVal)+tan(externalVal))),sin(x))",
            "g": "mod(((y*externalVal)-(((externalVal/y)*y)*mod(externalVal,((externalVal*sin((x/externalVal)))*x)))),externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,(x*externalVal))",
            "b": "((mod(x,mod(tan(mod(x,y)),tan(y)))/x)+y)",
            "g": "(cos((audio((externalVal-(y*(tan((tan(sin(x))*x))-mod(tan(y),x)))),mod(y,(externalVal+(x+y))))/y))+(externalVal*externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(tan((audio(audio(sin(externalVal),audio(mod(y,y),externalVal)),externalVal)+x)))",
            "b": "(x*(externalVal/(y*x)))",
            "g": "cos(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-sin(externalVal))",
            "b": "(cos(mod(x,cos(y)))+x)",
            "g": "(x+cos(mod(externalVal,(externalVal*y))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(mod(externalVal,externalVal))",
            "b": "((mod(audio(sin(externalVal),sin(y)),x)*externalVal)-audio(audio((mod((externalVal-x),y)-y),tan(y)),x))",
            "g": "cos(y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(((externalVal+((((sin(externalVal)/(x-y))*externalVal)+(y-tan(x)))/externalVal))/x))",
            "b": "(y*(cos(y)/y))",
            "g": "mod(tan((audio(x,audio(tan(externalVal),y))*sin(externalVal))),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(externalVal)",
            "b": "audio(sin(audio(x,sin(((externalVal+x)-externalVal)))),y)",
            "g": "mod(externalVal,(x/tan(cos((x/(y*(audio(y,(tan(((tan(audio(externalVal,(x/cos(x))))-x)*cos(x)))+y))+(externalVal+x))))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(mod(x,audio((externalVal-x),(y/x))),x)",
            "b": "((sin(mod(externalVal,y))*(externalVal*(externalVal/x)))-externalVal)",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(((audio((sin(x)+tan(audio(externalVal,x))),(sin(y)/y))/((sin(x)*y)+externalVal))-(x/(externalVal-audio((x-y),y)))))",
            "b": "(x*cos(externalVal))",
            "g": "(x-externalVal)"
          }
        }
      ],
      "timestamp": "23h:46m:8s"
    },
    {
      "generation": 1,
      "ascendantID": "hfbp4rtl-flr4-rcs6-67vy-wvuo2nkljhar",
      "id": "rsk1tz50-l2ep-566t-xfsd-65lx9hwjni05",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,mod(x,externalVal))",
            "b": "cos((externalVal+(y+(mod(x,sin(y))+(sin(externalVal)*(mod(y,tan(((externalVal-(externalVal+externalVal))/y)))/(externalVal*y)))))))",
            "g": "(audio(((y+(audio(mod((externalVal/externalVal),x),(y*sin((externalVal/y))))-x))/y),audio(y,((externalVal*x)+y)))/(audio(externalVal,externalVal)*cos(x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(tan(externalVal))",
            "b": "(x*audio(sin(tan(y)),sin(sin(x))))",
            "g": "mod(externalVal,sin((((x*y)/(externalVal*(cos(y)+y)))/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(x)",
            "b": "cos((externalVal+(y-(mod(x,sin(externalVal))+(sin(externalVal)*sin(tan(externalVal)))))))",
            "g": "(audio(((y+(audio(mod((externalVal/externalVal),x),(y*sin((y/y))))-x))/y),audio(y,((externalVal*x)+y)))/(audio(externalVal,externalVal)*cos(x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,tan(externalVal))",
            "b": "cos((externalVal+(y+audio(sin(audio(x,sin(((externalVal+x)-y)))),y))))",
            "g": "(audio((externalVal/externalVal),audio(y,((externalVal*y)+y)))/(audio(externalVal,externalVal)*cos(x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(tan(externalVal))",
            "b": "(x*audio(sin(tan(y)),sin(sin(x))))",
            "g": "mod(externalVal,sin(sin(((x*y)/(externalVal/(cos(y)+y))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(mod(sin(audio(tan((y/y)),(externalVal+audio(sin(y),(externalVal+(externalVal/x)))))),(sin(mod(cos(y),y))+((cos(externalVal)-((cos((x/(x*(audio(audio(cos(externalVal),(mod(x,cos(x))+(externalVal-mod(((x+externalVal)*cos(externalVal)),y)))),sin(x))-sin(tan(cos(((y*mod(externalVal,y))+sin((y*y))))))))))-x)*tan(cos(y))))+y)))-externalVal)",
            "b": "(y/sin(((externalVal+audio(mod(y,sin(externalVal)),(x/x)))*y)))",
            "g": "mod(externalVal,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(x+cos(((tan(x)*externalVal)+(y/audio((externalVal+x),x)))))",
            "b": "cos(y)",
            "g": "((audio(x,sin(mod(externalVal,y)))*y)-(y*tan(y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,mod(x,externalVal))",
            "b": "tan((externalVal-(y+(audio(x,sin(y))+(sin(externalVal)*(tan(externalVal)/(externalVal*y)))))))",
            "g": "(audio(((y+(audio(mod((externalVal/externalVal),x),(y*sin((externalVal/y))))-x))/y),audio(y,((externalVal-x)+y)))/(audio(externalVal,externalVal)-cos(x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio((externalVal+externalVal),x)",
            "b": "(externalVal*(externalVal+x))",
            "g": "(externalVal+(externalVal/sin((tan(y)+x))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio(y,x)",
            "b": "(tan(y)-x)",
            "g": "((y-y)-audio(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(cos(externalVal))",
            "b": "tan(y)",
            "g": "(mod(x,x)+tan((x/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(y)",
            "b": "audio(mod(x,externalVal),sin(sin(externalVal)))",
            "g": "audio(tan(externalVal),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-cos(externalVal))",
            "b": "(cos(mod(x,(x-((externalVal+x)/externalVal))))+x)",
            "g": "(x+cos(mod(externalVal,mod(mod((externalVal-externalVal),x),x))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(externalVal)",
            "b": "audio((mod(x,sin(((externalVal+x)-externalVal)))/cos(x)),y)",
            "g": "mod(externalVal,(x*tan(cos(sin(y)))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod((externalVal/mod(x,(y*(((x*tan(x))+externalVal)+audio(y,y))))),mod(y,y))",
            "b": "mod(cos((mod((sin(((mod(audio((x-audio((mod(x,x)-y),x)),x),externalVal)-externalVal)-sin(tan(externalVal))))/cos(externalVal)),externalVal)+tan(externalVal))),sin(x))",
            "g": "mod(((y*externalVal)-(((externalVal/y)*y)*mod(externalVal,((externalVal*sin(cos((x+x))))/x)))),externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio(y,x)",
            "b": "(tan(y)+x)",
            "g": "((y-y)+audio(x,x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(mod(externalVal,externalVal))",
            "b": "((mod(audio((externalVal/externalVal),sin(y)),x)*externalVal)-audio(audio((mod((externalVal-x),y)-y),tan(y)),x))",
            "g": "cos(y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod((externalVal/mod(x,(y/((externalVal-mod(y,x))+audio(externalVal,y))))),mod(x,x))",
            "b": "mod(cos((audio((sin(((audio(audio((y-audio((mod(y,x)*y),x)),x),externalVal)+externalVal)-sin(cos(externalVal))))*cos(externalVal)),externalVal)+tan(externalVal))),sin(x))",
            "g": "mod(((y*externalVal)-(((externalVal/y)*y)*mod(externalVal,((externalVal*sin((x/externalVal)))*x)))),externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-sin(externalVal))",
            "b": "(cos(mod(x,tan(y)))+x)",
            "g": "(x-(cos((audio((externalVal-(y*(tan((tan(sin(x))*x))-mod(cos(y),x)))),mod(y,(externalVal+(x+y))))/y))+(externalVal-externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(y)",
            "b": "audio(mod(x,externalVal),cos(sin(externalVal)))",
            "g": "audio(cos(externalVal),y)"
          }
        }
      ],
      "timestamp": "23h:46m:31s"
    },
    {
      "generation": 2,
      "ascendantID": "rsk1tz50-l2ep-566t-xfsd-65lx9hwjni05",
      "id": "3iuo9zhc-u47p-atrg-yl58-x4bhb7e6oicd",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,mod(x,externalVal))",
            "b": "cos((externalVal+(y+(mod(x,sin(y))+(sin(externalVal)*(mod(y,tan(((externalVal-(externalVal+externalVal))/y)))/(externalVal*y)))))))",
            "g": "(audio(((y+(audio(mod((externalVal/externalVal),x),(y*sin((externalVal/y))))-x))/y),audio(y,((externalVal*x)+y)))/(audio(externalVal,externalVal)*cos(x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(tan(externalVal))",
            "b": "(x*audio(sin(tan(y)),sin(sin(x))))",
            "g": "mod(externalVal,sin((((x*y)/(externalVal*(cos(y)+y)))/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod((externalVal/mod(x,(y/((externalVal*mod(y,x))+audio(externalVal,y))))),audio(y,y))",
            "b": "mod(cos((audio(((((audio(audio((x-audio((mod(y,x)-y),x)),x),externalVal)+externalVal)-sin(cos(externalVal)))/cos(externalVal))-sin(externalVal)),externalVal)+tan(externalVal))),sin(x))",
            "g": "mod(((y*externalVal)-(((externalVal/y)*y)*mod(externalVal,((externalVal/((x/externalVal)/x))*x)))),externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(tan(externalVal))",
            "b": "(x*audio(sin(tan(y)),sin(sin(x))))",
            "g": "mod(externalVal,sin(sin(((x-y)/cos(x)))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(mod(sin(audio(tan((y/y)),(externalVal-audio(sin(y),(externalVal+(externalVal/x)))))),((mod(cos(y),y)/(externalVal-sin(sin(y))))+((cos(externalVal)-((cos((x*(x*(audio(audio(sin(externalVal),(audio(x,externalVal)+(externalVal-mod(((x+externalVal)*cos(externalVal)),y)))),sin(x))-sin(tan(cos(((y*mod(externalVal,y))+sin((y*y))))))))))-x)/tan(cos(y))))+y)))-y)",
            "b": "(y/sin(((externalVal+audio(mod(y,sin(externalVal)),sin(y)))/y)))",
            "g": "mod(externalVal,externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(y)",
            "b": "audio(mod(x,externalVal),cos(sin(externalVal)))",
            "g": "audio(cos(externalVal),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(y)",
            "b": "cos((externalVal+(externalVal-(mod(x,(externalVal/externalVal))+(sin(externalVal)*cos(tan(externalVal)))))))",
            "g": "(audio(((y+(audio(mod((externalVal/externalVal),x),(y/sin((y/y))))-x))/y),mod(y,((externalVal*x)+y)))/(audio(externalVal,externalVal)*(x*x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod((externalVal/mod(x,(y-(((x*tan(x))+externalVal)+sin(y))))),mod(y,y))",
            "b": "tan(tan((mod((cos(((mod(mod((x*audio((tan(x)-y),x)),x),externalVal)-externalVal)+(x/tan(externalVal))))/cos(externalVal)),externalVal)+tan(externalVal))))",
            "g": "audio((audio(cos(externalVal),y)*(((externalVal/y)/y)-mod(externalVal,((externalVal*sin(cos((x+x))))/x)))),externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio((externalVal+externalVal),x)",
            "b": "(externalVal*(externalVal+x))",
            "g": "(externalVal+(externalVal/cos((tan(y)+x))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(cos(cos(externalVal)))",
            "b": "(x*audio(sin(tan(y)),sin(sin(x))))",
            "g": "mod(externalVal,sin(sin((x*y))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-sin(externalVal))",
            "b": "(sin(mod(x,tan(y)))+x)",
            "g": "(x-(cos((audio((externalVal-(y*(tan((tan(sin(x))*x))*audio(cos(y),x)))),audio(y,(externalVal+(x+y))))/y))+(externalVal-externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,mod(x,externalVal))",
            "b": "cos((externalVal+(externalVal+(mod(x,sin(externalVal))+((y/externalVal)/sin(cos(y)))))))",
            "g": "(audio(((y+(audio(mod((externalVal/externalVal),x),(y/sin((y/y))))*x))/y),mod(y,((externalVal*y)+y)))/(audio(externalVal,externalVal)*cos(x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(tan(externalVal))",
            "b": "(x/audio(sin(tan(y)),sin(sin(x))))",
            "g": "tan(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,mod(x,externalVal))",
            "b": "mod((externalVal-(y+(audio(x,sin(y))+(sin(externalVal)*(tan(externalVal)/(externalVal*y)))))),y)",
            "g": "(audio(((y+(audio(tan((externalVal/externalVal)),(y*sin((externalVal/y))))-x))/y),audio(y,((externalVal-x)+y)))/(audio(externalVal,externalVal)-cos(x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(y)",
            "b": "audio(mod(x,externalVal),sin(sin(y)))",
            "g": "audio(mod(externalVal,y),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(tan(tan(externalVal)))",
            "b": "tan(y)",
            "g": "(audio(x,x)+tan((x/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(y)",
            "b": "audio(mod(x,externalVal),cos((y/sin(externalVal))))",
            "g": "audio(cos(externalVal),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(x)",
            "b": "cos((externalVal+(y+audio(sin(audio(x,sin(((externalVal+x)-y)))),y))))",
            "g": "(audio(sin(externalVal),audio(y,((externalVal*y)+y)))/(audio(externalVal,externalVal)*cos(x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,tan(x))",
            "b": "tan((externalVal+(externalVal+(audio(x,sin(y))+(y/x)))))",
            "g": "(audio(((x+(audio(mod((externalVal/externalVal),x),(y*sin((externalVal/y))))-x))/y),audio(y,((externalVal-x)+y)))*(audio(externalVal,externalVal)-mod(externalVal,externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,tan(externalVal))",
            "b": "cos((externalVal+(y+audio(sin(audio(x,sin(((externalVal+x)-y)))),y))))",
            "g": "(audio(sin(externalVal),mod(y,((externalVal*y)+y)))/(audio(externalVal,externalVal)*cos(x)))"
          }
        }
      ],
      "timestamp": "23h:46m:44s"
    },
    {
      "generation": 3,
      "ascendantID": "3iuo9zhc-u47p-atrg-yl58-x4bhb7e6oicd",
      "id": "ho7a2jad-3zlg-oh8c-kem7-yvw8vdobua6n",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,mod(x,externalVal))",
            "b": "cos((externalVal+(y+(mod(x,sin(y))+(sin(externalVal)*(mod(y,tan(((externalVal-(externalVal+externalVal))/y)))/(externalVal*y)))))))",
            "g": "(audio(((y+(audio(mod((externalVal/externalVal),x),(y*sin((externalVal/y))))-x))/y),audio(y,((externalVal*x)+y)))/(audio(externalVal,externalVal)*cos(x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(tan(externalVal))",
            "b": "(x*audio(sin(tan(y)),sin(sin(x))))",
            "g": "mod(externalVal,sin((((x*y)/(externalVal*(cos(y)+y)))/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio((externalVal+externalVal),x)",
            "b": "(externalVal*(externalVal+x))",
            "g": "(externalVal+(externalVal/cos((tan(y)+x))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio((externalVal+externalVal),x)",
            "b": "(externalVal/(externalVal+x))",
            "g": "(externalVal+sin(externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,mod(x,externalVal))",
            "b": "cos((externalVal-(externalVal+(mod(x,(y/externalVal))+((y/externalVal)/sin(cos(externalVal)))))))",
            "g": "sin(audio(sin((y+(audio(mod((externalVal/externalVal),x),(y/sin((externalVal*y))))*x))),mod(y,((y*x)+y))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod((externalVal-externalVal),x)",
            "b": "(externalVal*(externalVal+x))",
            "g": "(externalVal+(externalVal/cos((tan(y)+x))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod((externalVal/mod(x,(y/((externalVal*mod(y,x))-audio(externalVal,y))))),mod(x,x))",
            "b": "mod(cos((audio(((((audio(audio((x-audio((mod(y,x)-y),x)),x),externalVal)+externalVal)-sin(sin(externalVal)))/cos(externalVal))-sin(externalVal)),externalVal)+tan(externalVal))),sin(x))",
            "g": "mod(((y*externalVal)-(((externalVal/y)*y)*mod(externalVal,((externalVal/sin((x/externalVal)))/x)))),externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,tan(x))",
            "b": "tan((externalVal+(externalVal+(audio(x,cos(y))+(x/x)))))",
            "g": "(audio(((y+(audio(mod((externalVal/externalVal),x),(y*sin((externalVal/y))))-x))/y),audio(y,((y*x)+y)))*(audio(externalVal,externalVal)-mod(externalVal,externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-sin(externalVal))",
            "b": "(cos(mod(x,tan(y)))+x)",
            "g": "(x+(cos((audio((externalVal-(y/(tan((tan(sin(x))*x))*audio(cos(y),x)))),audio(y,(externalVal+(x+y))))/y))+(externalVal-externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(tan(mod(x,tan(externalVal))))",
            "b": "tan(y)",
            "g": "(audio(x,x)+audio(sin(externalVal),mod(y,((externalVal*y)+y))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(cos(y))",
            "b": "(x/audio(sin(mod(y,audio(externalVal,mod(mod(cos(audio((y*y),sin(externalVal))),cos(tan(x))),((x/y)-(x-x)))))),sin(cos(x))))",
            "g": "tan(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(mod(x,tan(x)))",
            "b": "tan(y)",
            "g": "((externalVal/externalVal)+tan((x/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(y)",
            "b": "audio(mod(x,externalVal),sin(sin(y)))",
            "g": "audio(mod(externalVal,y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(tan(tan(externalVal)))",
            "b": "cos(externalVal)",
            "g": "(audio(x,x)+tan((x/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((x*mod(x,mod(x,externalVal))))",
            "b": "(x*audio(sin(tan(y)),sin(sin(x))))",
            "g": "tan(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(x)",
            "b": "cos((externalVal+(y+audio(sin(audio(x,((sin(y)+externalVal)/(externalVal-x)))),y))))",
            "g": "(audio(sin(externalVal),audio(y,((externalVal*y)+y)))*cos(externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(y)",
            "b": "audio(mod(x,externalVal),sin((y/sin(externalVal))))",
            "g": "audio(cos(externalVal),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,mod(x,externalVal))",
            "b": "tan((externalVal+(externalVal+(audio(x,sin(y))-sin(x)))))",
            "g": "(audio(((x+(audio(mod((externalVal/externalVal),x),(y*sin((externalVal/y))))-x))*y),audio(y,((externalVal-x)+y)))*(audio(externalVal,externalVal)-mod(externalVal,externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-tan(tan(externalVal)))",
            "b": "(sin(mod(x,tan(y)))+x)",
            "g": "(x-(cos((audio((externalVal-(y*(tan((cos(sin(x))*x))*audio(tan((x/y)),x)))),audio(y,(y+(x+y))))/y))+(externalVal-externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(y)",
            "b": "audio(mod(x,externalVal),cos((y/sin(y))))",
            "g": "audio(cos(externalVal),y)"
          }
        }
      ],
      "timestamp": "23h:46m:50s"
    },
    {
      "generation": 4,
      "ascendantID": "ho7a2jad-3zlg-oh8c-kem7-yvw8vdobua6n",
      "id": "1p1dem1g-pb5l-yqoq-xjrs-sfzi39bcotlb",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,mod(x,externalVal))",
            "b": "cos((externalVal+(y+(mod(x,sin(y))+(sin(externalVal)*(mod(y,tan(((externalVal-(externalVal+externalVal))/y)))/(externalVal*y)))))))",
            "g": "(audio(((y+(audio(mod((externalVal/externalVal),x),(y*sin((externalVal/y))))-x))/y),audio(y,((externalVal*x)+y)))/(audio(externalVal,externalVal)*cos(x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(tan(externalVal))",
            "b": "(x*audio(sin(tan(y)),sin(sin(x))))",
            "g": "mod(externalVal,sin((((x*y)/(externalVal*(cos(y)+y)))/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(tan(audio(x,mod(externalVal,x))))",
            "b": "tan(y)",
            "g": "(mod(x,x)+audio((sin(externalVal)*y),mod(y,((externalVal*y)+y))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,tan(x))",
            "b": "cos((externalVal+(externalVal+(audio(y,cos(y))-sin(x)))))",
            "g": "(audio(((x+(audio(tan(sin(externalVal)),(y*sin(sin(y))))+x))*y),audio(y,((externalVal-x)+y)))*(audio(externalVal,externalVal)-mod(externalVal,externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(tan(x))",
            "b": "tan(y)",
            "g": "((externalVal/externalVal)+tan((x/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-tan(tan(externalVal)))",
            "b": "(sin(mod(x,tan(y)))+x)",
            "g": "(x-(tan((audio((externalVal-(y*(cos((cos(sin(x))/x))*audio(tan((x/y)),x)))),audio(y,(y+(x+y))))/y))+(externalVal-externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(tan(cos(externalVal)))",
            "b": "cos(y)",
            "g": "(audio(y,x)+audio((externalVal/externalVal),(y/externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod((externalVal/tan(x)),tan(x))",
            "b": "audio(cos((audio(((((audio(audio((x-audio((mod(y,x)*y),x)),x),externalVal)+externalVal)*sin(sin(externalVal)))*cos(externalVal))-sin(externalVal)),externalVal)+tan(externalVal))),sin(x))",
            "g": "mod(((y*externalVal)-(((externalVal/y)*y)-mod(externalVal,((externalVal/sin((x/externalVal)))/x)))),externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(tan(y))",
            "b": "(x*audio(sin(mod(x,audio(y,tan(mod(tan(mod((y*y),sin(externalVal))),tan(mod(x,x))))))),sin(sin(x))))",
            "g": "mod(externalVal,sin((((x*y)/(externalVal*(cos(y)+y)))/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(x)",
            "b": "cos((externalVal+(y+audio(sin(audio(x,sin((sin(y)+externalVal)))),y))))",
            "g": "(audio(sin(externalVal),audio(y,((externalVal*y)+y)))*cos(externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,(y*sin(externalVal)))",
            "b": "cos((externalVal+(y+(tan(x)+(sin(externalVal)*(mod(externalVal,tan(y))/(externalVal*y)))))))",
            "g": "(audio(((y+x)/y),audio(y,((externalVal*x)+y)))/(audio(externalVal,externalVal)*cos(x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-sin(externalVal))",
            "b": "(cos(mod(x,tan(y)))+x)",
            "g": "(y+(cos((audio((externalVal-(y/(tan((tan(sin(x))/x))-audio(cos(y),x)))),audio(y,(externalVal+(x+y))))/externalVal))+(externalVal-externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod((externalVal-externalVal),x)",
            "b": "(externalVal*(externalVal+x))",
            "g": "(externalVal+(externalVal/cos((tan(y)+x))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(y)",
            "b": "audio(mod(x,externalVal),cos((y/(externalVal/tan(externalVal)))))",
            "g": "mod(cos(externalVal),y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(tan(mod(x,tan(externalVal))))",
            "b": "cos(y)",
            "g": "(audio(x,x)+audio(sin(externalVal),tan(y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((y/mod(x,tan(x))))",
            "b": "(x*audio(sin(tan(y)),cos(cos(x))))",
            "g": "tan(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(tan(tan(externalVal)))",
            "b": "cos(externalVal)",
            "g": "(audio(x,x)+mod((x/y),((y/externalVal)/x)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y/tan(externalVal))",
            "b": "mod(tan(x),sin(sin(y)))",
            "g": "audio(mod(externalVal,y),x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "mod(x,(y-tan(tan(externalVal))))",
            "b": "tan((externalVal+((tan(cos(y))*mod(externalVal,cos((tan(x)*(sin((x*tan(y)))+y)))))-y)))",
            "g": "(audio(((y+(audio((y*(tan((cos(sin(x))*x))*mod(mod((x/y),sin(sin(externalVal))),x))),(y*cos((externalVal/y))))-x))/y),audio(y,((y*x)+y)))*(audio(externalVal,externalVal)*mod(externalVal,externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-tan(tan(externalVal)))",
            "b": "(sin(mod(x,tan(y)))+y)",
            "g": "(x-(cos((audio((externalVal-(y*(cos((cos(sin(x))*x))*audio(tan((x/y)),x)))),audio(y,(y+(x-y))))/y))+(externalVal-(tan(y)+y))))"
          }
        }
      ],
      "timestamp": "23h:46m:52s"
    }
  ],
  "timestamp": "2024-01-20-23-46-06"
}