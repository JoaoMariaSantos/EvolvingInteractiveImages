{
  "id": "kiul4ifk-m4ec-76n9-1oie-9qddcikj5dlo",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.4000000059604645,
    "populationSize": 20
  },
  "populations": [{
    "generation": 0,
    "id": "1fbdbfr9-q8uk-xn2c-szuu-o4xuxwpcls40",
    "individuals": [
      {
        "fitness": 0,
        "expressions": {
          "r": "(externalVal-(pow((y*externalVal),x)+externalVal))",
          "b": "((y+externalVal)-(bri(externalVal,(y/externalVal))*x))",
          "g": "((audio((x/externalVal),sin(x))-bri(((cos((bri(audio(bri(cos(tan(x)),externalVal),y),y)-cos(min(y,sin(x)))))*min(pow(x,pow((x/(externalVal+externalVal)),max((externalVal-max(externalVal,max(y,externalVal))),bri(min(x,x),min(sin(x),externalVal))))),externalVal))*x),y))/(y-y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(x,y)",
          "b": "(externalVal/(sin(bri(cos(audio(y,externalVal)),externalVal))/y))",
          "g": "bri(y,cos(x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(externalVal)",
          "b": "(y-bri(x,externalVal))",
          "g": "tan(x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan(x)",
          "b": "min(audio(min(y,cos(externalVal)),y),(externalVal*externalVal))",
          "g": "audio(y,sin(x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(externalVal)",
          "b": "bri(min(externalVal,(pow(sin(y),y)+externalVal)),bri(externalVal,tan(y)))",
          "g": "pow(x,(tan(y)-max(x,externalVal)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "audio(y,pow(externalVal,max(cos(externalVal),externalVal)))",
          "b": "cos(cos(externalVal))",
          "g": "(y+externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "tan(y)",
          "b": "bri(externalVal,x)",
          "g": "(y/x)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(y,pow(min(bri(y,(tan(y)+pow(pow(sin(y),(y-tan(tan(y)))),cos((y/y))))),(y+cos((bri(externalVal,(tan(y)*max((pow(cos(y),max(y,x))+externalVal),pow(externalVal,externalVal))))*(externalVal/max(x,x)))))),audio(y,audio(y,externalVal))))",
          "b": "bri(cos(audio(cos(bri(y,tan(sin(x)))),y)),externalVal)",
          "g": "min(y,externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "min(y,min(cos(y),y))",
          "b": "tan(sin(max(y,externalVal)))",
          "g": "cos(y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "cos(externalVal)",
          "b": "tan(y)",
          "g": "sin(bri(y,cos(min((cos(cos(((x/((x*cos((sin(y)*externalVal)))*((x+externalVal)-min(tan(x),externalVal))))*y)))-x),y))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "sin(y)",
          "b": "min((y*max(tan(x),externalVal)),max(x,tan(externalVal)))",
          "g": "min((cos(x)*((((externalVal*x)+max(audio((cos(y)*externalVal),max(externalVal,bri(externalVal,(x+x)))),externalVal))+externalVal)*(sin(externalVal)/x))),bri(((tan(bri(audio(max(tan(cos(audio(tan(y),(y*((tan(x)*externalVal)-externalVal))))),cos(x)),y),tan(min(max(min(pow(tan(sin(bri(y,tan(audio(y,externalVal))))),audio(y,externalVal)),tan(externalVal)),x),pow((x*cos(tan(x))),y)))))+(externalVal*x))/cos(y)),y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "bri(externalVal,externalVal)",
          "b": "bri(tan(x),x)",
          "g": "audio(min(sin(pow(max((externalVal*y),x),externalVal)),sin(externalVal)),tan(cos(x)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "audio(cos((x+externalVal)),bri((x+max(tan(y),tan(tan(externalVal)))),(cos(y)-externalVal)))",
          "b": "sin(y)",
          "g": "(cos(y)-cos(y))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(externalVal-pow(bri(x,externalVal),(y-x)))",
          "b": "(externalVal*sin(y))",
          "g": "(x/bri(y,tan((y*y))))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(externalVal/audio(y,cos(x)))",
          "b": "bri(y,externalVal)",
          "g": "min(cos(pow(audio(max((externalVal/externalVal),y),min((externalVal+min(x,max(y,x))),y)),pow(tan(cos(y)),max(audio(x,audio(y,externalVal)),(x+max(x,externalVal)))))),bri(x,x))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(tan((y*sin(x))),y)",
          "b": "(y*x)",
          "g": "sin((sin((bri(bri(y,y),x)/(externalVal-(y*y))))-audio((y/audio(pow(y,x),x)),x)))"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(externalVal+(pow(y,sin(tan((externalVal*min((pow(bri((x/x),sin(externalVal)),min((externalVal+min(x,y)),cos(y)))/(y-sin(externalVal))),x)))))+x))",
          "b": "bri(x,(y-externalVal))",
          "g": "((sin(externalVal)+(externalVal-externalVal))-externalVal)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "(y-tan(pow(x,pow(externalVal,y))))",
          "b": "max(bri(x,tan(x)),(externalVal/tan(tan(tan((y*max(y,x)))))))",
          "g": "sin(y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "pow(pow(bri(pow(x,externalVal),(y-x)),x),externalVal)",
          "b": "(y*max(max(y,audio(sin(audio(y,y)),(externalVal*(x+((sin(pow(sin(externalVal),externalVal))*y)*(pow(x,x)+bri(min((min(externalVal,y)-(y*cos(x))),tan(pow(((externalVal+externalVal)-y),externalVal))),tan(min((x-x),y))))))))),y))",
          "g": "cos(y)"
        }
      },
      {
        "fitness": 0,
        "expressions": {
          "r": "max(x,max(x,(x-sin(x))))",
          "b": "max(min(tan(y),audio((externalVal+externalVal),min(y,y))),tan(audio(x,bri(pow(x,y),min(x,y)))))",
          "g": "pow(max((min(y,x)*externalVal),externalVal),x)"
        }
      }
    ],
    "timestamp": "18h:2m:59s"
  }],
  "timestamp": "2023-12-10-18-02-57"
}