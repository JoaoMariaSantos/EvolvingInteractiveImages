{
  "id": "nukd5mpa-42fr-vrs0-bp6h-u6e86haekj15",
  "parameters": {
    "crossoverRate": 0.5,
    "eliteSize": 2,
    "tournamentSize": 3,
    "mutationRate": 0.4000000059604645,
    "populationSize": 20
  },
  "populations": [
    {
      "generation": 0,
      "id": "ahexmemh-r40p-4u0k-5omv-v8v3p3fct3oi",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal*y)",
            "b": "cos(externalVal)",
            "g": "audio(externalVal,cos(cos(y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal*(y+y))",
            "b": "cos((y*audio((tan((y/y))*x),(y*sin(externalVal)))))",
            "g": "((audio((y*(x-audio(sin(y),sin((cos(sin(externalVal))-(x*y)))))),y)-externalVal)-x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(sin(y))",
            "b": "audio(externalVal,externalVal)",
            "g": "(externalVal-y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos((x-x))",
            "b": "cos(((x/(y-audio(y,(externalVal*(y+externalVal)))))+x))",
            "g": "tan((((cos((((y-sin(y))*sin((cos((x*(y+tan((externalVal*y)))))-audio(((((x*(externalVal+tan((sin(externalVal)-(x-((cos(x)-externalVal)+audio(x,x)))))))*x)-(cos((y+externalVal))+(y/externalVal)))-cos(audio(externalVal,x))),cos((tan((externalVal/x))/((sin(((x/((externalVal-externalVal)/(x+y)))*externalVal))/((audio(tan((x*sin(x))),(y+(y-y)))+((externalVal/x)*y))-x))*((cos((tan((x-(sin(y)-y)))*audio(externalVal,y)))*externalVal)+(((tan(externalVal)/(externalVal-sin(externalVal)))/(audio(sin(((audio((x/x),sin((cos(cos((x-x)))*(y/(externalVal*sin(y))))))-y)/tan((externalVal+tan(tan(y)))))),y)-externalVal))+(x/(audio(audio(x,tan(externalVal)),x)/(externalVal*sin(cos(externalVal))))))))))))))+y))*audio(y,cos(x)))+y)*audio(x,(y*x))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal+x)",
            "b": "(y+y)",
            "g": "tan(y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(cos(((audio(externalVal,x)/externalVal)*(tan(audio(tan(x),externalVal))+externalVal)))/y)",
            "b": "(audio(cos((x*externalVal)),audio(cos((sin((audio((cos(x)/cos(sin(y))),(tan((((y+(audio((y+((cos(x)-audio((audio(sin(y),tan(x))/(sin(audio(y,sin(x)))+x)),cos(externalVal)))*(externalVal/(x-(cos(sin(externalVal))/(x/(x/externalVal))))))),x)+sin(externalVal)))+(cos(y)*(y*audio(audio(y,(sin(sin(externalVal))/externalVal)),x))))*x))/(x+y)))+externalVal))*externalVal)),y))/y)",
            "g": "(x/x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-x)",
            "b": "(sin((y*y))-externalVal)",
            "g": "sin(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "audio(audio(x,sin(tan(externalVal))),(externalVal-(x/audio(y,(cos(((externalVal+(externalVal/(audio(((externalVal*x)-sin(sin(sin((y/(x*(sin(externalVal)-externalVal))))))),(x/sin(y)))+(externalVal-y))))-y))-x)))))",
            "b": "(audio(x,externalVal)/externalVal)",
            "g": "(y/(((y/(audio(audio(externalVal,externalVal),x)-y))*externalVal)/x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((externalVal-externalVal)+(sin((cos(y)*cos(x)))/(audio(audio(externalVal,(x-externalVal)),tan(y))/externalVal)))",
            "b": "(audio(externalVal,y)*(externalVal/x))",
            "g": "sin(sin(cos(tan(cos(cos(cos((tan(cos(externalVal))-(externalVal/x)))))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan((sin((x-audio(y,y)))/(cos(y)/(y*externalVal))))",
            "b": "(y*externalVal)",
            "g": "tan(x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos((y/externalVal))",
            "b": "(cos(audio(audio((tan((sin(x)/(x-externalVal)))-audio(cos(((x*y)/(sin(externalVal)+(tan(sin(tan((audio(y,tan(externalVal))+y))))-externalVal)))),sin(cos(audio((((externalVal+cos(y))-audio((x+x),cos(y)))+y),externalVal))))),sin(x)),y))+(y/x))",
            "g": "tan((x+((y+sin(cos(sin(externalVal))))+externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((externalVal+externalVal)/sin((tan(x)*(((((sin(y)-audio(audio(x,(externalVal-(externalVal*(y+externalVal)))),cos(((cos((((y-externalVal)/externalVal)+externalVal))/sin(externalVal))-audio(externalVal,(cos(y)*((externalVal/((x/x)+(x/x)))/(externalVal-x))))))))*externalVal)-y)/y)/externalVal))))",
            "b": "tan((sin(x)-y))",
            "g": "audio(y,tan(y))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "(tan(externalVal)/y)",
            "g": "sin((((externalVal/x)*(tan(x)/externalVal))-(x+(y-externalVal))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(audio(x,externalVal))",
            "b": "((y*externalVal)/(externalVal*externalVal))",
            "g": "tan(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(tan(sin(externalVal)))",
            "b": "cos(cos((sin(x)*x)))",
            "g": "((y*y)+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y-x)",
            "b": "(y+externalVal)",
            "g": "(x*externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(x)",
            "b": "sin(((((externalVal+x)+x)+tan(audio(tan(((cos(((((externalVal/(sin((externalVal-cos(cos(externalVal))))-x))-audio(externalVal,(tan(audio(audio(y,audio(y,y)),y))+sin(audio((((y/x)*y)*(externalVal+tan(x))),y)))))-y)-y))+y)/y)),cos((y+y)))))/externalVal))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "(sin(tan((externalVal*externalVal)))/x)",
            "g": "(x+sin(x))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "sin(externalVal)",
            "b": "audio(tan((x*audio((x/x),cos(y)))),x)",
            "g": "audio(sin(tan(cos(externalVal))),cos(externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(y/(externalVal-(sin(externalVal)*x)))",
            "b": "sin(externalVal)",
            "g": "(y-externalVal)"
          }
        }
      ],
      "timestamp": "23h:52m:4s"
    },
    {
      "generation": 1,
      "ascendantID": "ahexmemh-r40p-4u0k-5omv-v8v3p3fct3oi",
      "id": "38pmmqbq-ysjh-o8tr-ze4d-tuxolv0fjb9w",
      "individuals": [
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal*y)",
            "b": "cos(externalVal)",
            "g": "audio(externalVal,cos(cos(y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal*(y+y))",
            "b": "cos((y*audio((tan((y/y))*x),(y*sin(externalVal)))))",
            "g": "((audio((y*(x-audio(sin(y),sin((cos(sin(externalVal))-(x*y)))))),y)-externalVal)-x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(x)",
            "b": "cos(((((externalVal+x)+x)+tan(audio(tan(((cos(((((externalVal/(cos((externalVal-cos(cos(externalVal))))-x))-audio(externalVal,(tan(audio(tan(y),externalVal))+sin(audio((((y/x)*externalVal)*(externalVal+audio(x,x))),y)))))+y)-y))+y)/y)),cos((y+y)))))/externalVal))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "sin(tan(externalVal))",
            "g": "((((externalVal/x)*(tan(x)/externalVal))-(x+(y-externalVal)))/sin(audio(externalVal,((sin(cos((x-y)))+x)/y))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(sin(((tan(externalVal)/externalVal)/(tan(audio(tan(x),externalVal))+externalVal)))/y)",
            "b": "(audio(cos((x*externalVal)),audio(tan((cos((audio((cos(x)/sin(sin(y))),(cos((((y+(audio((y+((sin(x)-audio((audio(sin(y),tan(x))/(sin(tan(x))+x)),cos(externalVal)))*(externalVal/(x-(tan(sin(externalVal))/(x/(x/externalVal))))))),x)+sin(externalVal)))+(audio(externalVal,y)*(externalVal/x)))*x))/(x+y)))+externalVal))*externalVal)),y))/y)",
            "g": "(x/x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos((y/externalVal))",
            "b": "(cos(audio(audio((tan((sin(x)/(x-externalVal)))-audio(cos(((x-externalVal)/(sin(externalVal)+(tan(sin(audio((tan(y)+y),sin(x))))-externalVal)))),sin(cos(audio((((externalVal+cos(y))-audio((x+x),cos(y)))+y),externalVal))))),sin(x)),y))+(y/x))",
            "g": "cos((x+((y+sin(cos(cos(y))))+externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(cos(((tan(externalVal)/externalVal)*(tan(audio(audio(x,audio((y+((audio(audio(x,tan(sin(sin((x*(((y*y)/sin(externalVal))+(y-x))))))),sin(y))+audio(sin((sin((y-sin(x)))*(y-externalVal))),((((cos(externalVal)/x)/(y-y))/y)-externalVal)))+x)),(sin(y)*(y*externalVal)))),externalVal))+externalVal)))/y)",
            "b": "(audio(cos((x*externalVal)),audio(cos((sin((audio((cos(x)*cos(sin(y))),(tan((((y+(audio((y+((cos(x)+audio((audio(sin(y),tan(x))/(sin(audio(y,sin(x)))+x)),cos(externalVal)))*(externalVal/(x-sin(cos(sin(externalVal))))))),x)+sin(externalVal)))+(cos(y)*(y*audio(audio(y,sin(sin(sin(externalVal)))),x))))/x))/(x+y)))+externalVal))*externalVal)),y))/y)",
            "g": "(x/x)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(tan(x))",
            "b": "cos(cos((cos(x)*x)))",
            "g": "((x/externalVal)+externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal-x)",
            "b": "(sin((y*y))-externalVal)",
            "g": "sin(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((externalVal+externalVal)/((tan(x)*(((((sin(y)-tan(audio(x,(externalVal-(externalVal*(y-externalVal))))))*externalVal)-y)/y)*externalVal))/x))",
            "b": "tan(audio((audio(externalVal,cos(((x*externalVal)*y)))/(x/x)),((externalVal-x)/y)))",
            "g": "audio(y,audio(tan(y),((externalVal+((externalVal+externalVal)*tan(externalVal)))/y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((y+y)+(sin((cos(y)/tan(x)))/(audio(audio(externalVal,(x-externalVal)),tan(y))/externalVal)))",
            "b": "(audio(externalVal,y)/(externalVal*x))",
            "g": "sin(sin(sin(tan(cos(sin(cos((tan(cos(externalVal))-(externalVal/x)))))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos((y/externalVal))",
            "b": "(cos(tan(audio((cos(sin(cos(x)))-tan(cos(sin((x*y))))),sin(x))))+(y/x))",
            "g": "tan((x+((y+sin(cos(cos(externalVal))))+externalVal)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(sin(y))",
            "b": "audio(externalVal,externalVal)",
            "g": "(externalVal-y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "audio(tan((x*(tan((sin(x)/(x-externalVal)))-tan(cos(((x*externalVal)/(sin(externalVal)+(cos(sin(tan((audio(y,tan(externalVal))+y))))-externalVal)))))))),x)",
            "g": "audio(sin(tan(cos(externalVal))),cos(externalVal))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((externalVal-externalVal)+(sin((sin(y)-cos(x)))/(audio(audio(y,(x+externalVal)),tan(y))/externalVal)))",
            "b": "(audio(externalVal,y)*(externalVal*x))",
            "g": "cos(sin(cos(audio(cos(sin(cos((tan(cos(externalVal))*(externalVal/x))))),externalVal))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(x)",
            "b": "sin(((((externalVal+x)+x)+tan(audio(tan(((cos(((((externalVal*(sin((externalVal-cos(cos(externalVal))))-x))-audio(externalVal,(tan(audio(audio(y,audio(y,y)),y))+sin(audio((((y*x)*y)/(externalVal+tan(x))),y)))))-y)+y))-y)*y)),cos((y+y)))))/externalVal))",
            "g": "cos(externalVal)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "tan(x)",
            "b": "sin(((((externalVal+x)+x)+tan(audio(tan(((cos(((((externalVal/(sin((externalVal*cos(cos(externalVal))))-x))-audio(externalVal,(tan(audio(audio(y,audio(y,y)),y))+sin(audio((((y/x)*y)*(externalVal+tan(x))),y)))))-y)+y))+y)/y)),cos((y-y)))))/externalVal))",
            "g": "cos(y)"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "(externalVal*y)",
            "b": "cos(externalVal)",
            "g": "audio(externalVal,cos(cos(y)))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "((externalVal-y)+(sin((cos(y)*cos(x)))/(audio(audio(externalVal,(x+externalVal)),tan(y))/externalVal)))",
            "b": "(audio(externalVal,y)*(externalVal/x))",
            "g": "sin(sin(sin(tan(cos(cos(cos((tan(cos(externalVal))-(externalVal*x)))))))))"
          }
        },
        {
          "fitness": 0,
          "expressions": {
            "r": "cos(externalVal)",
            "b": "(tan(externalVal)/y)",
            "g": "sin((((externalVal/x)*(tan(x)*externalVal))-(x+(y-externalVal))))"
          }
        }
      ],
      "timestamp": "23h:52m:26s"
    }
  ],
  "timestamp": "2024-01-20-23-52-02"
}